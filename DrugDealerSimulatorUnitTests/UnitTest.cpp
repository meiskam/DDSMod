#include "pch.h"
#include "Defs.h"
#include "CppUnitTest.h"
#include "../DrugDealerSimulator/SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// WidgetBlueprintGeneratedClass InventoryItemTooltip.InventoryItemTooltip_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemTooltip__InventoryItemTooltip_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, contentList, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TextBlock_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, txtForm, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, txtWeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemDesc, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemWeight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, UnknownData_4UBJ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, activeElementsColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, Quan, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemTooltip_C, 0x02A4);
		}

		// Class TcpMessaging.TcpMessagingSettings
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_S8I0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_XRFG, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// Class MovieScene.MovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_1R6I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// Class MovieScene.MovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_6LQZ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_BWBX, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_B2KC, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_1ZM8, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E0);
		}

		// Class MovieScene.MovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_Y9ZJ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0058);
		}

		// Class MovieScene.MovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0058);
		}

		// Class MovieScene.MovieSceneSequence
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_5HQK, 0x0342);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0348);
		}

		// Class MovieScene.MovieSceneSequencePlayer
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_MTO9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_RON1, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_0CQW, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_W8EU, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_9J6V, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x07C8);
		}

		// Class MovieScene.MovieScene
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_SO08, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x00D0);
		}

		// Class MovieScene.MovieSceneBindingOverrides
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_VXU4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_T17Z, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0098);
		}

		// Class MovieScene.MovieSceneBindingOverridesInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverridesInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverridesInterface, 0x0028);
		}

		// Class MovieScene.MovieSceneBindingOwnerInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// Class MovieScene.MovieSceneBuiltInEasingFunction
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_A08E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_8FTK, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// Class MovieScene.MovieSceneEasingExternalCurve
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_37F8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// Class MovieScene.MovieSceneEasingFunction
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// Class MovieScene.MovieSceneFolder
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_BBNP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// Class MovieScene.MovieSceneKeyProxy
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// Class MovieScene.MovieSceneSubSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_GSJU, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_1PKF, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0150);
		}

		// Class MovieScene.MovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0068);
		}

		// Class MovieScene.TestMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_9WWC, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0070);
		}

		// Class MovieScene.TestMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E0);
		}

		// Class MovieScene.TestMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0350);
		}

		// Class ImageWriteQueue.ImageWriteBlueprintLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// BlueprintGeneratedClass equipmentShop.equipmentShop_C
		TEST_METHOD(BlueprintGeneratedClass__equipmentShop__equipmentShop_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, baseShopEquipment, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, baseShopEquipmentStatic, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, baseShopEquipmentPrice, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, baseShopEquipmentQuantity, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, curEquipmentQuantity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, baseShopEqAvailabilityDay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, baseShopEquipmentLocked, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, shopRestoreDay, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, UnknownData_Q8PE, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, shopName, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, blockRestore, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, UnknownData_W39A, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, ShopID, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShop_C, DisableFromMap, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AequipmentShop_C, 0x03E9);
		}

		// Class MovieSceneTracks.MovieSceneTransformOrigin
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// Class MovieSceneTracks.MovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0108);
		}

		// Class MovieSceneTracks.MovieScene3DAttachSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_3PQX, 0x011E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0120);
		}

		// Class MovieSceneTracks.MovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieScene3DAttachTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieScene3DPathSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_C6UC, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_VZXF, 0x01AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B0);
		}

		// Class MovieSceneTracks.MovieScene3DPathTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieScene3DTransformSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_NMHH, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_QG8E, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_I2NI, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0730);
		}

		// Class MovieSceneTracks.MovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieScene3DTransformTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneActorReferenceSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0200);
		}

		// Class MovieSceneTracks.MovieSceneActorReferenceTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneAudioSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_O5EW, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0278);
		}

		// Class MovieSceneTracks.MovieSceneAudioTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_GZD6, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneByteSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneByteTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneCameraAnimSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_E0K7, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0120);
		}

		// Class MovieSceneTracks.MovieSceneCameraAnimTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneCameraCutSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0108);
		}

		// Class MovieSceneTracks.MovieSceneCameraCutTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_KYEO, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_KCTG, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0120);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneCinematicShotSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneCinematicShotTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneColorSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0360);
		}

		// Class MovieSceneTracks.MovieSceneColorTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_VP4O, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneEnumSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneEnumTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneEulerTransformTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E0);
		}

		// Class MovieSceneTracks.MovieSceneEventRepeaterSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x00E8);
		}

		// Class MovieSceneTracks.MovieSceneEventSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01D0);
		}

		// Class MovieSceneTracks.MovieSceneEventTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_5YXO, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_1KLH, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneEventTriggerSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0168);
		}

		// Class MovieSceneTracks.MovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0180);
		}

		// Class MovieSceneTracks.MovieSceneFadeSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_ECK1, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x0198);
		}

		// Class MovieSceneTracks.MovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneFadeTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneIntegerSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0170);
		}

		// Class MovieSceneTracks.MovieSceneIntegerTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneLevelVisibilitySection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_PRQV, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x00F8);
		}

		// Class MovieSceneTracks.MovieSceneLevelVisibilityTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0070);
		}

		// Class MovieSceneTracks.MovieSceneComponentMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_AGBV, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0070);
		}

		// Class MovieSceneTracks.MovieSceneParameterSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0110);
		}

		// Class MovieSceneTracks.MovieSceneParticleParameterTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneParticleSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneParticleTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0068);
		}

		// Class MovieSceneTracks.MovieSceneSkeletalAnimationSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_ESC2, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01D0);
		}

		// Class MovieSceneTracks.MovieSceneSkeletalAnimationTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_VNZ5, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0070);
		}

		// Class MovieSceneTracks.MovieSceneSlomoSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0180);
		}

		// Class MovieSceneTracks.MovieSceneSlomoTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneSpawnSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneSpawnTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0078);
		}

		// Class MovieSceneTracks.MovieSceneStringSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0180);
		}

		// Class MovieSceneTracks.MovieSceneStringTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneTransformTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0080);
		}

		// Class MovieSceneTracks.MovieSceneVectorSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_ONGT, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0368);
		}

		// Class MovieSceneTracks.MovieSceneVectorTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_4KU2, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneVisibilityTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0080);
		}

		// WidgetBlueprintGeneratedClass saveSlotWidget.saveSlotWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__saveSlotWidget__saveSlotWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, hoverImage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, txtSaveDate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, txtSlotName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, SlotID, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, UnknownData_FCHS, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, parentRef, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveSlotWidget_C, activeElementsColor, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsaveSlotWidget_C, 0x0268);
		}

		// Class ClothingSystemRuntime.ClothingAssetCustomData
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAssetCustomData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// Class ClothingSystemRuntime.ClothingAsset
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ClothConfig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_FAUH, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LODData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LodMap, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneNames, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneIndices, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ReferenceBoneIndex, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_Y4PE, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, CustomData, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAsset, 0x0178);
		}

		// Class ClothingSystemRuntime.ClothingSimulationFactoryNv
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationFactoryNv)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// Class ClothingSystemRuntime.ClothingSimulationInteractorNv
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationInteractorNv)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_JZGP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// Class NavigationSystem.NavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_LQK1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_KRA5, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_EPXS, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_KCP0, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_ZX6J, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x04E8);
		}

		// Class NavigationSystem.AbstractNavData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x04E8);
		}

		// Class NavigationSystem.CrowdManagerBase
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// Class NavigationSystem.NavArea
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_MM88, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// Class NavigationSystem.NavArea_Default
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// Class NavigationSystem.NavArea_LowHeight
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// Class NavigationSystem.NavArea_Null
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// Class NavigationSystem.NavArea_Obstacle
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// Class NavigationSystem.NavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// Class NavigationSystem.NavAreaMeta_SwitchByAgent
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// Class NavigationSystem.NavCollision
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_FCI0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_7MB1, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// Class NavigationSystem.NavigationGraph
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x04E8);
		}

		// Class NavigationSystem.NavigationGraphNode
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0328);
		}

		// Class NavigationSystem.NavigationGraphNodeComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0260);
		}

		// Class NavigationSystem.NavigationInvokerComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00F8);
		}

		// Class NavigationSystem.NavigationPath
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_UEN9, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// Class NavigationSystem.NavigationPathGenerator
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// Class NavigationSystem.NavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_WWGB, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// Class NavigationSystem.NavigationSystemV1
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_37QM, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_LAZ2, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_HD10, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_DIA4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_E1V5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_U7HM, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_FZAM, 0x01D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0410);
		}

		// Class NavigationSystem.NavigationSystemModuleConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_WLKZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0050);
		}

		// Class NavigationSystem.NavigationTestingActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_H0E6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_TP55, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_7ZIJ, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_M03S, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_6BEH, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_CYBY, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_LCOR, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_FK3N, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0410);
		}

		// Class NavigationSystem.NavLinkComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0570);
		}

		// Class NavigationSystem.NavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_FGJ9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_W00A, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x0120);
		}

		// Class NavigationSystem.NavLinkCustomComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_3ZAH, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_61RY, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_Y1CT, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_U0UC, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_1WA2, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x01C8);
		}

		// Class NavigationSystem.NavLinkCustomInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// Class NavigationSystem.NavLinkHostInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// Class NavigationSystem.NavLinkRenderingComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0560);
		}

		// Class NavigationSystem.NavLinkTrivial
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// Class NavigationSystem.NavMeshBoundsVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_3UU6, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0368);
		}

		// Class NavigationSystem.NavMeshRenderingComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_UP41, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0570);
		}

		// Class NavigationSystem.NavModifierComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_CUKI, 0x0135);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0148);
		}

		// Class NavigationSystem.NavModifierVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_AV47, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0370);
		}

		// Class NavigationSystem.NavNodeInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// Class NavigationSystem.NavSystemConfigOverride
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_MV5U, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0338);
		}

		// Class NavigationSystem.NavTestRenderingComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0560);
		}

		// Class NavigationSystem.RecastFilter_UseDefaultArea
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// Class NavigationSystem.RecastNavMesh
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_NTMF, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_KC1Z, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_RX82, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_AEP8, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_HVA8, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x05A0);
		}

		// Class NavigationSystem.RecastNavMeshDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_YTLW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// WidgetBlueprintGeneratedClass waterSinkProgressWidget.waterSinkProgressWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__waterSinkProgressWidget__waterSinkProgressWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UwaterSinkProgressWidget_C, progSinkWater, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UwaterSinkProgressWidget_C, sinkRef, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UwaterSinkProgressWidget_C, 0x0218);
		}

		// BlueprintGeneratedClass dogFindPlayerLoc.dogFindPlayerLoc_C
		TEST_METHOD(BlueprintGeneratedClass__dogFindPlayerLoc__dogFindPlayerLoc_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdogFindPlayerLoc_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdogFindPlayerLoc_C, 0x00A8);
		}

		// BlueprintGeneratedClass policeDog.policeDog_C
		TEST_METHOD(BlueprintGeneratedClass__policeDog__policeDog_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, Audio, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, RamaSave, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, policemanRef, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, policemanID, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, UnknownData_4VDF, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, leashRef, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, leashID, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, baseSpeed, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, medSpeed, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, runSpeed, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, targetSpeed, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, maxSniffRadius, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, maxSenseRadius, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, senseCounter, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, firstLoad, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, playerVisible, 0x0791);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDog_C, drugsSensed, 0x0792);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceDog_C, 0x0793);
		}

		// Class AudioMixer.SynthComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_ZJRS, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_3ZLK, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_P48V, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_A4R2, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x05C0);
		}

		// Class AudioMixer.AudioMixerBlueprintLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// Class AudioMixer.SubmixEffectDynamicsProcessorPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_2Q8K, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x00B8);
		}

		// Class AudioMixer.SubmixEffectSubmixEQPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_EX51, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// Class AudioMixer.SubmixEffectReverbPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_YJGT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D0);
		}

		// Class AudioMixer.SynthSound
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_QF1B, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0280);
		}

		// BlueprintGeneratedClass PlayerInfluenceInterface.PlayerInfluenceInterface_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerInfluenceInterface__PlayerInfluenceInterface_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInfluenceInterface_C, 0x0028);
		}

		// BlueprintGeneratedClass filterNpcCitizen.filterNpcCitizen_C
		TEST_METHOD(BlueprintGeneratedClass__filterNpcCitizen__filterNpcCitizen_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfilterNpcCitizen_C, 0x0048);
		}

		// Class AnimGraphRuntime.AnimCustomInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimCustomInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCustomInstance, 0x0360);
		}

		// Class AnimGraphRuntime.AnimNotify_PlayMontageNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// Class AnimGraphRuntime.AnimNotify_PlayMontageNotifyWindow
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// Class AnimGraphRuntime.AnimSequencerInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0360);
		}

		// Class AnimGraphRuntime.KismetAnimationLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// Class AnimGraphRuntime.PlayMontageCallbackProxy
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_94XZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// AnimBlueprintGeneratedClass keijiAnimBP.keijiAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__keijiAnimBP__keijiAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_Root_67F8DB9C4BEE4DFDCD13AB99C1CC06C1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_TransitionResult_82BB96E74C8D3AC7C8D846AE085B87E4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_TransitionResult_5FC1550E479D46404466E18806FF5013, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_TransitionResult_423AFFDF4668E54C8CE012ABBB840A37, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_TransitionResult_988FDD3A4C67AD193F4C51A6240DFC50, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_TransitionResult_8BE11A0949D0D409B1FA8B902C6A08D1, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_TransitionResult_3E52C48A4969649C4F06D7A1A4B2AF4A, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_SequencePlayer_7227D923454D11523CA530A2D2BA17AA, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_StateResult_2E6991DF49640D4B03660A91E963B2FB, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_SequencePlayer_2138226A42024EB2D2D4FCBB72A503D2, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_StateResult_279DD9A34926A7A322DFF38AE1DFB999, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_SequencePlayer_2B02D74E4D7CB3AE0503C5BFC3BE9C66, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_StateResult_2B6B76F54950A7E3FE3F73BB5F83AF14, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_SequencePlayer_B98197FB4799EC891D9B95B39EB49608, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_StateResult_98DB83824BA2C52318F43397E95120DD, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimGraphNode_StateMachine_DB22571E428141ACB61378B563C83DF7, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, AnimStep, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiAnimBP_C, Reset, 0x09BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UkeijiAnimBP_C, 0x09BD);
		}

		// BlueprintGeneratedClass decoOldschoolCeilingLamp4.decoOldschoolCeilingLamp4_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolCeilingLamp4__decoOldschoolCeilingLamp4_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp4_C, UnknownData_KYC6, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp4_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp4_C, PointLight, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolCeilingLamp4_C, 0x0458);
		}

		// BlueprintGeneratedClass decoTrashChair.decoTrashChair_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashChair__decoTrashChair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashChair_C, 0x0446);
		}

		// BlueprintGeneratedClass decoOldschoolChair01.decoOldschoolChair01_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolChair01__decoOldschoolChair01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolChair01_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPicture_01.decoPicture_01_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_01__decoPicture_01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_01_C, 0x0446);
		}

		// BlueprintGeneratedClass interactiveBaseObject.interactiveBaseObject_C
		TEST_METHOD(BlueprintGeneratedClass__interactiveBaseObject__interactiveBaseObject_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, Model, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, objName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, objActionName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, workStationAttached, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, isGizmo, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, canPlaceFloor, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, canPlaceWall, 0x0373);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, canPlaceCeiling, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, CanPlaceTabletop, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, UnknownData_G1N9, 0x0376);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, TabletopBaseSizing, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, addRotation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, rotSpeedMultiplier, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, canPlace, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, subclassPlaceRestriction, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, UnknownData_DNV0, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, allOverlapingActors, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, alignToWall, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, immovable, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, UnknownData_3OB3, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, appEquipmentData, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, needsHandsFreeToActivate, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, UnknownData_44Q8, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, InnerSubclassIndex, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, DeepSubclassIndex, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, UnknownData_AUZG, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, trashfurniture, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, ItemID, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveBaseObject_C, EquipmentID, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AinteractiveBaseObject_C, 0x0428);
		}

		// BlueprintGeneratedClass ballenaBodyguard01.ballenaBodyguard01_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaBodyguard01__ballenaBodyguard01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaBodyguard01_C, 0x0AD4);
		}

		// BlueprintGeneratedClass flashDriveSpawn.flashDriveSpawn_C
		TEST_METHOD(BlueprintGeneratedClass__flashDriveSpawn__flashDriveSpawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AflashDriveSpawn_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AflashDriveSpawn_C, blocker, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AflashDriveSpawn_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AflashDriveSpawn_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AflashDriveSpawn_C, 0x0348);
		}

		// BlueprintGeneratedClass ratDropSign.ratDropSign_C
		TEST_METHOD(BlueprintGeneratedClass__ratDropSign__ratDropSign_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, PointLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, tlightFireSm, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, tLightSm, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, AnimLoop_Scale_9E45E4F84390A1D6A523708C73E1C901, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, AnimLoop_Intensity_9E45E4F84390A1D6A523708C73E1C901, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, AnimLoop__Direction_9E45E4F84390A1D6A523708C73E1C901, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, UnknownData_S8LC, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, AnimLoop, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, Text, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDropSign_C, baseIntensity, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AratDropSign_C, 0x0384);
		}

		// AnimBlueprintGeneratedClass CitizenMale01_animBP.CitizenMale01_animBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__CitizenMale01_animBP__CitizenMale01_animBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_Root_EFB4AFEB41AC62DF2BEA788798927999, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_TransitionResult_F3385A714B79706C247AC9B1A2080176, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_TransitionResult_6C38DF21457D34131ED2B494503FC731, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_TransitionResult_0A3C303E46868CA482E785AFE8D935F8, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_TransitionResult_1F60BAFE44AB61205A98B3A0EACABB48, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_SequencePlayer_07691A2345DAFB356FCDDCA007AFF9AB, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_StateResult_7DB1C312459A7BB48AB34F91BB7E6206, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_SequencePlayer_A68A79944E2A3A15D069AA868F382C51, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_StateResult_7B1E5FD843E558042E0988B8E395B3E3, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_BlendSpacePlayer_AFD02DD445C14A808117708862AEB511, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_StateResult_94E7F6594BB792B16BE603AABCAD3928, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, AnimGraphNode_StateMachine_08EE342448103D08EC193DB36A404DAE, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, RotRate, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, Speed, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, Velocity, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, UnknownData_DFZ7, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale01_animBP_C, Owner, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCitizenMale01_animBP_C, 0x08E8);
		}

		// BlueprintGeneratedClass goHomePoint.goHomePoint_C
		TEST_METHOD(BlueprintGeneratedClass__goHomePoint__goHomePoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, Influence, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, Cube, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, Arrow, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, Audio, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, Box, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, SpawnLocation, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, firstArea, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgoHomePoint_C, InInfluenceRadius, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgoHomePoint_C, 0x036E);
		}

		// BlueprintGeneratedClass teleportDestination.teleportDestination_C
		TEST_METHOD(BlueprintGeneratedClass__teleportDestination__teleportDestination_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AteleportDestination_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AteleportDestination_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AteleportDestination_C, 0x0338);
		}

		// BlueprintGeneratedClass BP_BU_ManagerActor.BP_BU_ManagerActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BU_ManagerActor__BP_BU_ManagerActor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BU_ManagerActor_C, RamaSave, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BU_ManagerActor_C, DefaultSceneRoot, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BU_ManagerActor_C, 0x0420);
		}

		// BlueprintGeneratedClass enviroLightBase.enviroLightBase_C
		TEST_METHOD(BlueprintGeneratedClass__enviroLightBase__enviroLightBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, lineTraceStart, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, rangeAffect, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, calculationBrightness, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, isOn, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, UnknownData_CILE, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, dayTimeControler, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, farDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, IndexToRemove, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AenviroLightBase_C, topCalcDistance, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AenviroLightBase_C, 0x0374);
		}

		// Class ActorSequence.ActorSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0370);
		}

		// Class ActorSequence.ActorSequenceComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, bAutoPlay, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_UDG8, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x0148);
		}

		// Class ActorSequence.ActorSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x07C8);
		}

		// BlueprintGeneratedClass saveStation.saveStation_C
		TEST_METHOD(BlueprintGeneratedClass__saveStation__saveStation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, pawnDetector, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, Box, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, Arrow, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, RamaSave, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, minShowDistance, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, maxShowDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, saveStationActive, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, canUseStation, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, UnknownData_WQEB, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, dynMat, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, raid, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, UnknownData_71IB, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, saveTimer, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, saveTimeout, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, UnknownData_UMDI, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, pleaseWaitFormat, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveStation_C, Widget, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsaveStation_C, 0x0498);
		}

		// BlueprintGeneratedClass workStationEquipmentBase.workStationEquipmentBase_C
		TEST_METHOD(BlueprintGeneratedClass__workStationEquipmentBase__workStationEquipmentBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, progressWidget, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, selectionWidget, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, baseGizmo, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, EqData_1, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, isGizmo_1, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, UnknownData_4QHL, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, baseSizing, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, canFit, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, UnknownData_6WUX, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, lineTracePoints, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, fromHovered, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, isWorking, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, isOccupied, 0x04C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, isSelected, 0x04C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, productionFinished, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, isAutomatic, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, isProcessingTool, 0x04C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, UnknownData_KAKD, 0x04C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, holdOptionsNames, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, holdOptionsStringActions, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, curCapacity, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, maxCapacity, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, countdownSeconds, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, coundownTimeCalculated, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, baseWorkingTimeSeconds, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, UnknownData_WWS5, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, childNameStorage, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, initialSubstanceData, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, InitialSubstanceMixProp, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, FinalProduct, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, FinalProductMixProp, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, finalProductAmount, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, potentialLossPercentMinimum, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, potentialLossPercentMaximum, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, precissionPercentage, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, memProduct, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationEquipmentBase_C, NewVar_0_1, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworkStationEquipmentBase_C, 0x07D0);
		}

		// BlueprintGeneratedClass workStationMixerBase.workStationMixerBase_C
		TEST_METHOD(BlueprintGeneratedClass__workStationMixerBase__workStationMixerBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, UberGraphFrame, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, drugsAdded, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, drugMixesAdded, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, drugsAddedAmount, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, endMixName, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, endMixDescription, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkStationMixerBase_C, maxCapOverride, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworkStationMixerBase_C, 0x083C);
		}

		// BlueprintGeneratedClass atmMachine.atmMachine_C
		TEST_METHOD(BlueprintGeneratedClass__atmMachine__atmMachine_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, Camera, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, mainComputerRef, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, withdrawAmount, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, depositAmount, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, atmUI, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, atmActive, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AatmMachine_C, AutoActivate, 0x0459);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AatmMachine_C, 0x045A);
		}

		// BlueprintGeneratedClass worldConsoleCommands.worldConsoleCommands_C
		TEST_METHOD(BlueprintGeneratedClass__worldConsoleCommands__worldConsoleCommands_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, maleClients, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, femaleClients, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, NewVar_1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, sewageTeleports, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, TempSelector, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, GameDifficultyDebug, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, SectorCTeleport, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, UnknownData_FYYL, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, DrugDatabase, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, NewVar_2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, TestArray, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldConsoleCommands_C, ComponentClasses, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworldConsoleCommands_C, 0x03C8);
		}

		// BlueprintGeneratedClass ballenaEntranceDenyDialogue.ballenaEntranceDenyDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaEntranceDenyDialogue__ballenaEntranceDenyDialogue_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaEntranceDenyDialogue_C, 0x0392);
		}

		// BlueprintGeneratedClass passageTrader.passageTrader_C
		TEST_METHOD(BlueprintGeneratedClass__passageTrader__passageTrader_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTrader_C, UnknownData_XG3K, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTrader_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTrader_C, Price, 0x0AE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApassageTrader_C, 0x0AE4);
		}

		// BlueprintGeneratedClass stream_oldMarket.stream_oldMarket_C
		TEST_METHOD(BlueprintGeneratedClass__stream_oldMarket__stream_oldMarket_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_oldMarket_C, 0x0330);
		}

		// BlueprintGeneratedClass stream_twoTowers.stream_twoTowers_C
		TEST_METHOD(BlueprintGeneratedClass__stream_twoTowers__stream_twoTowers_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_twoTowers_C, 0x0330);
		}

		// WidgetBlueprintGeneratedClass popupFrame.popupFrame_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__popupFrame__popupFrame_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, End, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, bigBg, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, btnAction, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, canvasBg, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, cracks, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, frameHolder, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, txtButtonText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, txtDesc, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, txtTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpopupFrame_C, ShowMouse, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpopupFrame_C, 0x0261);
		}

		// BlueprintGeneratedClass homeDestination.homeDestination_C
		TEST_METHOD(BlueprintGeneratedClass__homeDestination__homeDestination_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AhomeDestination_C, DefaultSceneRoot, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhomeDestination_C, 0x0330);
		}

		// BlueprintGeneratedClass wallSmallProceduralBP.wallSmallProceduralBP_C
		TEST_METHOD(BlueprintGeneratedClass__wallSmallProceduralBP__wallSmallProceduralBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSmallProceduralBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSmallProceduralBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSmallProceduralBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSmallProceduralBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwallSmallProceduralBP_C, 0x033D);
		}

		// WidgetBlueprintGeneratedClass onePackageWidget.onePackageWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__onePackageWidget__onePackageWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, Button_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, icon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, txtGrams, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, txtNam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, txtQuan, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, Index, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, UnknownData_UBKF, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UonePackageWidget_C, parentRef, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UonePackageWidget_C, 0x0250);
		}

		// BlueprintGeneratedClass fenceIndustrial02PartBP.fenceIndustrial02PartBP_C
		TEST_METHOD(BlueprintGeneratedClass__fenceIndustrial02PartBP__fenceIndustrial02PartBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrial02PartBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrial02PartBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrial02PartBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrial02PartBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfenceIndustrial02PartBP_C, 0x033D);
		}

		// WidgetBlueprintGeneratedClass UnlockedAreaData.UnlockedAreaData_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UnlockedAreaData__UnlockedAreaData_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, unlockPop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, boostersPanel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, btnUnlock, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, legendPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, progAreaExp, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, progAreaExpMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, progUnlock, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, reqPanel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, respectBarsPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, TextBlock_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, TextBlock_11, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtAreaNam, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtExpBoost, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtRespBoost, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtRespDropBoost, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtSaleBoost, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtUnlockArea, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtUnlockLevel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, txtUnlockRespect, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, unlockProgressPanel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, AreaString, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, areaManager, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnlockedAreaData_C, totalProgress, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUnlockedAreaData_C, 0x02DC);
		}

		// BlueprintGeneratedClass hideArea.hideArea_C
		TEST_METHOD(BlueprintGeneratedClass__hideArea__hideArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, Range, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, playerInsideRange, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, UnknownData_69B6, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, AreaRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhideArea_C, areaHideMultiplier, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhideArea_C, 0x0354);
		}

		// AnimBlueprintGeneratedClass eddieWalkAnimBP.eddieWalkAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__eddieWalkAnimBP__eddieWalkAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_Root_2822AB7043070539D13244B6EA70102D, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_TransitionResult_7562A5E14AD2C837AF5E56A097704F5A, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_SequencePlayer_21E92CBB49188FCE97631EB5B1D9FCB9, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_StateResult_0B0A08984CE60CB6959135960AA4B5D5, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_SequencePlayer_6EFE5AD344DBC7B4E3B2D89A755CC3D3, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_StateResult_170B5B5A434712750FA350A13AADF0F6, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, AnimGraphNode_StateMachine_78F4C7A04FB61B3801849991ABCC7935, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieWalkAnimBP_C, openDoor, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UeddieWalkAnimBP_C, 0x0691);
		}

		// BlueprintGeneratedClass trainCamShake.trainCamShake_C
		TEST_METHOD(BlueprintGeneratedClass__trainCamShake__trainCamShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtrainCamShake_C, 0x0160);
		}

		// AnimBlueprintGeneratedClass Pigeon_AnimBlueprint.Pigeon_AnimBlueprint_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Pigeon_AnimBlueprint__Pigeon_AnimBlueprint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_Root_F03A09464F3FD0A94761F3A66D20CBE1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_B811327A40C97850503D67925CBED9EA, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_3489454D40018920F14C9995BB675B0A, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_BF4EEDD046D39D41C9EE01A3BC293D6C, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_E6BE0C2642A80D5F2F858CAECCEC4D7B, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_B9D8000F49CFC819B092C197009145DC, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_427E5F8241D7061608CC2D87C103A468, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_BDC7EFFC485A459F7E4175843D9D3F95, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_43E17F0E465894818F71E3A76919CC40, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_653388304198BFDACF6587944C219E1D, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_CB901D414CCDAFAD7363EFBF5ECB60B8, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_1B5E09ED46A8111D58381A99FF2B4710, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_02743A4C43C54F1A23F08C9707D12525, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_DFAB854F4742B324EAE88CBA4AA760FC, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_TransitionResult_32E59B054B9E00E8312E3C92B27F9764, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_54B6A55F419F91346A4EE28E792546B6, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_3672BA7F4DBCD55B445693864E0A03A4, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_58F1A0454B459C6A9AEE5C84CE5EBABB, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_7FC693D648FEC2204D30E3B85CE7D4AE, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_691F2AF74802C39E570717876102BFB3, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_BlendListByInt_2816D29543E117DFB713C5A3C664C5DC, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_98CB820147E3648D7AD876A9DA9C9E70, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_2291FA604F4698FCB7E68098B2A4CB30, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_C25330BC44D37B04F51233B3C65B6188, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_97E3B41843A56187C6FF0694B8534C95, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_957D357D46933D3BBE94BB8A238EFE97, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_089DB1954505B00284EA85A58D58E214, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_9EB1BF204866806461C4208A180F1ACE, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_EF32214F455C189A07160AA2B5AEF488, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_5CED78294A437F474E2FDEADE0EF9A4F, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_761F01914A0080B3E0552C97F9B059B8, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_AE0CA43743E9404C75E22F83C8650F2D, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_F261B1D74EF6EC8DDF7796BE60612F15, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_BlendListByBool_5BF18CEF4991A63561A84487AE887811, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_0B6046F34CA189C27E0FFDBA4F930459, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_SequencePlayer_AA79D8C84ED63100A83A0099DDD03BE4, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateResult_66C8FF5442E14B6AED0693B1E06FEE53, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AnimGraphNode_StateMachine_1F9ECC564468F446B644A2925774B584, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, Direction, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, Flying_Speed, 0x1484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, Walking_Speed, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AreWeFlying_, 0x148C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AreWeWalking_, 0x148D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, IsInAir_, 0x148E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, FlapFast_, 0x148F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, DistanceToGround, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, PlayIdleLoop_, 0x1494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, UnknownData_0BO3, 0x1495);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, RandomIdleAnimation, 0x1498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, PlayTakeOffAnimation_, 0x149C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, AreWePerched_, 0x149D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, LandOnPerch_, 0x149E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, UnknownData_RYKL, 0x149F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, BBKey_AreWeFlying_, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, BBKey_AreWePerched_, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, BBKey_AreWeWalking_, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, BBKey_DistanceToTheGround, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, FlyToPerch_, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, UnknownData_77PL, 0x14C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, BBKey_FlyToPerch_, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigeon_AnimBlueprint_C, BBKey_FlyAway_, 0x14D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigeon_AnimBlueprint_C, 0x14D8);
		}

		// BlueprintGeneratedClass noisyNeighbourBP.noisyNeighbourBP_C
		TEST_METHOD(BlueprintGeneratedClass__noisyNeighbourBP__noisyNeighbourBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, Audio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, Player, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, refreshTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, IsPlaying, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, UnknownData_0BZE, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, minPlayInterval, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, playCountdown, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, Sounds, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, Activated, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, UnknownData_5DE8, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, curSoundID, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnoisyNeighbourBP_C, firstForced, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnoisyNeighbourBP_C, 0x0379);
		}

		// BlueprintGeneratedClass CursedSpotFixer.CursedSpotFixer_C
		TEST_METHOD(BlueprintGeneratedClass__CursedSpotFixer__CursedSpotFixer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACursedSpotFixer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACursedSpotFixer_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACursedSpotFixer_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACursedSpotFixer_C, OverlappedMarkers, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACursedSpotFixer_C, SaleMarkers, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACursedSpotFixer_C, 0x0360);
		}

		// BlueprintGeneratedClass BTService_Bird_LandWhenCloseTo_GroundTarget.BTService_Bird_LandWhenCloseTo_GroundTarget_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_LandWhenCloseTo_GroundTarget__BTService_Bird_LandWhenCloseTo_GroundTarget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, BBKey_AreWePerched_, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, BBKey_AreWeFlying_, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, BBKey_AreWeWalking_, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, BBKey_TimeToLand_, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, BBKey_DoADownTrace_, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_LandWhenCloseTo_GroundTarget_C, 0x00C8);
		}

		// BlueprintGeneratedClass BTTask_Bird_TurnAndRunFrom_Enemy.BTTask_Bird_TurnAndRunFrom_Enemy_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_TurnAndRunFrom_Enemy__BTTask_Bird_TurnAndRunFrom_Enemy_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_TurnAndRunFrom_Enemy_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_TurnAndRunFrom_Enemy_C, Enemy, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_TurnAndRunFrom_Enemy_C, DistanceToEnemy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_TurnAndRunFrom_Enemy_C, TurnSpeed, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_TurnAndRunFrom_Enemy_C, Elapsed_time, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_TurnAndRunFrom_Enemy_C, 0x0100);
		}

		// BlueprintGeneratedClass SecurityCamera.SecurityCamera_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityCamera__SecurityCamera_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, Decal, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, cameraViewArea, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, AlarmAudio, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, RotPlane02, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, RotPlaneHolder02, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, RotPlane01, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, RotPlaneHolder01, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, tempCameraBody, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, camRotator, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, tempCameraArm, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, CamAngle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, RotAngleMin, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, RotAngleMax, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, CamViewAngleScale, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, _24hCamera, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, Direction, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, UnknownData_SZZK, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, CamRotSpeed, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, CamRotPause, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, CamReactionTime, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, Alarm, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, UnknownData_61LP, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, AlarmLength, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, playerIn, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, UnknownData_AEHY, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, PowerSource, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, Powered, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, UnknownData_Q4LW, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, dynMat, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, active, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, UnknownData_38RZ, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, detectionSound, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera_C, DecalMat, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityCamera_C, 0x03F0);
		}

		// BlueprintGeneratedClass ActiveBush_Flatland01.ActiveBush_Flatland01_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Flatland01__ActiveBush_Flatland01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Flatland01_C, 0x0348);
		}

		// BlueprintGeneratedClass SewerSectorTeleport.SewerSectorTeleport_C
		TEST_METHOD(BlueprintGeneratedClass__SewerSectorTeleport__SewerSectorTeleport_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleport_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleport_C, SM_Wood_Door, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleport_C, SM_Tunnel_Small_Frame_01, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleport_C, Target, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleport_C, GateRef, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASewerSectorTeleport_C, 0x0450);
		}

		// BlueprintGeneratedClass Tunnel_Wall_01_BP.Tunnel_Wall_01_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Tunnel_Wall_01_BP__Tunnel_Wall_01_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnel_Wall_01_BP_C, InstancedStaticMesh1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnel_Wall_01_BP_C, InstancedStaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnel_Wall_01_BP_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnel_Wall_01_BP_C, LengthSegments, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnel_Wall_01_BP_C, StartIndex, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATunnel_Wall_01_BP_C, 0x0348);
		}

		// BlueprintGeneratedClass BP_Classic_Commode_3.BP_Classic_Commode_2_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Classic_Commode_3__BP_Classic_Commode_2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, SM_Classic_Commode_Drawer_1_6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, SM_Classic_Commode_Drawer_1_5, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, SM_Classic_Commode_Drawer_1_4, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, SM_Classic_Commode_Drawer_1_3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, SM_Classic_Commode_Drawer_1_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, SM_Classic_Commode_Drawer_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_2_C, StaticMesh, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Classic_Commode_2_C, 0x0360);
		}

		// BlueprintGeneratedClass BP_Truck01_Dump2Frame.BP_Truck01_Dump2Frame_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Truck01_Dump2Frame__BP_Truck01_Dump2Frame_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2Frame_C, StaticMeshComponent0, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Truck01_Dump2Frame_C, 0x0330);
		}

		// BlueprintGeneratedClass worldEffectLSDBase.worldEffectLSDBase_C
		TEST_METHOD(BlueprintGeneratedClass__worldEffectLSDBase__worldEffectLSDBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldEffectLSDBase_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldEffectLSDBase_C, Collision, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldEffectLSDBase_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldEffectLSDBase_C, effectRange, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldEffectLSDBase_C, effectIsWorking, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworldEffectLSDBase_C, 0x0345);
		}

		// BlueprintGeneratedClass elementCounter.elementCounter_C
		TEST_METHOD(BlueprintGeneratedClass__elementCounter__elementCounter_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AelementCounter_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AelementCounter_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AelementCounter_C, 0x0338);
		}

		// BlueprintGeneratedClass splinePath.splinePath_C
		TEST_METHOD(BlueprintGeneratedClass__splinePath__splinePath_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplinePath_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplinePath_C, roadSpline, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplinePath_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplinePath_C, roadSplineRef, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsplinePath_C, 0x0348);
		}

		// BlueprintGeneratedClass shopPharmacy.shopPharmacy_C
		TEST_METHOD(BlueprintGeneratedClass__shopPharmacy__shopPharmacy_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopPharmacy_C, UnknownData_UF0I, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopPharmacy_C, UberGraphFrame, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopPharmacy_C, 0x03F8);
		}

		// BlueprintGeneratedClass smugglerShopDialogueInstance.smugglerShopDialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__smugglerShopDialogueInstance__smugglerShopDialogueInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerShopDialogueInstance_C, UnknownData_TTD2, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerShopDialogueInstance_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerShopDialogueInstance_C, SmugglingBox, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerShopDialogueInstance_C, SmuggleCost, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmugglerShopDialogueInstance_C, 0x03AC);
		}

		// WidgetBlueprintGeneratedClass inventoryItemWidget.inventoryItemWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__inventoryItemWidget__inventoryItemWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, looting, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, bgImage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, CanvasPanel_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, CanvasPanel_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, HorizontalBox_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, hoverImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, imgSelected, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, itemDetails, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, itemIcon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, TextBlock_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, tooltipImg, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txt_itemName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtDesc, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtEmpty, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtPrice, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtQuantity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtShortName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtSizeTotal, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtSprayUsage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtSubstanceForm, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtWeightTotal, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, txtWet, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, vendorImage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, VerticalBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Data, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, ItemID, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Index, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Quantity, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, CurAmount, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UnknownData_HYRM, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, parentTag, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Price, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, ctrlDrag, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, dropSingleItem, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, dragedByRMB, 0x040E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, FromVendor, 0x040F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, workStation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UnknownData_J08O, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, activeElementsColor, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, GridDisplay, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UnknownData_B05V, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, container, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Looted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, showPrice, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UnknownData_DBPA, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, LocalGuid, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UnknownData_XAYX, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, CustomName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, Overflowed, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, UnknownData_O46V, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, MixProportions, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryItemWidget_C, IsGarbage, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UinventoryItemWidget_C, 0x04C9);
		}

		// Class WmfMediaFactory.WmfMediaSettings
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_NX7X, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// WidgetBlueprintGeneratedClass oneTaskWidget.oneTaskWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__oneTaskWidget__oneTaskWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, Border, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, txtDesctipion, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, txtTitle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UoneTaskWidget_C, activeElementsColor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UoneTaskWidget_C, 0x0260);
		}

		// BlueprintGeneratedClass eddieFindHomeTask.eddieFindHomeTask_C
		TEST_METHOD(BlueprintGeneratedClass__eddieFindHomeTask__eddieFindHomeTask_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFindHomeTask_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UeddieFindHomeTask_C, 0x00A8);
		}

		// BlueprintGeneratedClass demoControler.demoControler_C
		TEST_METHOD(BlueprintGeneratedClass__demoControler__demoControler_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, demoMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, demoScreen, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, UnknownData_Q9WE, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdemoControler_C, screen, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdemoControler_C, 0x0350);
		}

		// BlueprintGeneratedClass saveSystemManager.saveSystemManager_C
		TEST_METHOD(BlueprintGeneratedClass__saveSystemManager__saveSystemManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveSystemManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveSystemManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaveSystemManager_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsaveSystemManager_C, 0x0340);
		}

		// BlueprintGeneratedClass decoPosterLFB2.decoPosterLFB2_C
		TEST_METHOD(BlueprintGeneratedClass__decoPosterLFB2__decoPosterLFB2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPosterLFB2_C, 0x0446);
		}

		// BlueprintGeneratedClass ws_trashtableNEW.ws_trashtableNEW_C
		TEST_METHOD(BlueprintGeneratedClass__ws_trashtableNEW__ws_trashtableNEW_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_trashtableNEW_C, 0x04C5);
		}

		// BlueprintGeneratedClass BP_decoElegantChair.BP_decoElegantChair_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoElegantChair__BP_decoElegantChair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoElegantChair_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoScandiArmchair.BP_decoScandiArmchair_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoScandiArmchair__BP_decoScandiArmchair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoScandiArmchair_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoTVstand.BP_decoTVstand_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoTVstand__BP_decoTVstand_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoTVstand_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoVase3.BP_decoVase3_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoVase3__BP_decoVase3_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoVase3_C, 0x0446);
		}

		// BlueprintGeneratedClass decoTrashCeilingLamp.decoTrashCeilingLamp_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashCeilingLamp__decoTrashCeilingLamp_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoTrashCeilingLamp_C, UnknownData_1LQ6, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoTrashCeilingLamp_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoTrashCeilingLamp_C, PointLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoTrashCeilingLamp_C, SpotLight, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashCeilingLamp_C, 0x0460);
		}

		// BlueprintGeneratedClass spraySpawnPoint.spraySpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__spraySpawnPoint__spraySpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, spraySpawnTimer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, spraySpawnTimeout, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, spawnBoxExtent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawnPoint_C, firstArea, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AspraySpawnPoint_C, 0x0355);
		}

		// BlueprintGeneratedClass streetPersonFemale11BP1.streetPersonFemale11BP1_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale11BP1__streetPersonFemale11BP1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale11BP1_C, 0x0AD4);
		}

		// BlueprintGeneratedClass streetPersonMale04BP.streetPersonMale04BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale04BP__streetPersonMale04BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale04BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass largeLabMixer.largeLabMixer_C
		TEST_METHOD(BlueprintGeneratedClass__largeLabMixer__largeLabMixer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlargeLabMixer_C, UnknownData_S51T, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlargeLabMixer_C, UberGraphFrame, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlargeLabMixer_C, largeLabMixerArm, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlargeLabMixer_C, rotSpeed, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlargeLabMixer_C, 0x0854);
		}

		// BlueprintGeneratedClass launderDoor.launderDoor_C
		TEST_METHOD(BlueprintGeneratedClass__launderDoor__launderDoor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, Box, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, Door02Wing, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, Door02Frame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, OpenTimer, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, TimeIncreaser, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, NooneHome, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, UnknownData_N61V, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, Drawer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, FirstInteracted, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, FirstOpened, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, UnknownData_9Y8S, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, AvailableLevel, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, AvailableArea, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, StatMan, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, SaleAreaMan, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderDoor_C, mainComputer, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlaunderDoor_C, 0x0490);
		}

		// BlueprintGeneratedClass millCoffeeElectric.millCoffeeElectric_C
		TEST_METHOD(BlueprintGeneratedClass__millCoffeeElectric__millCoffeeElectric_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmillCoffeeElectric_C, UberGraphFrame, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmillCoffeeElectric_C, contents, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmillCoffeeElectric_C, baseContentScale, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmillCoffeeElectric_C, 0x07F4);
		}

		// BlueprintGeneratedClass labCrystaliserBP.labCrystaliserBP_C
		TEST_METHOD(BlueprintGeneratedClass__labCrystaliserBP__labCrystaliserBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlabCrystaliserBP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlabCrystaliserBP_C, 0x07D8);
		}

		// BlueprintGeneratedClass stream_BallenaMansion.stream_BallenaMansion_C
		TEST_METHOD(BlueprintGeneratedClass__stream_BallenaMansion__stream_BallenaMansion_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_BallenaMansion_C, 0x0330);
		}

		// BlueprintGeneratedClass sprayAreaGizmo.sprayAreaGizmo_C
		TEST_METHOD(BlueprintGeneratedClass__sprayAreaGizmo__sprayAreaGizmo_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, saleAreaAffected, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, gizmoSizing, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, UnknownData_XC0C, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, saleAreaManager, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, calcAreaBoost, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondary, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, UnknownData_X5HQ, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondarySprayCount, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondaryBoostSum, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, myCalcSprayCount, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, calcRespectBoost, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, calcRespectDropBoost, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, calcExpBoost, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, calcSaleBoost, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, calcClientBoost, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, CalcDealerBoost, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondaryRespectBoost, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondaryRespectDropBoost, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondaryExpBoost, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondarySaleBoost, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, secondaryClientBoost, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, SecondaryDealerBoost, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, curAreaID, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, SaleAreas, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayAreaGizmo_C, OverlappedGoHomePoints, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsprayAreaGizmo_C, 0x03D0);
		}

		// BlueprintGeneratedClass BP_Tunnel_Lamp.BP_Tunnel_Lamp_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tunnel_Lamp__BP_Tunnel_Lamp_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, BlinkingBuzz, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, Audio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, PointLight2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, SpotLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, LightMesh_Mesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, blinkingAnim_NewTrack_0_92E1123A4F2C9C292D8028AF6646CB45, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, blinkingAnim__Direction_92E1123A4F2C9C292D8028AF6646CB45, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, UnknownData_ANKK, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, blinkingAnim, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, blinking, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, damaged, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, dead, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, UnknownData_Q27H, 0x0373);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, baseIntensity, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, rangeModifier, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_Lamp_C, baseIntensity2, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tunnel_Lamp_C, 0x0380);
		}

		// BlueprintGeneratedClass ballenaBodyguard02.ballenaBodyguard02_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaBodyguard02__ballenaBodyguard02_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaBodyguard02_C, 0x0AD4);
		}

		// BlueprintGeneratedClass FactoryIndoor_02_02.FactoryIndoor_02_02_C
		TEST_METHOD(BlueprintGeneratedClass__FactoryIndoor_02_02__FactoryIndoor_02_02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh8, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh7, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh6, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh5, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh4, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh3, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMesh, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent062, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent061, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent060, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent059, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent058, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent057, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent056, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent055, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent054, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent050, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent049, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent048, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent045, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent044, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent043, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent042, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent041, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent040, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent039, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent038, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent037, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent036, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent035, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent034, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent033, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent032, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent031, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent027, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent026, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent025, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent024, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent023, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent022, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent021, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent020, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent019, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent018, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent017, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent016, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent015, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent014, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent013, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent012, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent011, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent010, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent09, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent08, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent07, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent06, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent05, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent04, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent03, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent02, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent01, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, StaticMeshComponent0, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_02_C, SharedRoot, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactoryIndoor_02_02_C, 0x0530);
		}

		// BlueprintGeneratedClass NewEntranceLight.NewEntranceLight_C
		TEST_METHOD(BlueprintGeneratedClass__NewEntranceLight__NewEntranceLight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, UnknownData_X6ZK, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, PointLight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, StaticMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, Mesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, dynMat, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewEntranceLight_C, AlwaysActive, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANewEntranceLight_C, 0x03A9);
		}

		// BlueprintGeneratedClass smug_Delicatessen.smug_Delicatessen_C
		TEST_METHOD(BlueprintGeneratedClass__smug_Delicatessen__smug_Delicatessen_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Asmug_Delicatessen_C, 0x0378);
		}

		// BlueprintGeneratedClass extinguishPoliceCar.extinguishPoliceCar_C
		TEST_METHOD(BlueprintGeneratedClass__extinguishPoliceCar__extinguishPoliceCar_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, Audio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, pathRef, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, Speed, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, pathMade, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, driving, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, UnknownData_NZYA, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, policeSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoliceCar_C, extinguishFires, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AextinguishPoliceCar_C, 0x0369);
		}

		// BlueprintGeneratedClass extinguishPoilicePath.extinguishPoilicePath_C
		TEST_METHOD(BlueprintGeneratedClass__extinguishPoilicePath__extinguishPoilicePath_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoilicePath_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AextinguishPoilicePath_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AextinguishPoilicePath_C, 0x0338);
		}

		// BlueprintGeneratedClass seekPointFilter.seekPointFilter_C
		TEST_METHOD(BlueprintGeneratedClass__seekPointFilter__seekPointFilter_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UseekPointFilter_C, 0x0048);
		}

		// BlueprintGeneratedClass sampleClientInSale.sampleClientInSale_C
		TEST_METHOD(BlueprintGeneratedClass__sampleClientInSale__sampleClientInSale_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientInSale_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsampleClientInSale_C, 0x00A0);
		}

		// BlueprintGeneratedClass BP_CharacterBaseWithHealth.BP_CharacterBaseWithHealth_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CharacterBaseWithHealth__BP_CharacterBaseWithHealth_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterBaseWithHealth_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterBaseWithHealth_C, Health, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterBaseWithHealth_C, AmI_Alive_, 0x074C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CharacterBaseWithHealth_C, 0x074D);
		}

		// BlueprintGeneratedClass PawnShopDialogue.PawnShopDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__PawnShopDialogue__PawnShopDialogue_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawnShopDialogue_C, 0x0392);
		}

		// BlueprintGeneratedClass metalWicket01.metalWicket01_C
		TEST_METHOD(BlueprintGeneratedClass__metalWicket01__metalWicket01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmetalWicket01_C, UnknownData_NSTT, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmetalWicket01_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmetalWicket01_C, 0x0538);
		}

		// BlueprintGeneratedClass FactoryBartenderDialogueInstance.FactoryBartenderDialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__FactoryBartenderDialogueInstance__FactoryBartenderDialogueInstance_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactoryBartenderDialogueInstance_C, 0x0392);
		}

		// BlueprintGeneratedClass inventoryCharacterBP.inventoryCharacterBP_C
		TEST_METHOD(BlueprintGeneratedClass__inventoryCharacterBP__inventoryCharacterBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, backpackRepresentation, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, PointLight1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, PointLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, SceneCaptureComponent2D1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, SceneCaptureComponent2D, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, Player_FullRigged, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinventoryCharacterBP_C, dayTimeCon, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AinventoryCharacterBP_C, 0x0370);
		}

		// BlueprintGeneratedClass backpackSmallBP.backpackSmallBP_C
		TEST_METHOD(BlueprintGeneratedClass__backpackSmallBP__backpackSmallBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackSmallBP_C, 0x05F5);
		}

		// BlueprintGeneratedClass weedStrain_GhettoKush.weedStrain_GhettoKush_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_GhettoKush__weedStrain_GhettoKush_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_GhettoKush_C, 0x05A0);
		}

		// Class GameplayTasks.GameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_8JBL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_6X4F, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_NPN5, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// Class GameplayTasks.GameplayTask_ClaimResource
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// Class GameplayTasks.GameplayTask_SpawnActor
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_OQQI, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// Class GameplayTasks.GameplayTask_TimeLimitedExecution
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_GDEI, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// Class GameplayTasks.GameplayTask_WaitDelay
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_MK6V, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// Class GameplayTasks.GameplayTaskOwnerInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// Class GameplayTasks.GameplayTaskResource
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_NYG2, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_1MQF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// Class GameplayTasks.GameplayTasksComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_NQLS, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_ZSOH, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_61C1, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0160);
		}

		// BlueprintGeneratedClass CashDrawerBP.CashDrawerBP_C
		TEST_METHOD(BlueprintGeneratedClass__CashDrawerBP__CashDrawerBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, UnknownData_W79Q, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, cashDrawer, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, cashDrawerBase, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, DrawerOpening_OpenProgress_67C1793C4523A0CCF4129C8F7D42BCC6, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, DrawerOpening__Direction_67C1793C4523A0CCF4129C8F7D42BCC6, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, UnknownData_BG49, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, DrawerOpening, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, Extended, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACashDrawerBP_C, InRadius, 0x0521);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACashDrawerBP_C, 0x0522);
		}

		// BlueprintGeneratedClass Firecracker.Firecracker_C
		TEST_METHOD(BlueprintGeneratedClass__Firecracker__Firecracker_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFirecracker_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageBottle.garbageBottle_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBottle__garbageBottle_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBottle_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageBrokenBottle2.garbageBrokenBottle2_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBrokenBottle2__garbageBrokenBottle2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBrokenBottle2_C, 0x05A8);
		}

		// BlueprintGeneratedClass ws_shelfModernSmall.ws_shelfModernSmall_C
		TEST_METHOD(BlueprintGeneratedClass__ws_shelfModernSmall__ws_shelfModernSmall_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_shelfModernSmall_C, 0x04C5);
		}

		// BlueprintGeneratedClass saleClientFemaleBP.saleClientFemaleBP_C
		TEST_METHOD(BlueprintGeneratedClass__saleClientFemaleBP__saleClientFemaleBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleClientFemaleBP_C, UnknownData_YHGL, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleClientFemaleBP_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsaleClientFemaleBP_C, 0x0AE0);
		}

		// BlueprintGeneratedClass HighwayPosterSingleJr_BP.HighwayPosterSingleJr_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HighwayPosterSingleJr_BP__HighwayPosterSingleJr_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, PowerTall, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, BillboardLamps1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, BillboardPanel1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, Frame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, PostTall, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, TallPost, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, TurnOnLights, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, UnknownData_U1NS, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterSingleJr_BP_C, FaceMaterial, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHighwayPosterSingleJr_BP_C, 0x0368);
		}

		// WidgetBlueprintGeneratedClass respectRaiseWidget.respectRaiseWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__respectRaiseWidget__respectRaiseWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, progRespect, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, progRespectBG, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, txtAmount, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, txtMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, txtRespTotal, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, txtTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, endPercent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UrespectRaiseWidget_C, respTotal, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UrespectRaiseWidget_C, 0x0250);
		}

		// BlueprintGeneratedClass hangingCabinetSmallBP.hangingCabinetSmallBP_C
		TEST_METHOD(BlueprintGeneratedClass__hangingCabinetSmallBP__hangingCabinetSmallBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhangingCabinetSmallBP_C, 0x04F1);
		}

		// BlueprintGeneratedClass modernCupboardBP.modernCupboardBP_C
		TEST_METHOD(BlueprintGeneratedClass__modernCupboardBP__modernCupboardBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmodernCupboardBP_C, 0x04F1);
		}

		// BlueprintGeneratedClass gangDeadDropBase.gangDeadDropBase_C
		TEST_METHOD(BlueprintGeneratedClass__gangDeadDropBase__gangDeadDropBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDeadDropBase_C, UnknownData_Q4SO, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDeadDropBase_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDeadDropBase_C, Box, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDeadDropBase_C, expectingDrop, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDeadDropBase_C, UnknownData_O8C3, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDeadDropBase_C, Extent, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgangDeadDropBase_C, 0x0518);
		}

		// BlueprintGeneratedClass mediumBoxContainer.mediumBoxContainer_C
		TEST_METHOD(BlueprintGeneratedClass__mediumBoxContainer__mediumBoxContainer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmediumBoxContainer_C, 0x04F1);
		}

		// WidgetBlueprintGeneratedClass mouseCursor.mouseCursor_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__mouseCursor__mouseCursor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UmouseCursor_C, Image_86, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmouseCursor_C, 0x0210);
		}

		// BlueprintGeneratedClass PM_GetPlayerRef.PM_GetPlayerRef_C
		TEST_METHOD(BlueprintGeneratedClass__PM_GetPlayerRef__PM_GetPlayerRef_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetPlayerRef_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_GetPlayerRef_C, 0x00A8);
		}

		// BlueprintGeneratedClass PM_GetSearchPoint.PM_GetSearchPoint_C
		TEST_METHOD(BlueprintGeneratedClass__PM_GetSearchPoint__PM_GetSearchPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetSearchPoint_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetSearchPoint_C, FromPredictedPath, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_GetSearchPoint_C, 0x00A9);
		}

		// BlueprintGeneratedClass asianStreetThug01.asianStreetThug01_C
		TEST_METHOD(BlueprintGeneratedClass__asianStreetThug01__asianStreetThug01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AasianStreetThug01_C, UnknownData_5RHW, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AasianStreetThug01_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AasianStreetThug01_C, 0x0AE0);
		}

		// BlueprintGeneratedClass asianStreetThug02.asianStreetThug02_C
		TEST_METHOD(BlueprintGeneratedClass__asianStreetThug02__asianStreetThug02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AasianStreetThug02_C, UnknownData_AFXW, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AasianStreetThug02_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AasianStreetThug02_C, moneySpawn, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AasianStreetThug02_C, waitingForPlayer, 0x0AE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AasianStreetThug02_C, 0x0AE9);
		}

		// BlueprintGeneratedClass repairsSoundsPlayer.repairsSoundsPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__repairsSoundsPlayer__repairsSoundsPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ArepairsSoundsPlayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArepairsSoundsPlayer_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArepairsSoundsPlayer_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArepairsSoundsPlayer_C, Sounds, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArepairsSoundsPlayer_C, intervalMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArepairsSoundsPlayer_C, intervalMax, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ArepairsSoundsPlayer_C, 0x0358);
		}

		// BlueprintGeneratedClass findGoHomePoint.findGoHomePoint_C
		TEST_METHOD(BlueprintGeneratedClass__findGoHomePoint__findGoHomePoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UfindGoHomePoint_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfindGoHomePoint_C, goHomePoints, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfindGoHomePoint_C, maxGoHomeDistance, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfindGoHomePoint_C, 0x00BC);
		}

		// BlueprintGeneratedClass lightDistanceDisabler.lightDistanceDisabler_C
		TEST_METHOD(BlueprintGeneratedClass__lightDistanceDisabler__lightDistanceDisabler_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightDistanceDisabler_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightDistanceDisabler_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightDistanceDisabler_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightDistanceDisabler_C, disableAtDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightDistanceDisabler_C, UnknownData_UQIH, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightDistanceDisabler_C, lightsRef, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlightDistanceDisabler_C, 0x0358);
		}

		// BlueprintGeneratedClass playerApartment.playerApartment_C
		TEST_METHOD(BlueprintGeneratedClass__playerApartment__playerApartment_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AplayerApartment_C, 0x0330);
		}

		// BlueprintGeneratedClass theCity.theCity_C
		TEST_METHOD(BlueprintGeneratedClass__theCity__theCity_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheCity_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheCity_C, introCamera_ExecuteUbergraph_theCity_RefProperty, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtheCity_C, 0x0340);
		}

		// WidgetBlueprintGeneratedClass InventoryItemTooltipContentItem.InventoryItemTooltipContentItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemTooltipContentItem__InventoryItemTooltipContentItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltipContentItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltipContentItem_C, txtNam, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltipContentItem_C, txtQuan, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemTooltipContentItem_C, 0x0220);
		}

		// Class GameplayTags.BlueprintGameplayTagLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// Class GameplayTags.GameplayTagAssetInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// Class GameplayTags.EditableGameplayTagQuery
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_STDW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AnyTagsMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AllTagsMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_NoTagsMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AnyExprMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AllExprMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_NoExprMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// Class GameplayTags.GameplayTagsManager
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_8X39, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_NV5J, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, RestrictedGameplayTagTables, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_FPZF, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0190);
		}

		// Class GameplayTags.GameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// Class GameplayTags.RestrictedGameplayTagsList
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// Class GameplayTags.GameplayTagsSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_W47Q, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_Z4L1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B0);
		}

		// Class GameplayTags.GameplayTagsDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// BlueprintGeneratedClass worldMapReferencePoint.worldMapReferencePoint_C
		TEST_METHOD(BlueprintGeneratedClass__worldMapReferencePoint__worldMapReferencePoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapReferencePoint_C, SceneCaptureComponent2D, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapReferencePoint_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworldMapReferencePoint_C, 0x0338);
		}

		// Class SlateCore.FontBulkData
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_KX77, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x00C0);
		}

		// Class SlateCore.FontFaceInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// Class SlateCore.FontProviderInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// Class SlateCore.SlateTypes
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// Class SlateCore.SlateWidgetStyleAsset
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// Class SlateCore.SlateWidgetStyleContainerBase
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_HNS8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// Class SlateCore.SlateWidgetStyleContainerInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// BlueprintGeneratedClass filterSuspectPath.filterSuspectPath_C
		TEST_METHOD(BlueprintGeneratedClass__filterSuspectPath__filterSuspectPath_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfilterSuspectPath_C, 0x0048);
		}

		// BlueprintGeneratedClass smug_DeadDrop.smug_DeadDrop_C
		TEST_METHOD(BlueprintGeneratedClass__smug_DeadDrop__smug_DeadDrop_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Asmug_DeadDrop_C, UberGraphFrame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Asmug_DeadDrop_C, Sphere, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Asmug_DeadDrop_C, DeadDropName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::Asmug_DeadDrop_C, dropContainer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Asmug_DeadDrop_C, dropContainerID, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Asmug_DeadDrop_C, secondSide, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Asmug_DeadDrop_C, 0x03AD);
		}

		// Class Slate.ButtonWidgetStyle
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// Class Slate.CheckBoxWidgetStyle
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// Class Slate.ComboBoxWidgetStyle
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0408);
		}

		// Class Slate.ComboButtonWidgetStyle
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03D0);
		}

		// Class Slate.EditableTextBoxWidgetStyle
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// Class Slate.EditableTextWidgetStyle
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// Class Slate.ProgressWidgetStyle
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// Class Slate.ScrollBarWidgetStyle
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// Class Slate.ScrollBoxWidgetStyle
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// Class Slate.SlateSettings
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_SMZO, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// Class Slate.SpinBoxWidgetStyle
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// Class Slate.TextBlockWidgetStyle
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0218);
		}

		// Class MeshDescription.MeshDescription
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// BlueprintGeneratedClass shopExpositionModel.shopExpositionModel_C
		TEST_METHOD(BlueprintGeneratedClass__shopExpositionModel__shopExpositionModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopExpositionModel_C, DisplayName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopExpositionModel_C, ProductModel, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopExpositionModel_C, 0x0448);
		}

		// BlueprintGeneratedClass keijiRestaurantManager.keijiRestaurantManager_C
		TEST_METHOD(BlueprintGeneratedClass__keijiRestaurantManager__keijiRestaurantManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiRestaurantManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiRestaurantManager_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiRestaurantManager_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeijiRestaurantManager_C, 0x0340);
		}

		// WidgetBlueprintGeneratedClass equipmentShopItemWidget.equipmentShopItemWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__equipmentShopItemWidget__equipmentShopItemWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, btnItemBuy, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, check, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, itemImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, mainHolder, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, txtButtonText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, txtDesc, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, txtItemNam, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, txtItemPrice, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, txtQuantity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, txtWaitTimeBoost, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, Index, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, UnknownData_5EGG, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, parentRef, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, beenAdded, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, UnknownData_SW9T, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentShopItemWidget_C, MyID, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UequipmentShopItemWidget_C, 0x0288);
		}

		// BlueprintGeneratedClass decoOldschoolCeilingLamp2.decoOldschoolCeilingLamp2_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolCeilingLamp2__decoOldschoolCeilingLamp2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp2_C, UnknownData_1M5K, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp2_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp2_C, PointLight, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolCeilingLamp2_C, 0x0458);
		}

		// BlueprintGeneratedClass decoPosterDDS1.decoPosterDDS1_C
		TEST_METHOD(BlueprintGeneratedClass__decoPosterDDS1__decoPosterDDS1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPosterDDS1_C, 0x0446);
		}

		// BlueprintGeneratedClass decoHousePlant2.decoHousePlant2_C
		TEST_METHOD(BlueprintGeneratedClass__decoHousePlant2__decoHousePlant2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHousePlant2_C, 0x0446);
		}

		// BlueprintGeneratedClass decoHousePlant4.decoHousePlant4_C
		TEST_METHOD(BlueprintGeneratedClass__decoHousePlant4__decoHousePlant4_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHousePlant4_C, 0x0446);
		}

		// BlueprintGeneratedClass decoHousePlant5.decoHousePlant5_C
		TEST_METHOD(BlueprintGeneratedClass__decoHousePlant5__decoHousePlant5_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHousePlant5_C, 0x0446);
		}

		// BlueprintGeneratedClass ws_shelfMedium.ws_shelfMedium_C
		TEST_METHOD(BlueprintGeneratedClass__ws_shelfMedium__ws_shelfMedium_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_shelfMedium_C, 0x04C5);
		}

		// BlueprintGeneratedClass decoPicture_08.decoPicture_08_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_08__decoPicture_08_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_08_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPosterDDS3.decoPosterDDS3_C
		TEST_METHOD(BlueprintGeneratedClass__decoPosterDDS3__decoPosterDDS3_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPosterDDS3_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoElegantOtoman.BP_decoElegantOtoman_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoElegantOtoman__BP_decoElegantOtoman_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoElegantOtoman_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoModernChair.BP_decoModernChair_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoModernChair__BP_decoModernChair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoModernChair_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoModernSofaLarge.BP_decoModernSofaLarge_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoModernSofaLarge__BP_decoModernSofaLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoModernSofaLarge_C, 0x0446);
		}

		// BlueprintGeneratedClass streetPersonMale08BP.streetPersonMale08BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale08BP__streetPersonMale08BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale08BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass streetPersonMale11BP.streetPersonMale11BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale11BP__streetPersonMale11BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale11BP_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass deaBustedScreenWidget.deaBustedScreenWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__deaBustedScreenWidget__deaBustedScreenWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, buttonEntry, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, FadeOut, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, Entry, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, btnLoadGame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, btnMainMenu, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, buttonPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, txtReason, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaBustedScreenWidget_C, music, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdeaBustedScreenWidget_C, 0x0260);
		}

		// WidgetBlueprintGeneratedClass saveStationWidget.saveStationWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__saveStationWidget__saveStationWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveStationWidget_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsaveStationWidget_C, 0x0210);
		}

		// BlueprintGeneratedClass clothesWardrobeBP.clothesWardrobeBP_C
		TEST_METHOD(BlueprintGeneratedClass__clothesWardrobeBP__clothesWardrobeBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AclothesWardrobeBP_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclothesWardrobeBP_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclothesWardrobeBP_C, changingClothes, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclothesWardrobeBP_C, respawned, 0x0439);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AclothesWardrobeBP_C, 0x043A);
		}

		// BlueprintGeneratedClass bobbyPinBoxPickupBP.bobbyPinBoxPickupBP_C
		TEST_METHOD(BlueprintGeneratedClass__bobbyPinBoxPickupBP__bobbyPinBoxPickupBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AbobbyPinBoxPickupBP_C, UberGraphFrame, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbobbyPinBoxPickupBP_C, 0x05B0);
		}

		// BlueprintGeneratedClass hiddenWallContainerBP.hiddenWallContainerBP_C
		TEST_METHOD(BlueprintGeneratedClass__hiddenWallContainerBP__hiddenWallContainerBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhiddenWallContainerBP_C, 0x04F1);
		}

		// BlueprintGeneratedClass decoOldschoolCeilingLamp1.decoOldschoolCeilingLamp1_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolCeilingLamp1__decoOldschoolCeilingLamp1_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp1_C, UnknownData_0XL7, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp1_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp1_C, PointLight, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolCeilingLamp1_C, 0x0458);
		}

		// BlueprintGeneratedClass PM_PatrolLead.PM_PatrolLead_C
		TEST_METHOD(BlueprintGeneratedClass__PM_PatrolLead__PM_PatrolLead_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, UnknownData_0UW8, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, UberGraphFrame, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, Influence, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, controlingPlayer, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, UnknownData_L7ZI, 0x0881);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, controlWidget, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, controlTime, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, controlTimer, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, controlBreakDistance, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, UnknownData_WXS0, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, followerRef, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, MyPatrolArea, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolLead_C, InfluenceRadius, 0x08B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APM_PatrolLead_C, 0x08B1);
		}

		// BlueprintGeneratedClass PM_PatrolPartner.PM_PatrolPartner_C
		TEST_METHOD(BlueprintGeneratedClass__PM_PatrolPartner__PM_PatrolPartner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolPartner_C, UnknownData_XE1V, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolPartner_C, UberGraphFrame, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolPartner_C, PatrolLead, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_PatrolPartner_C, LeadID, 0x0880);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APM_PatrolPartner_C, 0x0884);
		}

		// BlueprintGeneratedClass dayTimeControler.dayTimeControler_C
		TEST_METHOD(BlueprintGeneratedClass__dayTimeControler__dayTimeControler_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, moonLight, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, SkyLight, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, skySphere, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, curHour, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, curMinute, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, TimeMultiplier, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, startHour, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, startMinute, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, UnknownData_Q5YJ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, expoFog, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunriseHour, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunsetHour, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, tempHour, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, skyUpHour, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, skyDownHour, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, daytimePercent, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, skyPercent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, UnknownData_TSSU, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunHolder, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, boolUpdateSun, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, UnknownData_ZBC3, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunPerc, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, nightTime, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, UnknownData_FOTS, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunBaseBrightness, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, moonBaseBrightness, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, skyRefreshRate, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, curDayNum, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, hourBeforeWait, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, sunRefreshRate, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, skyDayBrightness, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, lastDayDisplayed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, baseFogDensity, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, minFogDensity, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, UnknownData_I0WC, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, ClearTrashBins, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdayTimeControler_C, SwitchLanterns, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdayTimeControler_C, 0x0408);
		}

		// BlueprintGeneratedClass psychedelicDoorDialogue.psychedelicDoorDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicDoorDialogue__psychedelicDoorDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicDoorDialogue_C, UnknownData_O4MO, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicDoorDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicDoorDialogue_C, doorHandlerRef, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicDoorDialogue_C, 0x03A8);
		}

		// BlueprintGeneratedClass ActiveBush_Fall02.ActiveBush_Fall02_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Fall02__ActiveBush_Fall02_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Fall02_C, 0x0348);
		}

		// BlueprintGeneratedClass ballenaBodyguard03.ballenaBodyguard03_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaBodyguard03__ballenaBodyguard03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaBodyguard03_C, 0x0AD4);
		}

		// BlueprintGeneratedClass trainSegment.trainSegment_C
		TEST_METHOD(BlueprintGeneratedClass__trainSegment__trainSegment_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, SpotLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trainHorn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, hook, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trainNoise, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, Model, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trainSpeed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trainDistancePassed, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trackRef, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, leadSegment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, UnknownData_X183, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, restSegments, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, segmentDistance, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, compartmentIndex, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trainTurnOffset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, trainTurnDelta, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, curRot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, lastRot, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, tempVar, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, UnknownData_4IR7, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, frontParent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainSegment_C, dynMat, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtrainSegment_C, 0x03B8);
		}

		// BlueprintGeneratedClass Factory_02_02_closed.Factory_02_02_closed_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_02_02_closed__Factory_02_02_closed_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh50, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh48, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh47, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, Decal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh46, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh45, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh44, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh43, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh42, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh41, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh40, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh39, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh38, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh37, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh36, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh35, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh34, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh33, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh32, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, Scene, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh30, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh29, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh28, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh27, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh26, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh25, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh24, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh23, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh22, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh21, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh20, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh19, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh18, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh17, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh16, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh15, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh14, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh13, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh12, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh11, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh10, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh9, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh8, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh7, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh6, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh5, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh4, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh3, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh1, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_02_closed_C, StaticMesh, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_02_02_closed_C, 0x04C0);
		}

		// BlueprintGeneratedClass Factory_02_04.Factory_02_04_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_02_04__Factory_02_04_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh31, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh30, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh29, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh28, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh27, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh26, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh25, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh24, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh23, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh22, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh21, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh20, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh19, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh18, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh17, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh16, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh15, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh14, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh13, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh12, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh11, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh10, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh9, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh8, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh7, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh6, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh5, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh4, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_04_C, StaticMesh, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_02_04_C, 0x0430);
		}

		// BlueprintGeneratedClass nightMusicPlayer.nightMusicPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__nightMusicPlayer__nightMusicPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightMusicPlayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightMusicPlayer_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightMusicPlayer_C, Audio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightMusicPlayer_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightMusicPlayer_C, nightMusicLoops, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightMusicPlayer_C, active, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnightMusicPlayer_C, 0x0359);
		}

		// BlueprintGeneratedClass furnitureDoorFixer.furnitureDoorFixer_C
		TEST_METHOD(BlueprintGeneratedClass__furnitureDoorFixer__furnitureDoorFixer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureDoorFixer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureDoorFixer_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureDoorFixer_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfurnitureDoorFixer_C, 0x0340);
		}

		// BlueprintGeneratedClass trashFurnitureArtits.trashFurnitureArtits_C
		TEST_METHOD(BlueprintGeneratedClass__trashFurnitureArtits__trashFurnitureArtits_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrashFurnitureArtits_C, UnknownData_9CN1, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrashFurnitureArtits_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrashFurnitureArtits_C, Teleport, 0x0AE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtrashFurnitureArtits_C, 0x0AE1);
		}

		// BlueprintGeneratedClass marketSalesmanBP.marketSalesmanBP_C
		TEST_METHOD(BlueprintGeneratedClass__marketSalesmanBP__marketSalesmanBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmarketSalesmanBP_C, UnknownData_JH9E, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmarketSalesmanBP_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmarketSalesmanBP_C, 0x0AE0);
		}

		// WidgetBlueprintGeneratedClass bankAppWidget.bankAppWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__bankAppWidget__bankAppWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, unlockLaunder, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, enterScreen, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, btnClose, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, btnUpgradeLaunder, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, Button_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, curUpgradeImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, historyList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, LaunderingPanel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, loginBg, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, loginHolder, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, mainBg, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, nextInvestmentPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, TextBlock_6, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, TextBlock_19, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, TextBlock_20, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, TextBlock_22, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, TextBlock_25, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtAccountMoneyAll, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtCompanyDescription, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtCompanyName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtCurLaundered, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtLaunderLevel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtLaunderPool, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtMaxRev, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, txtNextName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, computerRef, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, DataTable, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, LaunderUpgradeCur, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, LaunderUpgradeNext, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankAppWidget_C, LaunderMaxedOut, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbankAppWidget_C, 0x0389);
		}

		// BlueprintGeneratedClass introCutscenePawn.introCutscenePawn_C
		TEST_METHOD(BlueprintGeneratedClass__introCutscenePawn__introCutscenePawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, Sphere, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, Camera, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, music, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, DefaultSceneRoot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, cutsceneWidget, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, baseBeatTempo, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, UnknownData_HACZ, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, introTexts, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, introLevelSequence, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, wakeUpLevelSequence, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, alarmClockRef, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, NewVar_1, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, UnknownData_2TV0, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, beatNum, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, NewVar_2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, overrideIntro, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, UnknownData_VICX, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, smallBeatNum, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, firstMusicPlayer, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, firstPoliceCar, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, mainApartment, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AintroCutscenePawn_C, initialLights, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AintroCutscenePawn_C, 0x0420);
		}

		// BlueprintGeneratedClass appartmentLight.appartmentLight_C
		TEST_METHOD(BlueprintGeneratedClass__appartmentLight__appartmentLight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, turnOnSound, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, StaticMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, PointLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, lightFlicker_flicker_DF607ECB45F784CEF3C122AE6F8E90AE, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, lightFlicker__Direction_DF607ECB45F784CEF3C122AE6F8E90AE, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, UnknownData_CELT, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, lightFlicker, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, isOn, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, UnknownData_ERAP, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, dynMat, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentLight_C, baseBrightness, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AappartmentLight_C, 0x037C);
		}

		// BlueprintGeneratedClass clubBodyguardSpot01.clubBodyguardSpot01_C
		TEST_METHOD(BlueprintGeneratedClass__clubBodyguardSpot01__clubBodyguardSpot01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AclubBodyguardSpot01_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclubBodyguardSpot01_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AclubBodyguardSpot01_C, 0x0338);
		}

		// BlueprintGeneratedClass policePatrolArea.policePatrolArea_C
		TEST_METHOD(BlueprintGeneratedClass__policePatrolArea__policePatrolArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, patrolPoints, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, isPatroled, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, UnknownData_CBP4, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, patrolPriority, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, areaStringID, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, pointsToReach, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, firstArea, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, InInfluenceRadius, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, UnknownData_0S9Q, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, CurPatrolLead, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolArea_C, spawnTimer, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApolicePatrolArea_C, 0x0394);
		}

		// BlueprintGeneratedClass policePatrolPoint.policePatrolPoint_C
		TEST_METHOD(BlueprintGeneratedClass__policePatrolPoint__policePatrolPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, Influence, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, firstArea, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicePatrolPoint_C, InInfluenceRadius, 0x0351);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApolicePatrolPoint_C, 0x0352);
		}

		// BlueprintGeneratedClass polskaPatolaPlayer.polskaPatolaPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__polskaPatolaPlayer__polskaPatolaPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, Audio, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, Countdown, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, lastIndexPlayer, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, Sounds, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolskaPatolaPlayer_C, Interval, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApolskaPatolaPlayer_C, 0x036C);
		}

		// BlueprintGeneratedClass raidPolicemanSpawn.raidPolicemanSpawn_C
		TEST_METHOD(BlueprintGeneratedClass__raidPolicemanSpawn__raidPolicemanSpawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidPolicemanSpawn_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidPolicemanSpawn_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidPolicemanSpawn_C, Arrow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidPolicemanSpawn_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AraidPolicemanSpawn_C, 0x0348);
		}

		// BlueprintGeneratedClass PM_SoundFail.PM_SoundFail_C
		TEST_METHOD(BlueprintGeneratedClass__PM_SoundFail__PM_SoundFail_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_SoundFail_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_SoundFail_C, 0x00A8);
		}

		// BlueprintGeneratedClass sampleClientForceGotHome.sampleClientForceGotHome_C
		TEST_METHOD(BlueprintGeneratedClass__sampleClientForceGotHome__sampleClientForceGotHome_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientForceGotHome_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsampleClientForceGotHome_C, 0x00A8);
		}

		// WidgetBlueprintGeneratedClass clientAddictedPopup.clientAddictedPopup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__clientAddictedPopup__clientAddictedPopup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientAddictedPopup_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientAddictedPopup_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientAddictedPopup_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientAddictedPopup_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientAddictedPopup_C, txtOverdose, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UclientAddictedPopup_C, 0x0230);
		}

		// AnimBlueprintGeneratedClass CitizenFemale02_AnimBP.CitizenFemale02_AnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__CitizenFemale02_AnimBP__CitizenFemale02_AnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, AnimGraphNode_Root_F444C73B412B70E4ED09CEB6948B7886, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, AnimGraphNode_BlendSpacePlayer_4325E92B42524A40A983C8ACF4B390EF, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, AnimGraphNode_StateResult_C33BB5C44BD5FE308888A2BAF25EAFD2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, AnimGraphNode_StateMachine_4BC75B6043F9AB889A71B0A16F1F4E4D, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, Speed, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, UnknownData_PW6Q, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale02_AnimBP_C, Owner, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCitizenFemale02_AnimBP_C, 0x0600);
		}

		// BlueprintGeneratedClass BTTask_Bird_Set_FlyAway_ToTrue.BTTask_Bird_Set_FlyAway_ToTrue_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_Set_FlyAway_ToTrue__BTTask_Bird_Set_FlyAway_ToTrue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Set_FlyAway_ToTrue_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Set_FlyAway_ToTrue_C, BBKey_FlyAway_, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_Set_FlyAway_ToTrue_C, 0x00B0);
		}

		// BlueprintGeneratedClass telephoneBP.telephoneBP_C
		TEST_METHOD(BlueprintGeneratedClass__telephoneBP__telephoneBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, flashlight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messageSound, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, ringTone, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, interfejs, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, phoneModel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, phoneUI, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, isSilent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, UnknownData_2I7D, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callSound, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, smsSound, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, notifySound, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, vibrationSound, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callMonologue, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, incomingCall, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callInProgress, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, UnknownData_1VUR, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, functionCallAccept, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, functionCallDecline, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, functionCallEnd, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, CallText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, curCallerID, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, UnknownData_3B60, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, curCallTime, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, curCallerData, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, Player, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callerList, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callerIDList, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callerTimeList, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, callerCallDeclinedList, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, noteList, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, noteTaskID, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, noteTaskDone, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messageUserMap, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messagesList, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messagesUsers, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messagesVcards, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messagesQuantities, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, newestMessageID, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, messagesOpen, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, phoneUnlocked, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, UnknownData_AMTF, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, notificationIcons, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtelephoneBP_C, notificationMessages, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtelephoneBP_C, 0x0578);
		}

		// BlueprintGeneratedClass shopPawn.shopPawn_C
		TEST_METHOD(BlueprintGeneratedClass__shopPawn__shopPawn_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopPawn_C, 0x03E9);
		}

		// BlueprintGeneratedClass smugglerLaundry.smugglerLaundry_C
		TEST_METHOD(BlueprintGeneratedClass__smugglerLaundry__smugglerLaundry_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmugglerLaundry_C, 0x0AD4);
		}

		// BlueprintGeneratedClass garage5m01.garage5m01_C
		TEST_METHOD(BlueprintGeneratedClass__garage5m01__garage5m01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarage5m01_C, 0x0474);
		}

		// BlueprintGeneratedClass holyMaryLookTrigger.holyMaryLookTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__holyMaryLookTrigger__holyMaryLookTrigger_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AholyMaryLookTrigger_C, UnknownData_8T0V, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AholyMaryLookTrigger_C, UberGraphFrame, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AholyMaryLookTrigger_C, 0x0360);
		}

		// BlueprintGeneratedClass nightClubLookTrigger.nightClubLookTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__nightClubLookTrigger__nightClubLookTrigger_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightClubLookTrigger_C, UnknownData_SF8P, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnightClubLookTrigger_C, UberGraphFrame, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnightClubLookTrigger_C, 0x0360);
		}

		// BlueprintGeneratedClass Audio.Audio_C
		TEST_METHOD(BlueprintGeneratedClass__Audio__Audio_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudio_C, 0x0330);
		}

		// BlueprintGeneratedClass TunnelMusic.TunnelMusic_C
		TEST_METHOD(BlueprintGeneratedClass__TunnelMusic__TunnelMusic_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, Ambient, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, Rats, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, music, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, TunnelMusic, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, ChangeSoundTimeout, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, ChangeTimeTimer, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, RatsOn, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, UnknownData_B5JQ, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, MaxDist, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, MinDist, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, DelayMin, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, DelayMax, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelMusic_C, RatsVol, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATunnelMusic_C, 0x0380);
		}

		// BlueprintGeneratedClass decoTrashCoffeeTable.decoTrashCoffeeTable_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashCoffeeTable__decoTrashCoffeeTable_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashCoffeeTable_C, 0x0446);
		}

		// BlueprintGeneratedClass decoTrashFloorLamp.decoTrashFloorLamp_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashFloorLamp__decoTrashFloorLamp_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoTrashFloorLamp_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoTrashFloorLamp_C, LightSwitch, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashFloorLamp_C, 0x0470);
		}

		// BlueprintGeneratedClass policeDogLeash.policeDogLeash_C
		TEST_METHOD(BlueprintGeneratedClass__policeDogLeash__policeDogLeash_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, Cube, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, leashHolder, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, leashHolderID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, leftSide, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, UnknownData_4VAR, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, leashID, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogLeash_C, firstLoad, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceDogLeash_C, 0x035D);
		}

		// BlueprintGeneratedClass policemanSpawner.policemanSpawner_C
		TEST_METHOD(BlueprintGeneratedClass__policemanSpawner__policemanSpawner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicemanSpawner_C, DefaultSceneRoot, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApolicemanSpawner_C, 0x0330);
		}

		// BlueprintGeneratedClass launderSpawnLocation.launderSpawnLocation_C
		TEST_METHOD(BlueprintGeneratedClass__launderSpawnLocation__launderSpawnLocation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderSpawnLocation_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderSpawnLocation_C, Arrow, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaunderSpawnLocation_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlaunderSpawnLocation_C, 0x0340);
		}

		// BlueprintGeneratedClass seedSellerDialogue.seedSellerDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__seedSellerDialogue__seedSellerDialogue_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AseedSellerDialogue_C, 0x0392);
		}

		// BlueprintGeneratedClass dealerSaleDialogueInstance.dealerSaleDialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__dealerSaleDialogueInstance__dealerSaleDialogueInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, UnknownData_6V0L, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, clientIsMale, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, UnknownData_J4OM, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, randomDialogueLines, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, psychNoIdeaResponses, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, psychKnowSomethingResponses, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, psychDirectResponses, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, askedQuestion, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, clientKnew, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, UnknownData_SOAO, 0x03EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, psychedelicChanceConcrete, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerSaleDialogueInstance_C, psychedelicsChanceSomething, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdealerSaleDialogueInstance_C, 0x03F4);
		}

		// BlueprintGeneratedClass moneyLaunderGuy.moneyLaunderGuy_C
		TEST_METHOD(BlueprintGeneratedClass__moneyLaunderGuy__moneyLaunderGuy_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmoneyLaunderGuy_C, UnknownData_NNJP, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmoneyLaunderGuy_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmoneyLaunderGuy_C, 0x0AE0);
		}

		// Class MaterialShaderQualitySettings.MaterialShaderQualitySettings
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// Class MaterialShaderQualitySettings.ShaderPlatformQualitySettings
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_NT93, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0050);
		}

		// WidgetBlueprintGeneratedClass newDayWidget.newDayWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__newDayWidget__newDayWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewDayWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewDayWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewDayWidget_C, txtDay, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnewDayWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass decoOldschoolArmchair.decoOldschoolArmchair_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolArmchair__decoOldschoolArmchair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolArmchair_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPicture_05.decoPicture_05_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_05__decoPicture_05_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_05_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_AS_Alkaloid.BP_AS_Alkaloid_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Alkaloid__BP_AS_Alkaloid_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Alkaloid_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Alkaloid_C, 0x03F0);
		}

		// WidgetBlueprintGeneratedClass useSlotWidget.useSlotWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__useSlotWidget__useSlotWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, CanvasPanel_2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, darken, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, objectImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, txtNam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, txtUseNum, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, SourceString, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, Data, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, SourceIndex, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UuseSlotWidget_C, useNum, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UuseSlotWidget_C, 0x0360);
		}

		// BlueprintGeneratedClass streetPersonFemale03BP.streetPersonFemale03BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale03BP__streetPersonFemale03BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale03BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass evidenceDocumentSpawn.evidenceDocumentSpawn_C
		TEST_METHOD(BlueprintGeneratedClass__evidenceDocumentSpawn__evidenceDocumentSpawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AevidenceDocumentSpawn_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AevidenceDocumentSpawn_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AevidenceDocumentSpawn_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AevidenceDocumentSpawn_C, 0x0340);
		}

		// AnimBlueprintGeneratedClass donaldShopOwnerAnimBP.donaldShopOwnerAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__donaldShopOwnerAnimBP__donaldShopOwnerAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_Root_82EAC030408C2DCE794725AD5E8F131F, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_TransitionResult_963B2D94428E0592F55745B75F727656, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_TransitionResult_00B806EA4583B25BBCB0B08FE1814671, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_SequencePlayer_79F3FD82472BFD7B2138BF926F65D6D2, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_StateResult_393EF2F54BF9A24684E89FBDE67CFF70, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_SequencePlayer_FF23157A45A9F4DFE104DBB44A831223, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_StateResult_CB21FA834950C8D1EEC1B5B784BCA3F2, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_StateMachine_E591D156463DBA7F36980EAC47B96EE2, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_LocalToComponentSpace_5793F3F143B7A534C8B173B70AEADC09, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_ComponentToLocalSpace_D373565444A8812DA9AB35B0BE8492D9, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, AnimGraphNode_ModifyBone_907A423848A2AE28A3B60EB896CAE406, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, IsClient, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, UnknownData_LF7Z, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdonaldShopOwnerAnimBP_C, headRot, 0x0894);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdonaldShopOwnerAnimBP_C, 0x08A0);
		}

		// BlueprintGeneratedClass deaRaidManager.deaRaidManager_C
		TEST_METHOD(BlueprintGeneratedClass__deaRaidManager__deaRaidManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, deaRaidMusic, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, raidMusicFadeOut_fade_95AA292A4799D72DC5D0C388F92C0028, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, raidMusicFadeOut__Direction_95AA292A4799D72DC5D0C388F92C0028, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, UnknownData_Z1N5, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, raidMusicFadeOut, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, suvSpawnPoint, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, vanSpawnPoint, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, deaRaidBaseSeconds, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, deaRaidSecondsLeft, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, deaRaidSecondsDrama, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, deaRaidBustSecondChosen, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, raidWidget, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, deaRaidSecondsDramaSafe, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, firstRush, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, UnknownData_2PXQ, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, distanceRanAway, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, stressVal, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, pressureVal, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, raidActive, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, UnknownData_JAVT, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, baseMusicVolume, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, UnknownData_DVAG, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, raidPolicemenSpawn, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidManager_C, ApartmentRef, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeaRaidManager_C, 0x03B0);
		}

		// WidgetBlueprintGeneratedClass quickMessageWidget.quickMessageWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__quickMessageWidget__quickMessageWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickMessageWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickMessageWidget_C, miganie, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickMessageWidget_C, pop, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickMessageWidget_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickMessageWidget_C, txtMessage, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UquickMessageWidget_C, 0x0230);
		}

		// BlueprintGeneratedClass loadingMusic.loadingMusic_C
		TEST_METHOD(BlueprintGeneratedClass__loadingMusic__loadingMusic_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, Timeline_0_NewTrack_0_E7069EBF464E29B13551A7BB718B8AEE, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, Timeline_0__Direction_E7069EBF464E29B13551A7BB718B8AEE, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, UnknownData_MK6J, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, Timeline_1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, kill, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, UnknownData_B9HS, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AloadingMusic_C, musicVersions, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AloadingMusic_C, 0x0368);
		}

		// BlueprintGeneratedClass furnitureShopEnterTrigger.furnitureShopEnterTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__furnitureShopEnterTrigger__furnitureShopEnterTrigger_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureShopEnterTrigger_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureShopEnterTrigger_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureShopEnterTrigger_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureShopEnterTrigger_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfurnitureShopEnterTrigger_C, TaskID, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfurnitureShopEnterTrigger_C, 0x034C);
		}

		// Class ClothingSystemRuntimeInterface.ClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// Class ClothingSystemRuntimeInterface.ClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// Class ClothingSystemRuntimeInterface.ClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_VGCZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// BlueprintGeneratedClass ActiveBush_Green01.ActiveBush_Green01_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Green01__ActiveBush_Green01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Green01_C, 0x0348);
		}

		// BlueprintGeneratedClass eqShopMarketSalesman.eqShopMarketSalesman_C
		TEST_METHOD(BlueprintGeneratedClass__eqShopMarketSalesman__eqShopMarketSalesman_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeqShopMarketSalesman_C, 0x03E9);
		}

		// BlueprintGeneratedClass equipmentShopDecorations.equipmentShopDecorations_C
		TEST_METHOD(BlueprintGeneratedClass__equipmentShopDecorations__equipmentShopDecorations_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AequipmentShopDecorations_C, 0x03E9);
		}

		// BlueprintGeneratedClass planeSourcePoint.planeSourcePoint_C
		TEST_METHOD(BlueprintGeneratedClass__planeSourcePoint__planeSourcePoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneSourcePoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneSourcePoint_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneSourcePoint_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneSourcePoint_C, Target, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AplaneSourcePoint_C, 0x0348);
		}

		// BlueprintGeneratedClass docksPlaneConcreteBP.docksPlaneConcreteBP_C
		TEST_METHOD(BlueprintGeneratedClass__docksPlaneConcreteBP__docksPlaneConcreteBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdocksPlaneConcreteBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdocksPlaneConcreteBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdocksPlaneConcreteBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdocksPlaneConcreteBP_C, WidthSegments, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdocksPlaneConcreteBP_C, 0x0340);
		}

		// BlueprintGeneratedClass fenceBallenaBP.fenceBallenaBP_C
		TEST_METHOD(BlueprintGeneratedClass__fenceBallenaBP__fenceBallenaBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceBallenaBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceBallenaBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceBallenaBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceBallenaBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfenceBallenaBP_C, 0x033D);
		}

		// BlueprintGeneratedClass streamMapBoxLoader.streamMapBoxLoader_C
		TEST_METHOD(BlueprintGeneratedClass__streamMapBoxLoader__streamMapBoxLoader_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, Cube, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, Extent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, UnknownData_13A1, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, loadList, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, unloadList, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapBoxLoader_C, InOutLoading, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreamMapBoxLoader_C, 0x0379);
		}

		// BlueprintGeneratedClass PoliceBlockadeCar.PoliceBlockadeCar_C
		TEST_METHOD(BlueprintGeneratedClass__PoliceBlockadeCar__PoliceBlockadeCar_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeCar_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeCar_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeCar_C, SpotLight1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeCar_C, SpotLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeCar_C, policeCar, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeCar_C, DefaultSceneRoot, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APoliceBlockadeCar_C, 0x0358);
		}

		// WidgetBlueprintGeneratedClass lightSwitchWidget.lightSwitchWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__lightSwitchWidget__lightSwitchWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UlightSwitchWidget_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlightSwitchWidget_C, 0x0210);
		}

		// BlueprintGeneratedClass checkTimeGoHome.checkTimeGoHome_C
		TEST_METHOD(BlueprintGeneratedClass__checkTimeGoHome__checkTimeGoHome_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckTimeGoHome_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcheckTimeGoHome_C, 0x00A0);
		}

		// BlueprintGeneratedClass citizenCheckDistanceToPlayer.citizenCheckDistanceToPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__citizenCheckDistanceToPlayer__citizenCheckDistanceToPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcitizenCheckDistanceToPlayer_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcitizenCheckDistanceToPlayer_C, playerFarDistance, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcitizenCheckDistanceToPlayer_C, 0x00A4);
		}

		// BlueprintGeneratedClass BTService_Bird_ObstacleAvoidance.BTService_Bird_ObstacleAvoidance_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_ObstacleAvoidance__BTService_Bird_ObstacleAvoidance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_Pitch_Adjustment, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BbKey_FlyingSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_DownTraceDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_FlapFast_, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_DistanceToTheGround, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_AreWeFlying_, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_VerticleThrustAmount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_DoADownTrace_, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_IsLookingForPerch_, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_ObstacleAvoidance_C, BBKey_TimeToLand_, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_ObstacleAvoidance_C, 0x00F0);
		}

		// WidgetBlueprintGeneratedClass caughtScreen.caughtScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__caughtScreen__caughtScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcaughtScreen_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcaughtScreen_C, taserEnter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcaughtScreen_C, Image_1, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcaughtScreen_C, 0x0220);
		}

		// BlueprintGeneratedClass warehouseBarierSegmentBP.warehouseBarierSegmentBP_C
		TEST_METHOD(BlueprintGeneratedClass__warehouseBarierSegmentBP__warehouseBarierSegmentBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwarehouseBarierSegmentBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwarehouseBarierSegmentBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwarehouseBarierSegmentBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwarehouseBarierSegmentBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwarehouseBarierSegmentBP_C, 0x033D);
		}

		// BlueprintGeneratedClass WallConcreteSimpleBP.WallConcreteSimpleBP_C
		TEST_METHOD(BlueprintGeneratedClass__WallConcreteSimpleBP__WallConcreteSimpleBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWallConcreteSimpleBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWallConcreteSimpleBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWallConcreteSimpleBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWallConcreteSimpleBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWallConcreteSimpleBP_C, 0x033D);
		}

		// BlueprintGeneratedClass ambientSoundsControler.ambientSoundsControler_C
		TEST_METHOD(BlueprintGeneratedClass__ambientSoundsControler__ambientSoundsControler_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AambientSoundsControler_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AambientSoundsControler_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AambientSoundsControler_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AambientSoundsControler_C, dayAmbientSounds, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AambientSoundsControler_C, nightAmbientSounds, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AambientSoundsControler_C, dayTimeCon, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AambientSoundsControler_C, 0x0368);
		}

		// BlueprintGeneratedClass HealthInterface.HealthInterface_C
		TEST_METHOD(BlueprintGeneratedClass__HealthInterface__HealthInterface_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthInterface_C, 0x0028);
		}

		// BlueprintGeneratedClass mainMenu.mainMenu_C
		TEST_METHOD(BlueprintGeneratedClass__mainMenu__mainMenu_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmainMenu_C, 0x0330);
		}

		// BlueprintGeneratedClass PM_RequestArea.PM_RequestArea_C
		TEST_METHOD(BlueprintGeneratedClass__PM_RequestArea__PM_RequestArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_RequestArea_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_RequestArea_C, 0x00A8);
		}

		// BlueprintGeneratedClass ballenaDeadDrop.ballenaDeadDrop_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaDeadDrop__ballenaDeadDrop_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaDeadDrop_C, 0x0518);
		}

		// BlueprintGeneratedClass ContainerMoneyDeposit.ContainerMoneyDeposit_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerMoneyDeposit__ContainerMoneyDeposit_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AContainerMoneyDeposit_C, UnknownData_SDF7, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AContainerMoneyDeposit_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AContainerMoneyDeposit_C, moneyDeposit, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AContainerMoneyDeposit_C, RetrieveCashTaskID, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerMoneyDeposit_C, 0x050C);
		}

		// WidgetBlueprintGeneratedClass introCreditsWidget.introCreditsWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__introCreditsWidget__introCreditsWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCreditsWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCreditsWidget_C, Entry, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCreditsWidget_C, txtCreditPerson, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCreditsWidget_C, txtCreditSubtitle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCreditsWidget_C, txtCreditTitle, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UintroCreditsWidget_C, 0x0230);
		}

		// WidgetBlueprintGeneratedClass phoneMessageWidget.phoneMessageWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__phoneMessageWidget__phoneMessageWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneMessageWidget_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneMessageWidget_C, txtMessage, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UphoneMessageWidget_C, 0x0218);
		}

		// BlueprintGeneratedClass SubstancePickupItem.SubstancePickupItem_C
		TEST_METHOD(BlueprintGeneratedClass__SubstancePickupItem__SubstancePickupItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancePickupItem_C, SubstanceID, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASubstancePickupItem_C, 0x05B0);
		}

		// BlueprintGeneratedClass weedProductionFilter.weedProductionFilter_C
		TEST_METHOD(BlueprintGeneratedClass__weedProductionFilter__weedProductionFilter_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionFilter_C, RamaSave, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedProductionFilter_C, 0x0430);
		}

		// BlueprintGeneratedClass garbageBox1.garbageBox1_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBox1__garbageBox1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBox1_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageCan.garbageCan_C
		TEST_METHOD(BlueprintGeneratedClass__garbageCan__garbageCan_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageCan_C, 0x05A8);
		}

		// BlueprintGeneratedClass labDryerSmall.labDryerSmall_C
		TEST_METHOD(BlueprintGeneratedClass__labDryerSmall__labDryerSmall_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlabDryerSmall_C, 0x07DC);
		}

		// BlueprintGeneratedClass sleepingBedBase.sleepingBedBase_C
		TEST_METHOD(BlueprintGeneratedClass__sleepingBedBase__sleepingBedBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsleepingBedBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsleepingBedBase_C, Camera, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsleepingBedBase_C, bedCamPosition, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsleepingBedBase_C, playerSleeping, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsleepingBedBase_C, UnknownData_QQUO, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsleepingBedBase_C, dayTimeControler, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsleepingBedBase_C, 0x0450);
		}

		// BlueprintGeneratedClass psychedelicWeedDialogue.psychedelicWeedDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicWeedDialogue__psychedelicWeedDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicWeedDialogue_C, UnknownData_AON1, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicWeedDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicWeedDialogue_C, moneySafeRef, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicWeedDialogue_C, 0x03A8);
		}

		// Class BuildPatchServices.BuildPatchManifest
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_LKT7, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// WidgetBlueprintGeneratedClass additiveContainerLabel.additiveContainerLabel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__additiveContainerLabel__additiveContainerLabel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UadditiveContainerLabel_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UadditiveContainerLabel_C, txtLabel, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UadditiveContainerLabel_C, 0x0218);
		}

		// BlueprintGeneratedClass SecurityCameraAlertRadius.SecurityCameraAlertRadius_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityCameraAlertRadius__SecurityCameraAlertRadius_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCameraAlertRadius_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCameraAlertRadius_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCameraAlertRadius_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCameraAlertRadius_C, PolicemenAlerted, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityCameraAlertRadius_C, 0x0344);
		}

		// BlueprintGeneratedClass contOldschoolCommodeWide.contOldschoolCommodeWide_C
		TEST_METHOD(BlueprintGeneratedClass__contOldschoolCommodeWide__contOldschoolCommodeWide_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcontOldschoolCommodeWide_C, 0x04F1);
		}

		// BlueprintGeneratedClass TrashCupboard.TrashCupboard_C
		TEST_METHOD(BlueprintGeneratedClass__TrashCupboard__TrashCupboard_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrashCupboard_C, 0x04F1);
		}

		// BlueprintGeneratedClass tutorialTipMarkerBP.tutorialTipMarkerBP_C
		TEST_METHOD(BlueprintGeneratedClass__tutorialTipMarkerBP__tutorialTipMarkerBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtutorialTipMarkerBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtutorialTipMarkerBP_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtutorialTipMarkerBP_C, Widget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtutorialTipMarkerBP_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtutorialTipMarkerBP_C, TipText, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtutorialTipMarkerBP_C, 0x0360);
		}

		// BlueprintGeneratedClass modernCommodeBP.modernCommodeBP_C
		TEST_METHOD(BlueprintGeneratedClass__modernCommodeBP__modernCommodeBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmodernCommodeBP_C, 0x04F1);
		}

		// BlueprintGeneratedClass garbageTin2.garbageTin2_C
		TEST_METHOD(BlueprintGeneratedClass__garbageTin2__garbageTin2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageTin2_C, 0x05A8);
		}

		// BlueprintGeneratedClass valBracelet.valBracelet_C
		TEST_METHOD(BlueprintGeneratedClass__valBracelet__valBracelet_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvalBracelet_C, 0x05A8);
		}

		// BlueprintGeneratedClass valGoldBarLarge.valGoldBarLarge_C
		TEST_METHOD(BlueprintGeneratedClass__valGoldBarLarge__valGoldBarLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvalGoldBarLarge_C, 0x05A8);
		}

		// BlueprintGeneratedClass ratEnvelopePickup.ratEnvelopePickup_C
		TEST_METHOD(BlueprintGeneratedClass__ratEnvelopePickup__ratEnvelopePickup_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AratEnvelopePickup_C, 0x05A8);
		}

		// BlueprintGeneratedClass weedMoneySafe.weedMoneySafe_C
		TEST_METHOD(BlueprintGeneratedClass__weedMoneySafe__weedMoneySafe_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedMoneySafe_C, 0x04F1);
		}

		// BlueprintGeneratedClass garbageTin1.garbageTin1_C
		TEST_METHOD(BlueprintGeneratedClass__garbageTin1__garbageTin1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageTin1_C, 0x05A8);
		}

		// BlueprintGeneratedClass fluidMixerFlaskBP.fluidMixerFlaskBP_C
		TEST_METHOD(BlueprintGeneratedClass__fluidMixerFlaskBP__fluidMixerFlaskBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerFlaskBP_C, UberGraphFrame, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerFlaskBP_C, contentMesh, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerFlaskBP_C, contentScale, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfluidMixerFlaskBP_C, 0x0864);
		}

		// BlueprintGeneratedClass doorsExtWood02.doorsExtWood02_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood02__doorsExtWood02_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood02_C, 0x052A);
		}

		// BlueprintGeneratedClass streetTeleport.streetTeleport_C
		TEST_METHOD(BlueprintGeneratedClass__streetTeleport__streetTeleport_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetTeleport_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetTeleport_C, drzwiWejsciowe, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetTeleport_C, teleportLocation, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetTeleport_C, akcja, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetTeleport_C, 0x0458);
		}

		// BlueprintGeneratedClass PM_GetPointCloseToPlayer.PM_GetPointCloseToPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__PM_GetPointCloseToPlayer__PM_GetPointCloseToPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetPointCloseToPlayer_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetPointCloseToPlayer_C, Distance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetPointCloseToPlayer_C, soundInvestigate, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_GetPointCloseToPlayer_C, 0x00AD);
		}

		// BlueprintGeneratedClass drugPickupItem.drugPickupItem_C
		TEST_METHOD(BlueprintGeneratedClass__drugPickupItem__drugPickupItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, UberGraphFrame, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, overlapp, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, Widget, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, onWorkStation, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, Selected, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, onceConfigured, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, UnknownData_RZG6, 0x05C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, baseGramsPerItem, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, newIcon, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, SubstanceMixProp, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, SubstanceID, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, SubstanceCustomName, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugPickupItem_C, GizmoGuid, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdrugPickupItem_C, 0x0640);
		}

		// BlueprintGeneratedClass PM_RecallSelf.PM_RecallSelf_C
		TEST_METHOD(BlueprintGeneratedClass__PM_RecallSelf__PM_RecallSelf_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_RecallSelf_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_RecallSelf_C, 0x00A8);
		}

		// BlueprintGeneratedClass SectorHidoutUnlocker.SectorHidoutUnlocker_C
		TEST_METHOD(BlueprintGeneratedClass__SectorHidoutUnlocker__SectorHidoutUnlocker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorHidoutUnlocker_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorHidoutUnlocker_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorHidoutUnlocker_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorHidoutUnlocker_C, Hideout, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASectorHidoutUnlocker_C, 0x0348);
		}

		// BlueprintGeneratedClass weedDialogueFirstDone.weedDialogueFirstDone_C
		TEST_METHOD(BlueprintGeneratedClass__weedDialogueFirstDone__weedDialogueFirstDone_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDialogueFirstDone_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDialogueFirstDone_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDialogueFirstDone_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedDialogueFirstDone_C, 0x0340);
		}

		// BlueprintGeneratedClass drugDealerFPS_GM.drugDealerFPS_GM_C
		TEST_METHOD(BlueprintGeneratedClass__drugDealerFPS_GM__drugDealerFPS_GM_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugDealerFPS_GM_C, DefaultSceneRoot, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdrugDealerFPS_GM_C, 0x03D0);
		}

		// WidgetBlueprintGeneratedClass pocketSlotWidget.pocketSlotWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__pocketSlotWidget__pocketSlotWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, bg, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, bgDarken, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, CanvasPanel_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, imgGreenHover, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, imgRedHover, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, itemIcon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, TextBlock_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, txtAmount, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, txtQuantity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, txtShortName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Data, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Index, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Quantity, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Payload, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, dropedItem, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, dropTag, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, dropedFromVendor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, UnknownData_8IJM, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, ItemID, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Amount, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, UnknownData_YYLN, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, CustomTagName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, activeElementsColor, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, Overflowed, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, UnknownData_HX66, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpocketSlotWidget_C, MixProportions, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpocketSlotWidget_C, 0x0438);
		}

		// Class Engine.Player
		TEST_METHOD(Class__Engine__Player)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_RH0H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_RXTI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// Class Engine.NetConnection
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_LA23, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_MKP3, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_61PU, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_YTPM, 0x17D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1918);
		}

		// Class Engine.NetDriver
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_KZ4U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_8XY6, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_82O0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_4408, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_U9D9, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RoleProperty, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RemoteRoleProperty, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_C2JE, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_6XB0, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_9B2A, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_NXQS, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0698);
		}

		// Class Engine.BlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// Class Engine.OnlineBlueprintCallProxyBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0028);
		}

		// Class Engine.BlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_YKAE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// Class Engine.Actor
		TEST_METHOD(Class__Engine__Actor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_SSY1, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HLZY, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_N5Z7, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_DVL0, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_4WOM, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_OG4U, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0328);
		}

		// Class Engine.OnlineEngineInterface
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// Class Engine.DeveloperSettings
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_XM7C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// Class Engine.OnlineSession
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// Class Engine.ActorComponent
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_4U1B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_9RWE, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_9FNK, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_KYW9, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00F0);
		}

		// Class Engine.SceneComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_ZZYU, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_8HTD, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_QC4A, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x01BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_DEB6, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_SFVF, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0240);
		}

		// Class Engine.MaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_ZGXE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// Class Engine.MaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_BXZK, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_NVIP, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0050);
		}

		// Class Engine.MaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_OSS1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_TFUN, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_NNYS, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_NHCS, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_G8JR, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_SM1K, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_3FDZ, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_SJ3S, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00F8);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0118);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0118);
		}

		// Class Engine.Pawn
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_KQPX, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_PSG0, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_CG0N, 0x033B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_JMG1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_CR6T, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_A06L, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0388);
		}

		// Class Engine.Character
		TEST_METHOD(Class__Engine__Character)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_5NOE, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_7WLE, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_E1FN, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_QSK0, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_E432, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_9195, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x0740);
		}

		// Class Engine.PrimitiveComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_H9YQ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_7XLQ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_1EOW, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastSubmitTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTimeOnScreen, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_RJG3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_V6Q4, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_6Y5X, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, PostPhysicsComponentTick, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_9GWL, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0560);
		}

		// Class Engine.MeshComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_R5RY, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0580);
		}

		// Class Engine.DataAsset
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// Class Engine.SplineComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_O734, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x0626);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x0627);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_8UBL, 0x062B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_LJNK, 0x063C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0640);
		}

		// Class Engine.AudioComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_EAFB, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_O9XC, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_N104, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0556);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_GX14, 0x0557);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_MUJF, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_MS8O, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_GBME, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_QXFN, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_6ZQ4, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0650);
		}

		// Class Engine.AssetImportData
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// Class Engine.AssetUserData
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// Class Engine.MovementComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_6XC7, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_9DW6, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_LWEW, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x0130);
		}

		// Class Engine.NavMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_4VQL, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0170);
		}

		// Class Engine.PawnMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0178);
		}

		// Class Engine.CharacterMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_MVDC, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NWI6, 0x01AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_IDGX, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_8ICG, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_A3E8, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_O2Q1, 0x03B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_EI6B, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_KL29, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0M9H, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_I5ML, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NK0O, 0x06FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0720);
		}

		// Class Engine.SkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_6S1P, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_BDZJ, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_E9H9, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_MC0O, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedLocalBounds, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_DCME, 0x06A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x06C0);
		}

		// Class Engine.SkeletalMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VS21, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SubInstances, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ESGT, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HNFU, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LLKV, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UseAsyncScene, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x079E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_SC4L, 0x079F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6GZA, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6BN2, 0x07A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6L1O, 0x07AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_5312, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_OTCM, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_F54T, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_1WXU, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_NXH8, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_2NDP, 0x0A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0B30);
		}

		// Class Engine.AnimInstance
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_D2YG, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_Q4RK, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_TJAI, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0360);
		}

		// Class Engine.StaticMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, ForcedLodModel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_W8LQ, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_7IJR, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x05F0);
		}

		// Class Engine.InstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_X83I, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_MBLZ, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_AHZP, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_5ZL4, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0680);
		}

		// Class Engine.HierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_U0JG, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_AG1D, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_81FM, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_UK71, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_MFE2, 0x0715);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_NDPT, 0x071C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0770);
		}

		// Class Engine.StaticMeshActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_GG3W, 0x0332);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0338);
		}

		// Class Engine.Brush
		TEST_METHOD(Class__Engine__Brush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_9GHD, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_GIW8, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_GQSQ, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0360);
		}

		// Class Engine.Volume
		TEST_METHOD(Class__Engine__Volume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0360);
		}

		// Class Engine.MaterialInterface
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_QLFV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_2YB6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_2K47, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_BYSJ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// Class Engine.MaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_Q12W, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOverrideBaseProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_TC4I, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_R1XM, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PermutationTextureReferences, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_CKN4, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x01E8);
		}

		// Class Engine.MaterialInstanceConstant
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x01E8);
		}

		// Class Engine.MaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// Class Engine.EngineCustomTimeStep
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// Class Engine.AnimNotify
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_ATD7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// Class Engine.AnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_08PP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// Class Engine.BlueprintGeneratedClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_IGHO, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_E9AI, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x02E0);
		}

		// Class Engine.CameraActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_7O54, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_U3QA, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_RKFK, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_FBUK, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x0840);
		}

		// Class Engine.CameraComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_8FAJ, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_ED28, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x0790);
		}

		// Class Engine.SoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_AZRN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// Class Engine.SoundEffectSubmixPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// Class Engine.SoundBase
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_4QB4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundConcurrencySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x00A8);
		}

		// Class Engine.SoundWave
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_9HIK, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_ND1X, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_OLEG, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LocalizedSubtitles, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_ZG0J, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0208);
		}

		// Class Engine.SoundWaveProcedural
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_93CL, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0260);
		}

		// Class Engine.BlueprintCore
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyGeneratedClassIsAuthoritative, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_5IF3, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_U1LK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// Class Engine.Blueprint
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_5GHV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, PRIVATE_InnermostPreviousCDO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_0I7D, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_QNJX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_JANU, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, bNativize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_Y84K, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00E0);
		}

		// Class Engine.Model
		TEST_METHOD(Class__Engine__Model)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_12NL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x02C8);
		}

		// Class Engine.Channel
		TEST_METHOD(Class__Engine__Channel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_R7ZH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0068);
		}

		// Class Engine.ActorChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_FV76, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_AC8C, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0238);
		}

		// Class Engine.AnimationAsset
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_YBAD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_LL10, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// Class Engine.BlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_WU3B, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_FOTR, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_KPWW, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_UF77, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// Class Engine.BlendSpace
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_JXOK, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// Class Engine.AimOffsetBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// Class Engine.BlendSpace1D
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_DU14, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// Class Engine.AimOffsetBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// Class Engine.AISystemBase
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_8UVN, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_LO5J, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// Class Engine.AmbientSound
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0330);
		}

		// Class Engine.AnimationSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_YFV7, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultCompressionAlgorithm, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, RotationCompressionFormat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, TranslationCompressionFormat, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_BZ78, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, MaxCurveError, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AlternativeCompressionThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryExhaustiveSearch, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnableSegmenting, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_NLOY, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0070);
		}

		// Class Engine.AnimBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_NIAM, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_B29R, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x0108);
		}

		// Class Engine.AnimBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_8ZJT, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_XHSW, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndices, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_LRQX, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x0350);
		}

		// Class Engine.AnimClassData
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_ZRB6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_IQMR, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndices, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeProperty, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0098);
		}

		// Class Engine.AnimClassInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// Class Engine.AnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// Class Engine.AnimCompositeBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// Class Engine.AnimComposite
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// Class Engine.AnimCompress
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_V75R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, IdealNumFramesPerSegment, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxNumFramesPerSegment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_5S22, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxCurveError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_1WMT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0050);
		}

		// Class Engine.AnimCompress_Automatic
		TEST_METHOD(Class__Engine__AnimCompress_Automatic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, MaxEndEffectorError, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, UnknownData_0PIQ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_Automatic, 0x0058);
		}

		// Class Engine.AnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0050);
		}

		// Class Engine.AnimCompress_LeastDestructive
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0050);
		}

		// Class Engine.AnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_0PJW, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0070);
		}

		// Class Engine.AnimCompress_PerTrackCompression
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_T9S5, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_Z1WA, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_08CD, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_BEJX, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00F0);
		}

		// Class Engine.AnimCompress_RemoveEverySecondKey
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_LIG3, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0058);
		}

		// Class Engine.AnimCompress_RemoveTrivialKeys
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_Z8YC, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0060);
		}

		// Class Engine.AnimMetaData
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// Class Engine.AnimMontage
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_5OEZ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_DQU9, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_51LL, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01E0);
		}

		// Class Engine.AnimNotify_PauseClothingSimulation
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// Class Engine.AnimNotify_PlayParticleEffect
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_N04Q, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_W30V, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// Class Engine.AnimNotify_PlaySound
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_6X26, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// Class Engine.AnimNotify_ResetClothingSimulation
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// Class Engine.AnimNotify_ResetDynamics
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// Class Engine.AnimNotify_ResumeClothingSimulation
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// Class Engine.AnimNotifyState_DisableRootMotion
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// Class Engine.AnimNotifyState_TimedParticleEffect
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_RMV8, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// Class Engine.AnimNotifyState_Trail
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_DZ13, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_W4CT, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0060);
		}

		// Class Engine.AnimSequence
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_A1CE, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_Y6IK, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_2M42, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, EncodingPkgVersion, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_Q3VR, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IZX9, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// Class Engine.AnimSet
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_PY11, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_5T9Z, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// Class Engine.AnimSingleNodeInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0370);
		}

		// Class Engine.AnimStateMachineTypes
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// Class Engine.ApplicationLifecycleComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0180);
		}

		// Class Engine.ArrowComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, bIsScreenSizeScaled, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_C8SE, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_77I7, 0x0569);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0570);
		}

		// Class Engine.AssetExportTask
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_4455, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// Class Engine.AssetManager
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_78JH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_T2FL, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_WTBV, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x03D8);
		}

		// Class Engine.AssetManagerSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_FNZS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x00F0);
		}

		// Class Engine.AssetMappingTable
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_OUK0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// Class Engine.AsyncActionLoadPrimaryAsset
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetClass
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetList
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetClassList
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// Class Engine.AsyncActionChangePrimaryAssetBundles
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// Class Engine.Info
		TEST_METHOD(Class__Engine__Info)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0328);
		}

		// Class Engine.AtmosphericFog
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0330);
		}

		// Class Engine.AtmosphericFogComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_69ZA, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_NIM3, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0420);
		}

		// Class Engine.AudioSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_94E9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoipBufferingDelay, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_U7FY, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaxWaveInstances, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_ZOPQ, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_9TGC, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x00F8);
		}

		// Class Engine.AudioVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_7QU5, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_YLRO, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x03B0);
		}

		// Class Engine.AutomationTestSettings
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// Class Engine.AvoidanceManager
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_J8Q1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_IBLL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// Class Engine.BillboardComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_XVAG, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_JDJL, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0580);
		}

		// Class Engine.BlendableInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// Class Engine.Skeleton
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_U5OG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_HP6G, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_V03Y, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_FLBF, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_8AON, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0360);
		}

		// Class Engine.BlendProfile
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_DELT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// Class Engine.BlockingVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0360);
		}

		// Class Engine.BlueprintMapLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// Class Engine.GameInstance
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_DLEG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_I4GM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x00A0);
		}

		// Class Engine.PlatformGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0170);
		}

		// Class Engine.BlueprintPlatformLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// Class Engine.BlueprintSetLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// Class Engine.BodySetup
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_04WY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_ERZ4, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_AOG0, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_SNIY, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_A387, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0280);
		}

		// Class Engine.BoneMaskFilter
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// Class Engine.BookmarkBase
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// Class Engine.BookMark
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// Class Engine.BookMark2D
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_UKS8, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// Class Engine.ShapeComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_N5CS, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0570);
		}

		// Class Engine.BoxComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0580);
		}

		// Class Engine.ReflectionCapture
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0330);
		}

		// Class Engine.BoxReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0330);
		}

		// Class Engine.ReflectionCaptureComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_MQMQ, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_E8V4, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x02B0);
		}

		// Class Engine.BoxReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x02C0);
		}

		// Class Engine.Breakpoint
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_KVWU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_QVI6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// Class Engine.BrushBuilder
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_X6V8, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_B1WP, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// Class Engine.BrushComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_BVQQ, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0570);
		}

		// Class Engine.BrushShape
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0360);
		}

		// Class Engine.ButtonStyleAsset
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// Class Engine.CameraAnim
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_HAG7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_QQ0C, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_6DWM, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x0550);
		}

		// Class Engine.CameraAnimInst
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_DI1N, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_41EZ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_A17L, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// Class Engine.CameraBlockingVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0360);
		}

		// Class Engine.CameraModifier
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_VSM1, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_Z5T0, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_NXAP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// Class Engine.CameraModifier_CameraShake
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_PUAO, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x0060);
		}

		// Class Engine.CameraShake
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_FWK0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_EJXJ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_2BXT, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_IXDU, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// Class Engine.Canvas
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_6HO4, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_AGHZ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_517K, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// Class Engine.Texture
		TEST_METHOD(Class__Engine__Texture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_1PBE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, NumCinematicMipLevels, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedCombinedLODBias, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_GOJX, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B0);
		}

		// Class Engine.TextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_O4TK, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00B8);
		}

		// Class Engine.TextureRenderTarget2D
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_YBUK, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00E0);
		}

		// Class Engine.CanvasRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_GMN5, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0100);
		}

		// Class Engine.CapsuleComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHalfHeight, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_2YP8, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0580);
		}

		// Class Engine.Controller
		TEST_METHOD(Class__Engine__Controller)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_XSH8, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_2DJH, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_O4F0, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_0NSZ, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_JMSB, 0x039D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x03A8);
		}

		// Class Engine.PlayerController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YCKJ, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C2UL, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BL5Y, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YJ0Y, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_5CEG, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_1J1A, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_37PJ, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_87KM, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_PPEX, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_1YDB, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0563);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_MDJH, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_7PRD, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_RF1L, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S517, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C1RN, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_TUY9, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0678);
		}

		// Class Engine.CheatManager
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_4ZWY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// Class Engine.CheckBoxStyleAsset
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// Class Engine.ChildActorComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_VJGF, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0270);
		}

		// Class Engine.ChildConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1920);
		}

		// Class Engine.PlatformInterfaceBase
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// Class Engine.CloudStorageBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_S1CP, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// Class Engine.CollisionProfile
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_I2JH, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// Class Engine.Commandlet
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_YJG7, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// Class Engine.DynamicBlueprintBinding
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// Class Engine.ComponentDelegateBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// Class Engine.CurveTable
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_LSO8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x0098);
		}

		// Class Engine.CompositeCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00B8);
		}

		// Class Engine.DataTable
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_YSMY, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_6T93, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00A0);
		}

		// Class Engine.CompositeDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_ICBW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00C8);
		}

		// Class Engine.Engine
		TEST_METHOD(Class__Engine__Engine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_P142, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_LZ8K, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES2PixelShaderAdditiveComplexityCount, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_3FY1, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZNCL, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_92CC, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UAOO, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7VK5, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultCustomTimeStep, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CurrentCustomTimeStep, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProvider, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimecodeProvider, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProviderClassName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeFrameRate, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_U9HE, 0x0801);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QH51, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RLBW, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WJII, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_C8XL, 0x0885);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_BCNO, 0x0899);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_I8LS, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VIH9, 0x0915);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_XT6Y, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_D6OA, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GFV9, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_R1BY, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionMeshSectionHighlightIntensity, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HoverHighlightIntensity, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZJPC, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_S1MG, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VQ4G, 0x0BDC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0CA8);
		}

		// Class Engine.ScriptViewportClient
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_U6E2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// Class Engine.GameViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_0WBO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_UUXA, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_R7CD, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x02E8);
		}

		// Class Engine.Console
		TEST_METHOD(Class__Engine__Console)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_HKL5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_4R7K, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_NP7V, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// Class Engine.ControlChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_TMJI, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0080);
		}

		// Class Engine.ControlRigInterface
		TEST_METHOD(Class__Engine__ControlRigInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigInterface, 0x0028);
		}

		// Class Engine.StreamingSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_FMD5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_XG3E, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_99TK, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// Class Engine.GarbageCollectionSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_6B2D, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// Class Engine.CullDistanceVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_POSM, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0378);
		}

		// Class Engine.CurveBase
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_HGDQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// Class Engine.CurveEdPresetCurve
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// Class Engine.CurveFloat
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_FWMA, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00A8);
		}

		// Class Engine.CurveLinearColor
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_TTOL, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0210);
		}

		// Class Engine.Texture2D
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, StreamingIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_OJX8, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ForceMipLevelsToBeResidentTimestamp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_NU3C, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00E8);
		}

		// Class Engine.CurveLinearColorAtlas
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientPixelSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0100);
		}

		// Class Engine.CurveSourceInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// Class Engine.CurveVector
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x0180);
		}

		// Class Engine.DamageType
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_OP08, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_OIMG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// Class Engine.PrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// Class Engine.DataTableFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// Class Engine.DebugCameraController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_BM29, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_GUCO, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_0WM8, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x06C0);
		}

		// Class Engine.HUD
		TEST_METHOD(Class__Engine__HUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_UDZJ, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_1LBF, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_DVBP, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_VK0C, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0418);
		}

		// Class Engine.DebugCameraHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0418);
		}

		// Class Engine.DebugDrawService
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// Class Engine.DecalActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0330);
		}

		// Class Engine.DecalComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_7J4Y, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_7PK5, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0280);
		}

		// Class Engine.DefaultPawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_9XE2, 0x03A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x03B0);
		}

		// Class Engine.PhysicsVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_TV54, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0370);
		}

		// Class Engine.DefaultPhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0370);
		}

		// Class Engine.DemoNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_OBXQ, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1938);
		}

		// Class Engine.DemoNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_RTZB, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_XWK1, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_ULKP, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_6ZUU, 0x0BC9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x0D30);
		}

		// Class Engine.PendingNetGame
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_9QEG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_KAIU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C8);
		}

		// Class Engine.DemoPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C8);
		}

		// Class Engine.DestructibleInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// Class Engine.TextureLODSettings
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// Class Engine.DeviceProfile
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_GNX7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_9P00, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0098);
		}

		// Class Engine.DeviceProfileManager
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_S59Q, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00A8);
		}

		// Class Engine.DialogueSoundWaveProxy
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_ZRO3, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x00C8);
		}

		// Class Engine.DialogueVoice
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_WEGF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_PO2Q, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// Class Engine.DialogueWave
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_WBHX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// Class Engine.Light
		TEST_METHOD(Class__Engine__Light)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_NV1A, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0338);
		}

		// Class Engine.DirectionalLight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0338);
		}

		// Class Engine.LightComponentBase
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_8QLE, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0260);
		}

		// Class Engine.LightComponent
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, Temperature, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_NU1A, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_G4CH, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_ZTTU, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_RGPD, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_M9TH, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_KD9J, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_E652, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_EUH3, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_W2PW, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0360);
		}

		// Class Engine.DirectionalLightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_KAOK, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_Z7DS, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_MA15, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_AWHO, 0x03C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03D0);
		}

		// Class Engine.Distribution
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_FHIN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// Class Engine.DistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_7IGV, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// Class Engine.DistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_TM0Y, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// Class Engine.DistributionFloatConstantCurve
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// Class Engine.DistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_B73E, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// Class Engine.DistributionFloatParticleParameter
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// Class Engine.DistributionFloatUniform
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// Class Engine.DistributionFloatUniformCurve
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// Class Engine.DistributionVector
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_QR8C, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// Class Engine.DistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_J5FD, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_19WR, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// Class Engine.DistributionVectorConstantCurve
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_HREQ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_P6L8, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// Class Engine.DistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_MW7F, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// Class Engine.DistributionVectorParticleParameter
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// Class Engine.DistributionVectorUniform
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_U527, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_WJCE, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// Class Engine.DistributionVectorUniformCurve
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_VYJ5, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_QTV3, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_WRTB, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// Class Engine.DocumentationActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_1J29, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0330);
		}

		// Class Engine.DPICustomScalingRule
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// Class Engine.DrawFrustumComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_PQ00, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_G13X, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0580);
		}

		// Class Engine.SphereComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, SphereRadius, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_1L5F, 0x0574);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0580);
		}

		// Class Engine.DrawSphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0580);
		}

		// Class Engine.EdGraph
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_JFUN, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// Class Engine.EdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_62Y2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_0DUR, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_FGEM, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_LST1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// Class Engine.EdGraphNode_Documentation
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// Class Engine.EdGraphPin_Deprecated
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_YE1R, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0120);
		}

		// Class Engine.EdGraphSchema
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// Class Engine.Emitter
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_TQ4J, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0378);
		}

		// Class Engine.EmitterCameraLensEffectBase
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_4ZV3, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_N1RG, 0x03DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x03E0);
		}

		// Class Engine.EngineBaseTypes
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// Class Engine.EngineHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// Class Engine.LocalMessage
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// Class Engine.EngineMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// Class Engine.EngineTypes
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// Class Engine.ExponentialHeightFog
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_MEWW, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0338);
		}

		// Class Engine.ExponentialHeightFogComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_WP1U, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_98ZZ, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_U0A6, 0x02C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02D0);
		}

		// Class Engine.Exporter
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_F5F7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_WAN3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// Class Engine.FloatingPawnMovement
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_1S8A, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0190);
		}

		// Class Engine.Font
		TEST_METHOD(Class__Engine__Font)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_VFYB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_6IE6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_XDUB, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_HM9Y, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// Class Engine.FontFace
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_RISG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_69AU, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// Class Engine.FontImportOptions
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// Class Engine.ForceFeedbackAttenuation
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00C8);
		}

		// Class Engine.ForceFeedbackComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_VDGO, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_GAKX, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x0310);
		}

		// Class Engine.ForceFeedbackEffect
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_30DA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// Class Engine.GameEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_2AF6, 0x0CB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0CF8);
		}

		// Class Engine.GameModeBase
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_J7LR, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x03C8);
		}

		// Class Engine.GameMode
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_TVVT, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_HIJD, 0x0409);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0410);
		}

		// Class Engine.GameNetworkManager
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_UEIP, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_NDLU, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_YI4L, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_PCTB, 0x03AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x03B8);
		}

		// Class Engine.GameplayStatics
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// Class Engine.GameSession
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_OA4O, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0340);
		}

		// Class Engine.GameStateBase
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_G21L, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_VDYC, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0368);
		}

		// Class Engine.GameState
		TEST_METHOD(Class__Engine__GameState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_85TZ, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0388);
		}

		// Class Engine.GameUserSettings
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_DVA8, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, version, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_D4J1, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_8MOA, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_TN5W, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_0DOR, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_7HTL, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0118);
		}

		// Class Engine.SpotLight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0340);
		}

		// Class Engine.GeneratedMeshAreaLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0340);
		}

		// Class Engine.HapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// Class Engine.HapticFeedbackEffect_Buffer
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_99HY, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// Class Engine.HapticFeedbackEffect_Curve
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0118);
		}

		// Class Engine.HapticFeedbackEffect_SoundWave
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_LR4F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// Class Engine.HealthSnapshotBlueprintLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// Class Engine.HLODProxy
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0038);
		}

		// Class Engine.AmbisonicsSubmixSettingsBase
		TEST_METHOD(Class__Engine__AmbisonicsSubmixSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsSubmixSettingsBase, 0x0028);
		}

		// Class Engine.SpatializationPluginSourceSettingsBase
		TEST_METHOD(Class__Engine__SpatializationPluginSourceSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// Class Engine.OcclusionPluginSourceSettingsBase
		TEST_METHOD(Class__Engine__OcclusionPluginSourceSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// Class Engine.ReverbPluginSourceSettingsBase
		TEST_METHOD(Class__Engine__ReverbPluginSourceSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// Class Engine.ImportanceSamplingLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// Class Engine.ImportantToggleSettingInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// Class Engine.InGameAdManager
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_6YKA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// Class Engine.InheritableComponentHandler
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// Class Engine.InputDelegateBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// Class Engine.InputActionDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// Class Engine.InputAxisDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// Class Engine.InputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// Class Engine.InputComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_VK7R, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_8PAQ, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0178);
		}

		// Class Engine.InputKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// Class Engine.InputSettings
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_IRJW, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_9F3M, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_NEBS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00E0);
		}

		// Class Engine.InputTouchDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// Class Engine.InputVectorAxisDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// Class Engine.Interface_AssetUserData
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// Class Engine.Interface_CollisionDataProvider
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// Class Engine.Interface_PostProcessVolume
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// Class Engine.Interface_PreviewMeshProvider
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// Class Engine.InterpCurveEdSetup
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_XA9Y, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// Class Engine.InterpData
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_RTJA, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// Class Engine.InterpFilter
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// Class Engine.InterpFilter_Classes
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// Class Engine.InterpFilter_Custom
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// Class Engine.InterpGroup
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_IJG1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_NKAM, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// Class Engine.InterpGroupCamera
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_7G8J, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// Class Engine.InterpGroupDirector
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// Class Engine.InterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// Class Engine.InterpGroupInstCamera
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// Class Engine.InterpGroupInstDirector
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// Class Engine.InterpToMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_8LNT, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_L9U1, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_WWRB, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_HTSN, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x01D0);
		}

		// Class Engine.InterpTrack
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_LQKM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_M32H, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_MA55, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// Class Engine.InterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_HTMF, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// Class Engine.InterpTrackAnimControl
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_U1PD, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// Class Engine.InterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_GE5F, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// Class Engine.InterpTrackAudioMaster
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// Class Engine.InterpTrackBoolProp
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// Class Engine.InterpTrackColorProp
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// Class Engine.InterpTrackColorScale
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// Class Engine.InterpTrackDirector
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_UIE1, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// Class Engine.InterpTrackEvent
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_9F0Z, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// Class Engine.InterpTrackFade
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_KCMU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_ECLF, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// Class Engine.InterpTrackFloatAnimBPParam
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_NFWQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// Class Engine.InterpTrackFloatMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// Class Engine.InterpTrackFloatParticleParam
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// Class Engine.InterpTrackFloatProp
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// Class Engine.InterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// Class Engine.InterpTrackInstAnimControl
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_QGW3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// Class Engine.InterpTrackInstAudioMaster
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// Class Engine.InterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0038);
		}

		// Class Engine.InterpTrackInstBoolProp
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_JIY7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, BoolProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_9OG6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0050);
		}

		// Class Engine.InterpTrackInstColorProp
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_4J9T, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_LV4C, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0048);
		}

		// Class Engine.InterpTrackInstColorScale
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// Class Engine.InterpTrackInstDirector
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// Class Engine.InterpTrackInstEvent
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_A88L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// Class Engine.InterpTrackInstFade
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// Class Engine.InterpTrackInstFloatAnimBPParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_Z702, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// Class Engine.InterpTrackInstFloatMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// Class Engine.InterpTrackInstFloatParticleParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_3X12, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// Class Engine.InterpTrackInstFloatProp
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_EBQB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_D8KV, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0048);
		}

		// Class Engine.InterpTrackInstLinearColorProp
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_RTCM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0050);
		}

		// Class Engine.InterpTrackInstMove
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// Class Engine.InterpTrackInstParticleReplay
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_0TI2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// Class Engine.InterpTrackInstSlomo
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_28QU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// Class Engine.InterpTrackInstSound
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_EFZR, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// Class Engine.InterpTrackInstToggle
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_0AD0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_E3EG, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// Class Engine.InterpTrackInstVectorMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// Class Engine.InterpTrackInstVectorProp
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_FTRP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_LYAC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0050);
		}

		// Class Engine.InterpTrackInstVisibility
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_PO22, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// Class Engine.InterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_VTW7, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// Class Engine.InterpTrackLinearColorProp
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// Class Engine.InterpTrackMove
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_RYJU, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_6Y96, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// Class Engine.InterpTrackMoveAxis
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_IVQX, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// Class Engine.InterpTrackParticleReplay
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// Class Engine.InterpTrackSlomo
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// Class Engine.InterpTrackSound
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_BBBG, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// Class Engine.InterpTrackToggle
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_R6RL, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// Class Engine.InterpTrackVectorMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// Class Engine.InterpTrackVectorProp
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// Class Engine.InterpTrackVisibility
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_93HS, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// Class Engine.IntSerialization
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_85GU, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_GOR0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_XLGD, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_KE3Q, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// Class Engine.KillZVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0370);
		}

		// Class Engine.KismetArrayLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// Class Engine.KismetGuidLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// Class Engine.KismetInputLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// Class Engine.KismetInternationalizationLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// Class Engine.KismetMaterialLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// Class Engine.KismetMathLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// Class Engine.KismetNodeHelperLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// Class Engine.KismetRenderingLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// Class Engine.KismetStringLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// Class Engine.KismetStringTableLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// Class Engine.KismetSystemLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// Class Engine.KismetTextLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// Class Engine.Layer
		TEST_METHOD(Class__Engine__Layer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_O95E, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// Class Engine.Level
		TEST_METHOD(Class__Engine__Level)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_NAH8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_WBTK, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, bIsLightingScenario, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_9OGV, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_0QQZ, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_9A7I, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_PLJA, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_LST3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0288);
		}

		// Class Engine.LevelActorContainer
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// Class Engine.LevelBounds
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_T8YQ, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0330);
		}

		// Class Engine.LevelScriptActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_K4PY, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0330);
		}

		// Class Engine.LevelScriptBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00E0);
		}

		// Class Engine.World
		TEST_METHOD(Class__Engine__World)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_O21F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_904Z, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_I4EL, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_QFIT, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_NI2J, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_WDGL, 0x07EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0868);
		}

		// Class Engine.LevelStreaming
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_PNEE, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_XI9B, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_E3ZA, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_NJ2J, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0140);
		}

		// Class Engine.LevelStreamingAlwaysLoaded
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0140);
		}

		// Class Engine.LevelStreamingDynamic
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingDynamic, UnknownData_YLP6, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// Class Engine.LevelStreamingPersistent
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0140);
		}

		// Class Engine.LevelStreamingVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_U0MF, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_6EU7, 0x0375);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0378);
		}

		// Class Engine.LightmappedSurfaceCollection
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// Class Engine.LightMapTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_MTBS, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F0);
		}

		// Class Engine.LightmassCharacterIndirectDetailVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0360);
		}

		// Class Engine.LightmassImportanceVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0360);
		}

		// Class Engine.LightmassPortal
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0330);
		}

		// Class Engine.LightmassPortalComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0240);
		}

		// Class Engine.LightmassPrimitiveSettingsObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// Class Engine.LineBatchComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_IBUJ, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x05A0);
		}

		// Class Engine.LocalLightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_WA30, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_0EGM, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x0380);
		}

		// Class Engine.LocalPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_CR3K, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_O1LG, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_1CJC, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_YFWI, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_726I, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x01C8);
		}

		// Class Engine.LODActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_YXPZ, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_9WGZ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_6M0P, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x0378);
		}

		// Class Engine.MapBuildDataRegistry
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_MU72, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x01C8);
		}

		// Class Engine.Material
		TEST_METHOD(Class__Engine__Material)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_S0NC, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_V584, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WP3O, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_6UIG, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Y2ED, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_E2NX, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_OL6A, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Y5UM, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_4PFP, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DSAV, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JDLD, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1HHT, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_M6YG, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0LHC, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_RLRY, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KPLK, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Expressions, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialFunctionInfos, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialParameterCollectionInfos, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1E9K, 0x01EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_I0M7, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableOutputAlpha, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LY4M, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1BIL, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedQualityLevelsUsed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_H41D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ExpressionTextureReferences, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x02C0);
		}

		// Class Engine.MaterialBillboardComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, UnknownData_2CRD, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0570);
		}

		// Class Engine.MaterialExpressionAbs
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_XDT7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// Class Engine.MaterialExpressionActorPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionAdd
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_QZUR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_F395, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0078);
		}

		// Class Engine.MaterialExpressionAntialiasedTextureMask
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_T5B2, 0x011D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0120);
		}

		// Class Engine.MaterialExpressionAppendVector
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_PJNN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_COAJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0070);
		}

		// Class Engine.MaterialExpressionArccosine
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_8ORR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// Class Engine.MaterialExpressionArccosineFast
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_2OIV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// Class Engine.MaterialExpressionArcsine
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_HDPU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// Class Engine.MaterialExpressionArcsineFast
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_HNKP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// Class Engine.MaterialExpressionArctangent
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_W7AK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// Class Engine.MaterialExpressionArctangent2
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_1J3P, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_NOSE, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0070);
		}

		// Class Engine.MaterialExpressionArctangent2Fast
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_QYZ1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_J006, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0070);
		}

		// Class Engine.MaterialExpressionArctangentFast
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_9YVG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// Class Engine.MaterialExpressionAtmosphericFogColor
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_KX6W, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// Class Engine.MaterialExpressionAtmosphericLightColor
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// Class Engine.MaterialExpressionAtmosphericLightVector
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// Class Engine.MaterialExpressionBentNormalCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_4YF8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionBlackBody
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_RKGU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// Class Engine.MaterialExpressionBlendMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_CRXL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_E14S, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_AZWS, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_64BK, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x00A0);
		}

		// Class Engine.MaterialExpressionBreakMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_5GBW, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0060);
		}

		// Class Engine.MaterialExpressionBumpOffset
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_8MC7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_WV3X, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_JQEO, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_C21L, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0098);
		}

		// Class Engine.MaterialExpressionCameraPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionCameraVectorWS
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// Class Engine.MaterialExpressionCeil
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_6TEJ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// Class Engine.MaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// Class Engine.MaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0068);
		}

		// Class Engine.MaterialExpressionChannelMaskParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_SUEP, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_TH7B, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// Class Engine.MaterialExpressionClamp
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_6K6Q, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_G23N, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_34OW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_H0KB, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_3OWY, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0098);
		}

		// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_7L74, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionCollectionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionComment
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_A4C4, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// Class Engine.MaterialExpressionComponentMask
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_KIB2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_NN6S, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0060);
		}

		// Class Engine.MaterialExpressionConstant
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_6599, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// Class Engine.MaterialExpressionConstant2Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// Class Engine.MaterialExpressionConstant3Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// Class Engine.MaterialExpressionConstant4Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// Class Engine.MaterialExpressionConstantBiasScale
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_IFNC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// Class Engine.MaterialExpressionCosine
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_T1K9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_15QE, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0060);
		}

		// Class Engine.MaterialExpressionCrossProduct
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_CO7J, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_2KI9, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0070);
		}

		// Class Engine.MaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_JS3T, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionCurveAtlasRowParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_8Y6I, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// Class Engine.MaterialExpressionCustom
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_RB4V, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0078);
		}

		// Class Engine.MaterialExpressionDDX
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_PEE7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// Class Engine.MaterialExpressionDDY
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_8AJR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// Class Engine.MaterialExpressionDecalDerivative
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// Class Engine.MaterialExpressionDecalLifetimeOpacity
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// Class Engine.MaterialExpressionDecalMipmapLevel
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_X9XL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// Class Engine.MaterialExpressionDepthFade
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_Y3H9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_07OM, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0078);
		}

		// Class Engine.MaterialExpressionDepthOfFieldFunction
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_1112, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_NW5P, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0060);
		}

		// Class Engine.MaterialExpressionDeriveNormalZ
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_FHR2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// Class Engine.MaterialExpressionDesaturation
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_H6WV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_ILED, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0080);
		}

		// Class Engine.MaterialExpressionDistance
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_9QPG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_E5KW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0070);
		}

		// Class Engine.MaterialExpressionDistanceCullFade
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// Class Engine.MaterialExpressionDistanceFieldGradient
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_9GTH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// Class Engine.MaterialExpressionDistanceToNearestSurface
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_VSMM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// Class Engine.MaterialExpressionDivide
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_7HHZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_6S1S, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0078);
		}

		// Class Engine.MaterialExpressionDotProduct
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_MKWH, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_K72F, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0070);
		}

		// Class Engine.MaterialExpressionDynamicParameter
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_WWXM, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// Class Engine.MaterialExpressionEyeAdaptation
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// Class Engine.MaterialExpressionFeatureLevelSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_BZVF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_Z3VO, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00B8);
		}

		// Class Engine.MaterialExpressionFloor
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_HFMV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// Class Engine.MaterialExpressionFmod
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_1CTI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_QBWA, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0070);
		}

		// Class Engine.MaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_O42T, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// Class Engine.MaterialExpressionFontSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// Class Engine.MaterialExpressionFrac
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_M5MV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// Class Engine.MaterialExpressionFresnel
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_7KL8, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_5XEQ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_02PZ, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_B3AT, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_DUXY, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0098);
		}

		// Class Engine.MaterialExpressionFunctionInput
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_2FYX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_CKAH, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_AZ7G, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_4LWZ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00D0);
		}

		// Class Engine.MaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_268R, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_6VXC, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_34ED, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_ORGJ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0090);
		}

		// Class Engine.MaterialExpressionGetMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_0O9Y, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0070);
		}

		// Class Engine.MaterialExpressionGIReplace
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_EEET, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_URPS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_G2IK, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0088);
		}

		// Class Engine.MaterialExpressionIf
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_RZGK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_3IAG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_TIN7, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_VSKK, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_JTKR, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_K31R, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00C8);
		}

		// Class Engine.MaterialExpressionLightmapUVs
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// Class Engine.MaterialExpressionLightmassReplace
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_781N, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_T4DT, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0070);
		}

		// Class Engine.MaterialExpressionLightVector
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// Class Engine.MaterialExpressionLinearInterpolate
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_4IS3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_UVAW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_QIOI, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_GN3I, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0098);
		}

		// Class Engine.MaterialExpressionLogarithm10
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_CUWG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// Class Engine.MaterialExpressionLogarithm2
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_B2M0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// Class Engine.MaterialExpressionMakeMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_POW4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_TTSN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_A5OY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_HRTG, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZTX1, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_V6IP, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Y2KY, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_477S, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FQW9, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_7VMM, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_7U37, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_USSP, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XT9C, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_3V67, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FERC, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KUWG, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9JY9, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_M3JK, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0298);
		}

		// Class Engine.MaterialExpressionMaterialAttributeLayers
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_ML9D, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_5GXZ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_IWTJ, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00F0);
		}

		// Class Engine.MaterialExpressionMaterialFunctionCall
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// Class Engine.MaterialExpressionMaterialLayerOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0090);
		}

		// Class Engine.MaterialExpressionMaterialProxyReplace
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_L8SE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_XNO0, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0070);
		}

		// Class Engine.MaterialExpressionMax
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_VP2Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_XHUN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0078);
		}

		// Class Engine.MaterialExpressionMin
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_2TOR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_3BL2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0078);
		}

		// Class Engine.MaterialExpressionMultiply
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_PHF6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_K1YF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0078);
		}

		// Class Engine.MaterialExpressionNoise
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_CTTJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_4KPU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_LWKQ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_NNBK, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_W5VD, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0098);
		}

		// Class Engine.MaterialExpressionNormalize
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_CKBN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// Class Engine.MaterialExpressionObjectBounds
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// Class Engine.MaterialExpressionObjectOrientation
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// Class Engine.MaterialExpressionObjectPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionObjectRadius
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// Class Engine.MaterialExpressionOneMinus
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_WI39, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// Class Engine.MaterialExpressionPanner
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_SPL8, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_7ZPO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_E15A, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_TJG8, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0098);
		}

		// Class Engine.MaterialExpressionParticleColor
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleDirection
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleMacroUV
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleMotionBlurFade
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// Class Engine.MaterialExpressionParticlePositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleRadius
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleRandom
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleRelativeTime
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleSize
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleSpeed
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleSubUV
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_8TB2, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0100);
		}

		// Class Engine.MaterialExpressionPerInstanceFadeAmount
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// Class Engine.MaterialExpressionPerInstanceRandom
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// Class Engine.MaterialExpressionPixelDepth
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// Class Engine.MaterialExpressionPixelNormalWS
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// Class Engine.MaterialExpressionPower
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_OHSM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_AJZ8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_YP0E, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0078);
		}

		// Class Engine.MaterialExpressionPrecomputedAOMask
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// Class Engine.MaterialExpressionPreSkinnedNormal
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// Class Engine.MaterialExpressionPreSkinnedPosition
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// Class Engine.MaterialExpressionPreviousFrameSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_P8W3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_DSNG, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0070);
		}

		// Class Engine.MaterialExpressionQualitySwitch
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_IIKR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_8CUY, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A0);
		}

		// Class Engine.MaterialExpressionReflectionVectorWS
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_47UB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_YZX8, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0060);
		}

		// Class Engine.MaterialExpressionReroute
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_I4P3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// Class Engine.MaterialExpressionRotateAboutAxis
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_O7RX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_4T6S, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_2H4F, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_LYYO, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_LQI5, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x00A8);
		}

		// Class Engine.MaterialExpressionRotator
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_1KGU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_ZPJO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0080);
		}

		// Class Engine.MaterialExpressionRound
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_9D5G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// Class Engine.MaterialExpressionSaturate
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_GGRG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// Class Engine.MaterialExpressionSceneColor
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_6LJM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_66IW, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_XM99, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0080);
		}

		// Class Engine.MaterialExpressionSceneDepth
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_Y2JM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_XTOR, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_NI3N, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0080);
		}

		// Class Engine.MaterialExpressionSceneTexelSize
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// Class Engine.MaterialExpressionSceneTexture
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_YAWA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_9LQ8, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0060);
		}

		// Class Engine.MaterialExpressionScreenPosition
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// Class Engine.MaterialExpressionSetMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// Class Engine.MaterialExpressionShadingPathSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_AI6W, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_T2I6, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x00A0);
		}

		// Class Engine.MaterialExpressionSign
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_UZDF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// Class Engine.MaterialExpressionSine
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_M5PM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_LM3M, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0060);
		}

		// Class Engine.MaterialExpressionSobol
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_0EMV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_0SI6, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_LEDG, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_LWC2, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0098);
		}

		// Class Engine.MaterialExpressionSpeedTree
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_ANGE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_QSX4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_Q6OW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_0007, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_7UC4, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_BVAI, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00B0);
		}

		// Class Engine.MaterialExpressionSphereMask
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_HJ87, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_QY77, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_JGWF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_LOFQ, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x00A8);
		}

		// Class Engine.MaterialExpressionSphericalParticleOpacity
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_Q44Q, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_1GOM, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0060);
		}

		// Class Engine.MaterialExpressionSquareRoot
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_ITBU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// Class Engine.MaterialExpressionStaticBool
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_KY5T, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// Class Engine.MaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_SM23, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionStaticComponentMaskParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_VX8V, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_A3B1, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0078);
		}

		// Class Engine.MaterialExpressionStaticSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_8NLD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_T600, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_1EW3, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_4PKI, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0090);
		}

		// Class Engine.MaterialExpressionStaticSwitchParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_Q0ZY, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_YKJT, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0090);
		}

		// Class Engine.MaterialExpressionSubtract
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_IH1K, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_A38Y, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0078);
		}

		// Class Engine.MaterialExpressionTangent
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_CT4O, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_B3N6, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0060);
		}

		// Class Engine.MaterialExpressionTangentOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_6QND, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionTemporalSobol
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_V3J6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_9B3Y, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_YMN6, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0080);
		}

		// Class Engine.MaterialExpressionTextureCoordinate
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_91I4, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// Class Engine.MaterialExpressionTextureObject
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0050);
		}

		// Class Engine.MaterialExpressionTextureObjectParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0118);
		}

		// Class Engine.MaterialExpressionTextureProperty
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_5ZHD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_JCO0, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0060);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterCube
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0118);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterSubUV
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_5PPT, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0120);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterVolume
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0118);
		}

		// Class Engine.MaterialExpressionTime
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_832A, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// Class Engine.MaterialExpressionTransform
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_TAKX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_5TU4, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0060);
		}

		// Class Engine.MaterialExpressionTransformPosition
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_HQTG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_V0E2, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0060);
		}

		// Class Engine.MaterialExpressionTruncate
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_Q9FV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// Class Engine.MaterialExpressionTwoSidedSign
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// Class Engine.MaterialExpressionVectorNoise
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_51BE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_35CR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_IHTE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// Class Engine.MaterialExpressionVertexColor
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// Class Engine.MaterialExpressionVertexInterpolator
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_UXLY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0068);
		}

		// Class Engine.MaterialExpressionVertexNormalWS
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// Class Engine.MaterialExpressionViewProperty
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_IXWW, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// Class Engine.MaterialExpressionViewSize
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// Class Engine.MaterialExpressionWorldPosition
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_VKWC, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// Class Engine.MaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_XUAK, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// Class Engine.MaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_HLHF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, FunctionExpressions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_GBL1, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0070);
		}

		// Class Engine.MaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00B0);
		}

		// Class Engine.MaterialFunctionMaterialLayer
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0070);
		}

		// Class Engine.MaterialFunctionMaterialLayerInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00B0);
		}

		// Class Engine.MaterialFunctionMaterialLayerBlend
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0070);
		}

		// Class Engine.MaterialFunctionMaterialLayerBlendInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00B0);
		}

		// Class Engine.MaterialInstanceActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0338);
		}

		// Class Engine.MaterialInstanceDynamic
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_URRA, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0238);
		}

		// Class Engine.MaterialParameterCollection
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_LWOB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0068);
		}

		// Class Engine.MaterialParameterCollectionInstance
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_84B5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_SKS7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F0);
		}

		// Class Engine.MatineeActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_98FZ, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_5FWV, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_DF06, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_6IGN, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_PWNT, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_ILI1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_Q40I, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_2P4O, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x03D0);
		}

		// Class Engine.MatineeActorCameraAnim
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x03D8);
		}

		// Class Engine.MatineeAnimInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// Class Engine.MatineeInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// Class Engine.MeshMergeCullingVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0360);
		}

		// Class Engine.MeshSimplificationSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// Class Engine.MeshVertexPainterKismetLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// Class Engine.MicroTransactionBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// Class Engine.ModelComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_855Y, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_I4HR, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x05A0);
		}

		// Class Engine.MorphTarget
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_AJU8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// Class Engine.NavAgentInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// Class Engine.NavAreaBase
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_3N2P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// Class Engine.NavCollisionBase
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_SPJA, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// Class Engine.NavEdgeProviderInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// Class Engine.NavigationDataChunk
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// Class Engine.NavigationDataInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// Class Engine.NavigationObjectBase
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_2GDL, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_IOCT, 0x0349);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0350);
		}

		// Class Engine.NavigationSystemBase
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// Class Engine.NavigationSystem
		TEST_METHOD(Class__Engine__NavigationSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_SW96, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystem, 0x0038);
		}

		// Class Engine.NavigationSystemConfig
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_Y0NX, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0048);
		}

		// Class Engine.NullNavSysConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0048);
		}

		// Class Engine.NavLinkDefinition
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_4NK7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// Class Engine.NavPathObserverInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// Class Engine.NavRelevantInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// Class Engine.SimulatedClientNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1918);
		}

		// Class Engine.NetworkPredictionInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// Class Engine.NetworkSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_YDPL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_U1PM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0048);
		}

		// Class Engine.NodeMappingContainer
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// Class Engine.NodeMappingProviderInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// Class Engine.Note
		TEST_METHOD(Class__Engine__Note)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0328);
		}

		// Class Engine.ObjectLibrary
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_QUHL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_73Q3, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// Class Engine.ObjectReferencer
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// Class Engine.PackageMapClient
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_3HJP, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0380);
		}

		// Class Engine.PainCausingVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_QXUZ, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_NEPH, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_7NVY, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0398);
		}

		// Class Engine.ParticleEmitter
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_PTSG, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_ENSR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_2MCI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x0158);
		}

		// Class Engine.ParticleEventManager
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0328);
		}

		// Class Engine.ParticleLODLevel
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_FXIH, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_5A0U, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// Class Engine.ParticleModule
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_XOJO, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_JWNK, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// Class Engine.ParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_PXK9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// Class Engine.ParticleModuleAcceleration
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_MQQA, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0090);
		}

		// Class Engine.ParticleModuleAccelerationConstant
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_5AXJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// Class Engine.ParticleModuleAccelerationDrag
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0078);
		}

		// Class Engine.ParticleModuleAccelerationDragScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0078);
		}

		// Class Engine.ParticleModuleAccelerationOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0088);
		}

		// Class Engine.ParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// Class Engine.ParticleModuleAttractorLine
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00B8);
		}

		// Class Engine.ParticleModuleAttractorParticle
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_S87W, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_3H6F, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_OKI1, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_0K84, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C0);
		}

		// Class Engine.ParticleModuleAttractorPoint
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_0KGR, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00F8);
		}

		// Class Engine.ParticleModuleAttractorPointGravity
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0080);
		}

		// Class Engine.ParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// Class Engine.ParticleModuleBeamModifier
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_2OIS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_DWK5, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_I3V1, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0120);
		}

		// Class Engine.ParticleModuleBeamNoise
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_8M6G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_11BR, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_HVQD, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_1P26, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_AGBZ, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_RAAH, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_WGVO, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_R4SH, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x01B8);
		}

		// Class Engine.ParticleModuleBeamSource
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_YG0W, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_9KUE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_F6Q8, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_VBKQ, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_YQWZ, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_TTHD, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0138);
		}

		// Class Engine.ParticleModuleBeamTarget
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_0UFQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_GFCG, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_JQJY, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_1KPY, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_KBCU, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_DF35, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0138);
		}

		// Class Engine.ParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// Class Engine.ParticleModuleCameraOffset
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_Z9UK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_SDDK, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0070);
		}

		// Class Engine.ParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// Class Engine.ParticleModuleCollision
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_D1F8, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_81D1, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_HWOE, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_1CAQ, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_OKTA, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_BK5L, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x01B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x01B8);
		}

		// Class Engine.ParticleModuleCollisionGPU
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_ZZTU, 0x00B6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00B8);
		}

		// Class Engine.ParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// Class Engine.ParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_IVCN, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00C0);
		}

		// Class Engine.ParticleModuleColor_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00E0);
		}

		// Class Engine.ParticleModuleColorOverLife
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_PGNV, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00C0);
		}

		// Class Engine.ParticleModuleColorScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_HBEL, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00C0);
		}

		// Class Engine.ParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// Class Engine.ParticleModuleEventGenerator
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// Class Engine.ParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_6250, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// Class Engine.ParticleModuleEventReceiverKillParticles
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_RZAL, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// Class Engine.ParticleModuleEventReceiverSpawn
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_KK5J, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_QTJY, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00E8);
		}

		// Class Engine.ParticleModuleEventSendToGame
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// Class Engine.ParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// Class Engine.ParticleModuleKillBox
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_J3TL, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00D8);
		}

		// Class Engine.ParticleModuleKillHeight
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_N2QW, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0070);
		}

		// Class Engine.ParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// Class Engine.ParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0068);
		}

		// Class Engine.ParticleModuleLifetime_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// Class Engine.ParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_Z8AV, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_O24Z, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_LXYD, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0140);
		}

		// Class Engine.ParticleModuleLight_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0160);
		}

		// Class Engine.ParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// Class Engine.ParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0088);
		}

		// Class Engine.ParticleModuleLocation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A8);
		}

		// Class Engine.ParticleModuleLocationBoneSocket
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_MIQ1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_VOP8, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_Z09V, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_W9GC, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_9NS0, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// Class Engine.ParticleModuleLocationDirect
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0170);
		}

		// Class Engine.ParticleModuleLocationEmitter
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_6H1C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_FSPL, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_QZD2, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_2G3O, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// Class Engine.ParticleModuleLocationEmitterDirect
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// Class Engine.ParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_KF22, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00C0);
		}

		// Class Engine.ParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_MIB4, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_3GWC, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0140);
		}

		// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0160);
		}

		// Class Engine.ParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00F8);
		}

		// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0118);
		}

		// Class Engine.ParticleModuleLocationPrimitiveTriangle
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0128);
		}

		// Class Engine.ParticleModuleLocationSkelVertSurface
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_BUCA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_2I4N, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_8S7Q, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_3ST4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// Class Engine.ParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0088);
		}

		// Class Engine.ParticleModuleLocationWorldOffset_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A8);
		}

		// Class Engine.ParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshMaterial
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// Class Engine.ParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_0BRZ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0088);
		}

		// Class Engine.ParticleModuleMeshRotation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A8);
		}

		// Class Engine.ParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0080);
		}

		// Class Engine.ParticleModuleMeshRotationRate_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x00A0);
		}

		// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0080);
		}

		// Class Engine.ParticleModuleMeshRotationRateOverLife
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_MU7X, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0088);
		}

		// Class Engine.ParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_MBT0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// Class Engine.ParticleModuleOrbit
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_YFOZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_3Y68, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_6I60, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_UD1D, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0148);
		}

		// Class Engine.ParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// Class Engine.ParticleModuleOrientationAxisLock
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_9MPA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// Class Engine.ParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// Class Engine.ParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_INGV, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// Class Engine.ParticleModuleParameterDynamic_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// Class Engine.ParticleModulePivotOffset
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// Class Engine.ParticleModuleRequired
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_D2Q3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_Q8W3, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_AKSC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_QBNS, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_GUBB, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_HS5A, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_L93P, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_P1PR, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_TN9R, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_LGDH, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_YVZ2, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_OQBM, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_MKFU, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_3YE9, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_C1GL, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_RJ6T, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0170);
		}

		// Class Engine.ParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0068);
		}

		// Class Engine.ParticleModuleRotation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleRotationOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_YLXL, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0070);
		}

		// Class Engine.ParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0068);
		}

		// Class Engine.ParticleModuleRotationRate_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleRotationRateMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0068);
		}

		// Class Engine.ParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// Class Engine.ParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0080);
		}

		// Class Engine.ParticleModuleSize_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x00A0);
		}

		// Class Engine.ParticleModuleSizeMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_Z2UV, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0088);
		}

		// Class Engine.ParticleModuleSizeScale
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_587B, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0088);
		}

		// Class Engine.ParticleModuleSizeScaleBySpeed
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// Class Engine.ParticleModuleSourceMovement
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0080);
		}

		// Class Engine.ParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_GMLJ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// Class Engine.ParticleModuleSpawn
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_5RNL, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_EJTF, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x0100);
		}

		// Class Engine.ParticleModuleSpawnPerUnit
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_HLON, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_PHOI, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_94ST, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0088);
		}

		// Class Engine.ParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// Class Engine.ParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_C2LK, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0078);
		}

		// Class Engine.ParticleModuleSubUVMovie
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_YI8K, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_SRHO, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00C0);
		}

		// Class Engine.ParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// Class Engine.ParticleModuleTrailSource
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_23AI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_FTC7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_T1J5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_HDR9, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0098);
		}

		// Class Engine.ParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// Class Engine.ParticleModuleTypeDataAnimTrail
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_DREY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_1706, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// Class Engine.ParticleModuleTypeDataBeam2
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_X1MR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_CUPC, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_Q8ES, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_K3MY, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_I9QM, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0168);
		}

		// Class Engine.ParticleModuleTypeDataGpu
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_K0Z3, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0460);
		}

		// Class Engine.ParticleModuleTypeDataMesh
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, bUseStaticMeshLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_XJT1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_AKDX, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_YV7Z, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_K5LP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Pitch, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Roll, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Yaw, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_42XR, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_DJ2J, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_Z1RB, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_1RN5, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_B0PF, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00C0);
		}

		// Class Engine.ParticleModuleTypeDataRibbon
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_WRTH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_VS87, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_045J, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_5VIC, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// Class Engine.ParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// Class Engine.ParticleModuleVectorFieldGlobal
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_0CXY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_ZPXB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// Class Engine.ParticleModuleVectorFieldLocal
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_SDO7, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// Class Engine.ParticleModuleVectorFieldRotation
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// Class Engine.ParticleModuleVectorFieldRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_QMJ4, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// Class Engine.ParticleModuleVectorFieldScale
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0070);
		}

		// Class Engine.ParticleModuleVectorFieldScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0070);
		}

		// Class Engine.ParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_FOGU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// Class Engine.ParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00C0);
		}

		// Class Engine.ParticleModuleVelocity_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00E0);
		}

		// Class Engine.ParticleModuleVelocityCone
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_PB8Q, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00B8);
		}

		// Class Engine.ParticleModuleVelocityInheritParent
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0088);
		}

		// Class Engine.ParticleModuleVelocityOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_NXUM, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0090);
		}

		// Class Engine.ParticleSpriteEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x0158);
		}

		// Class Engine.ParticleSystem
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_84JB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_HHKN, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_K1KH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_ZUVR, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_N4L3, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_YY6T, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_3AQ3, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_PSOC, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, bAutoDeactivate, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_E067, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_2AUR, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_QOBS, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxPoolSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_SMRM, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_6U8J, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_N6PU, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0140);
		}

		// Class Engine.ParticleSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_0IRG, 0x0583);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0586);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_AVUP, 0x0587);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_W2I6, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ITZW, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_5UON, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_S719, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_G59P, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_NZTT, 0x06AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_3O13, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x07B0);
		}

		// Class Engine.ParticleSystemReplay
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_BY7X, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// Class Engine.PathFollowingAgentInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// Class Engine.PawnNoiseEmitterComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_HS6K, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_DR6T, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x0118);
		}

		// Class Engine.PhysicalAnimationComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_4JAD, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_1X53, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x0128);
		}

		// Class Engine.PhysicalMaterial
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_IAZT, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_RR1D, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_ROX8, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_QUAW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_UR6Z, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// Class Engine.PhysicalMaterialPropertyBase
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// Class Engine.PhysicsAsset
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_9BH2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_JTIZ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0120);
		}

		// Class Engine.SkeletalBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_0SPE, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0298);
		}

		// Class Engine.PhysicsCollisionHandler
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_WKBT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// Class Engine.RigidBodyBase
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0328);
		}

		// Class Engine.PhysicsConstraintActor
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_94QR, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0348);
		}

		// Class Engine.PhysicsConstraintComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_0D12, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_SP0J, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0440);
		}

		// Class Engine.PhysicsConstraintTemplate
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_KTUP, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x02F8);
		}

		// Class Engine.PhysicsHandleComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_QWGP, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_Y0F3, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_Z33B, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_YF1V, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x01A0);
		}

		// Class Engine.PhysicsSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableAsyncScene, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_6DCU, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_EDSK, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_LDA3, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_1NC6, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_BI6Y, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AsyncSceneSmoothingFactor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_6URM, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0110);
		}

		// Class Engine.PhysicsSpringComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_2JP6, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_UCUP, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0260);
		}

		// Class Engine.PhysicsThruster
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0330);
		}

		// Class Engine.PhysicsThrusterComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0240);
		}

		// Class Engine.SceneCapture
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0330);
		}

		// Class Engine.PlanarReflection
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_N558, 0x0339);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0340);
		}

		// Class Engine.SceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureEveryFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureOnMovement, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_HJYQ, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_4UDZ, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_B015, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02D0);
		}

		// Class Engine.PlanarReflectionComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_BK27, 0x0305);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03B0);
		}

		// Class Engine.PlaneReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0330);
		}

		// Class Engine.PlaneReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x02C0);
		}

		// Class Engine.PlatformEventsComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x0110);
		}

		// Class Engine.PlatformInterfaceWebResponse
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_Q55M, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// Class Engine.PlayerCameraManager
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_JDXO, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_87LM, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_EZBA, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_R71Z, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_WV6M, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_CCIO, 0x239C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x23C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x23C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_KP81, 0x2418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_0T6O, 0x2452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x245C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2464);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_HBMZ, 0x246C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2470);
		}

		// Class Engine.PlayerInput
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_4OOF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_H2DM, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_EA0E, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// Class Engine.PlayerStart
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0358);
		}

		// Class Engine.PlayerStartPIE
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0358);
		}

		// Class Engine.PlayerState
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_OJZI, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_OJKV, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_YEQC, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_DKE8, 0x0357);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_XX7O, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_U1YS, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_LCBE, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_VOKE, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_QL3U, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x03F0);
		}

		// Class Engine.PluginCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_ICYP, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// Class Engine.PointLight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0340);
		}

		// Class Engine.PointLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_3K7D, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0390);
		}

		// Class Engine.Polys
		TEST_METHOD(Class__Engine__Polys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_RE0A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// Class Engine.PoseableMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_BPVL, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0800);
		}

		// Class Engine.PoseAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_GIES, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// Class Engine.PoseWatch
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_NU1B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// Class Engine.PostProcessComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_O18V, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0730);
		}

		// Class Engine.PostProcessVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_9MU6, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_425V, 0x085D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x0860);
		}

		// Class Engine.PrecomputedVisibilityOverrideVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0390);
		}

		// Class Engine.PrecomputedVisibilityVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0360);
		}

		// Class Engine.PreviewCollectionInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// Class Engine.PreviewMeshCollection
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_OS8F, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// Class Engine.PrimaryAssetLabel
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_XJZZ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0070);
		}

		// Class Engine.ProjectileMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_VL6W, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_CEKW, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_C449, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01F0);
		}

		// Class Engine.ProxyLODMeshSimplificationSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// Class Engine.RadialForceActor
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0330);
		}

		// Class Engine.RadialForceComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_WE0S, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_6TJ0, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0270);
		}

		// Class Engine.RectLight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0340);
		}

		// Class Engine.RectLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_V3Y7, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0390);
		}

		// Class Engine.RendererSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_J4C5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2Z59, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_UE0B, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3Z9Q, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0VHO, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Y54Y, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MN5A, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PZXY, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2SIY, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8FTA, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9FQM, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FMVS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_M55O, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_OH80, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Q3Z6, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3BCD, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PYL5, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_17HI, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_O49V, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AB2O, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_81TZ, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_71YJ, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CW7N, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1C4G, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_SOYD, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00D8);
		}

		// Class Engine.RendererOverrideSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_3H3Q, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// Class Engine.ReplicationDriver
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// Class Engine.ReplicationConnectionDriver
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// Class Engine.ReporterBase
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_AXGR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// Class Engine.ReporterGraph
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_OHON, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// Class Engine.ReverbEffect
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// Class Engine.Rig
		TEST_METHOD(Class__Engine__Rig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_GOCF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// Class Engine.RotatingMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_U9P2, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0150);
		}

		// Class Engine.RVOAvoidanceInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// Class Engine.SaveGame
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// Class Engine.Scene
		TEST_METHOD(Class__Engine__Scene)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// Class Engine.SceneCapture2D
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0338);
		}

		// Class Engine.SceneCaptureComponent2D
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_WILZ, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_UVCN, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CaptureSource, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_QZIZ, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_RAHR, 0x07D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_7OBH, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_545O, 0x083D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0840);
		}

		// Class Engine.SceneCaptureComponentCube
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_5QI4, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x0300);
		}

		// Class Engine.SceneCaptureCube
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0338);
		}

		// Class Engine.SCS_Node
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_75E9, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00E0);
		}

		// Class Engine.Selection
		TEST_METHOD(Class__Engine__Selection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_08SQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// Class Engine.ServerStatReplicator
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_VIK8, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutSaturation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_5322, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x03F0);
		}

		// Class Engine.ShadowMapTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_75WW, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F0);
		}

		// Class Engine.SimpleConstructionScript
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_V54A, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// Class Engine.SkeletalMesh
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_TJQV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_Q837, 0x00D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_JJPX, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_CUSD, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x02F8);
		}

		// Class Engine.SkeletalMeshActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_JHBR, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_K5N8, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_VS0S, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x03B0);
		}

		// Class Engine.SkeletalMeshLODSettings
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_PUIZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0048);
		}

		// Class Engine.SkeletalMeshSocket
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_8OE0, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// Class Engine.SkyLight
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_7XVN, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0338);
		}

		// Class Engine.SkyLightComponent
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_TGBM, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_URFX, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_KWBV, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_TY4A, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// Class Engine.SlateBrushAsset
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// Class Engine.SlateTextureAtlasInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// Class Engine.SmokeTestCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// Class Engine.SoundAttenuation
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x02D0);
		}

		// Class Engine.SoundClass
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, UnknownData_RWRL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x0080);
		}

		// Class Engine.SoundConcurrency
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0038);
		}

		// Class Engine.SoundCue
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_O648, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_T7Y2, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0380);
		}

		// Class Engine.SoundEffectSourcePreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// Class Engine.SoundEffectSourcePresetChain
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_2P3L, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// Class Engine.SoundGroups
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_9RI5, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// Class Engine.SoundMix
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_VEWU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0088);
		}

		// Class Engine.SoundNode
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0038);
		}

		// Class Engine.SoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0038);
		}

		// Class Engine.SoundNodeAttenuation
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_7J24, 0x02E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x02F0);
		}

		// Class Engine.SoundNodeBranch
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0040);
		}

		// Class Engine.SoundNodeConcatenator
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0048);
		}

		// Class Engine.SoundNodeDelay
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0040);
		}

		// Class Engine.SoundNodeDialoguePlayer
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_IHDB, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0060);
		}

		// Class Engine.SoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0048);
		}

		// Class Engine.SoundNodeDoppler
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_2VRC, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0040);
		}

		// Class Engine.SoundNodeEnveloper
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_RXX2, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0160);
		}

		// Class Engine.SoundNodeGroupControl
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0048);
		}

		// Class Engine.SoundNodeLooping
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_VHHW, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0040);
		}

		// Class Engine.SoundNodeMature
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0038);
		}

		// Class Engine.SoundNodeMixer
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0048);
		}

		// Class Engine.SoundNodeModulator
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0048);
		}

		// Class Engine.SoundNodeModulatorContinuous
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0078);
		}

		// Class Engine.SoundNodeOscillator
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_IS9X, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_ENCF, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0060);
		}

		// Class Engine.SoundNodeParamCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0050);
		}

		// Class Engine.SoundNodeQualityLevel
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0038);
		}

		// Class Engine.SoundNodeRandom
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_OLZM, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_0WHP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_DNX3, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0070);
		}

		// Class Engine.SoundNodeSoundClass
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0040);
		}

		// Class Engine.SoundNodeSwitch
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0040);
		}

		// Class Engine.SoundNodeWaveParam
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0040);
		}

		// Class Engine.SoundNodeWavePlayer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_XQSZ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0070);
		}

		// Class Engine.SoundSourceBus
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_9SRA, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_KUIY, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0220);
		}

		// Class Engine.SoundSubmix
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChildSubmixes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ParentSubmix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChannelFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_IXKM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_5K4U, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0080);
		}

		// Class Engine.SpectatorPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x03B0);
		}

		// Class Engine.SpectatorPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_1WTV, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0198);
		}

		// Class Engine.SphereReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0338);
		}

		// Class Engine.SphereReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_QZUZ, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x02C0);
		}

		// Class Engine.SplineMeshActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0330);
		}

		// Class Engine.SplineMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_N4Y5, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_SN4S, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_6ZUA, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_8EVT, 0x0681);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0690);
		}

		// Class Engine.SpotLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_TOET, 0x039C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x03A0);
		}

		// Class Engine.SpringArmComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_F6PH, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_QC3I, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_4F02, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x02C0);
		}

		// Class Engine.StaticMeshDescriptions
		TEST_METHOD(Class__Engine__StaticMeshDescriptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshDescriptions, UnknownData_WBPK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescriptions, 0x0038);
		}

		// Class Engine.StaticMesh
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_E7WZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_2GCG, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_R7DW, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0110);
		}

		// Class Engine.StaticMeshSocket
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_CQNP, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// Class Engine.StereoLayerComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_EO2N, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_DEC8, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_3GBF, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02D0);
		}

		// Class Engine.StereoLayerFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// Class Engine.StringTable
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_4GEF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// Class Engine.SubsurfaceProfile
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x0078);
		}

		// Class Engine.SubUVAnimation
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_D1VK, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_UBUP, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0060);
		}

		// Class Engine.TimecodeProvider
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0028);
		}

		// Class Engine.SystemTimeTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_PDHF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0038);
		}

		// Class Engine.TargetPoint
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0328);
		}

		// Class Engine.TextPropertyTestObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// Class Engine.TextRenderActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0330);
		}

		// Class Engine.TextRenderComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_UZ2X, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_OSHR, 0x05A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x05B0);
		}

		// Class Engine.Texture2DDynamic
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_LXCY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_LIWE, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00C8);
		}

		// Class Engine.TextureCube
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_VU4C, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0108);
		}

		// Class Engine.TextureLightProfile
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F0);
		}

		// Class Engine.TextureRenderTargetCube
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_0GT6, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D0);
		}

		// Class Engine.ThumbnailInfo
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// Class Engine.TimelineComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_OUXD, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0190);
		}

		// Class Engine.TimelineTemplate
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_9JVN, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_ASJQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x0098);
		}

		// Class Engine.TireType
		TEST_METHOD(Class__Engine__TireType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_SXS5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// Class Engine.TouchInterface
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_K0PX, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_RS0B, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// Class Engine.TriggerBase
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0330);
		}

		// Class Engine.TriggerBox
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0330);
		}

		// Class Engine.TriggerCapsule
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0330);
		}

		// Class Engine.TriggerSphere
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0330);
		}

		// Class Engine.TriggerVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0360);
		}

		// Class Engine.TwitterIntegrationBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// Class Engine.UserDefinedEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// Class Engine.UserDefinedStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_SQ0V, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_CTXV, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x00E0);
		}

		// Class Engine.UserInterfaceSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_QK5U, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_602D, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_D3MY, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_2WXP, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0258);
		}

		// Class Engine.VectorField
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// Class Engine.VectorFieldAnimated
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_44NO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_JGPR, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// Class Engine.VectorFieldComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_XCDP, 0x0569);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0580);
		}

		// Class Engine.VectorFieldStatic
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_A6NC, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x00D0);
		}

		// Class Engine.VectorFieldVolume
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0330);
		}

		// Class Engine.VirtualTexture
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Space, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Rebuild, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, UnknownData_7MP1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0050);
		}

		// Class Engine.LightMapVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, LayerFlags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, UnknownData_FPK9, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0058);
		}

		// Class Engine.VirtualTextureSpace
		TEST_METHOD(Class__Engine__VirtualTextureSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Layers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, TileSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, BorderWidth, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Size, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Dimensions, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Format, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_81K9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, PoolSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_OFTM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureSpace, 0x0070);
		}

		// Class Engine.LightMapVirtualTextureSpace
		TEST_METHOD(Class__Engine__LightMapVirtualTextureSpace)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTextureSpace, 0x0070);
		}

		// Class Engine.VisualLoggerAutomationTests
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// Class Engine.VisualLoggerDebugSnapshotInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// Class Engine.VisualLoggerKismetLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// Class Engine.VoiceChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_RTHS, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0078);
		}

		// Class Engine.VOIPTalker
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_6OBZ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x0128);
		}

		// Class Engine.VOIPStatics
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// Class Engine.VolumeTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_9ABQ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0108);
		}

		// Class Engine.VolumetricLightmapDensityVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0368);
		}

		// Class Engine.WindDirectionalSource
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0330);
		}

		// Class Engine.WindDirectionalSourceComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_RXVG, 0x024D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0260);
		}

		// Class Engine.WorldComposition
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_PAYR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_0V3Q, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// Class Engine.HierarchicalLODSetup
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// Class Engine.WorldSettings
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_CJPI, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_6XXH, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_O20S, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_IKPJ, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_08AC, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_MWDH, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_1MQS, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_OWUW, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_1CDA, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookMarks, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_CT3N, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_XN79, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bOverrideDefaultBroadphaseSettings, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_Z8QX, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_HTYB, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x0550);
		}

		// BlueprintGeneratedClass PM_PatrolPointCycle.PM_PatrolPointCycle_C
		TEST_METHOD(BlueprintGeneratedClass__PM_PatrolPointCycle__PM_PatrolPointCycle_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PatrolPointCycle_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_PatrolPointCycle_C, 0x00A8);
		}

		// BlueprintGeneratedClass orderInstance.orderInstance_C
		TEST_METHOD(BlueprintGeneratedClass__orderInstance__orderInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, drugData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, DrugIDs, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, drugQuantities, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, recoverHour, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, recoverMinute, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, orderSmuggleLocation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, OrderId, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, UnknownData_SYTB, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, smuggleLocationStringID, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, recoverDay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, ready, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, UnknownData_MRKY, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, dayTimeControlerRef, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, packageSizes, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, packageNaming, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, oneGramSizeScale, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, oneGramWieghtScale, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, packageIcons, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, orderTaskID, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, recoverTimer, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AorderInstance_C, smuggleLocations, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AorderInstance_C, 0x03F8);
		}

		// BlueprintGeneratedClass keijiBP.keijiBP_C
		TEST_METHOD(BlueprintGeneratedClass__keijiBP__keijiBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, SM_Bowl, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Cube, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Audio, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, enterTrigger, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, chair, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_1_U_pose_8B73439A47AD795C399BE8B8CFF4C59A, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_1_A_pose_8B73439A47AD795C399BE8B8CFF4C59A, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_1__Direction_8B73439A47AD795C399BE8B8CFF4C59A, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, UnknownData_E8FP, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_2, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_0_Amount_1252FED14046477050F9E8A526DD56EB, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_0__Direction_1252FED14046477050F9E8A526DD56EB, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, UnknownData_XL9E, 0x078D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, Timeline_1, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, AnimBP, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, curDialogueWidget, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, sitingPawn, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, isSpeaking, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, playerSat, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, UnknownData_JDO5, 0x07B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiBP_C, animationBP, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeijiBP_C, 0x07C0);
		}

		// WidgetBlueprintGeneratedClass bankHistoryRecordWidget.bankHistoryRecordWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__bankHistoryRecordWidget__bankHistoryRecordWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, txtAmount, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, txtDesc, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, txtOperationSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, colorPositive, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHistoryRecordWidget_C, colorNegative, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbankHistoryRecordWidget_C, 0x0280);
		}

		// WidgetBlueprintGeneratedClass compassMarkerWidget.compassMarkerWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__compassMarkerWidget__compassMarkerWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcompassMarkerWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcompassMarkerWidget_C, distanceSizer, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcompassMarkerWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcompassMarkerWidget_C, txtDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcompassMarkerWidget_C, MaxDistance, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcompassMarkerWidget_C, 0x022C);
		}

		// WidgetBlueprintGeneratedClass quickHintWidget.quickHintWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__quickHintWidget__quickHintWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, flicker, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, Enter, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, Background, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, icon, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, tail, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, txtDescription, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UquickHintWidget_C, dieTime, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UquickHintWidget_C, 0x024C);
		}

		// BlueprintGeneratedClass BP_MyLockpickPuzzle.BP_MyLockpickPuzzle_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MyLockpickPuzzle__BP_MyLockpickPuzzle_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, UberGraphFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, breakLoop, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, PointLight, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, screwDriver, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, bobbyPinRotator, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, lockRotator, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, lockMainModel, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, DefaultSceneRoot, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, bobbyPinInit_position_2ED72F4F4BEC4FBA276F308675FFEBB3, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, bobbyPinInit__Direction_2ED72F4F4BEC4FBA276F308675FFEBB3, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, UnknownData_KYAR, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, bobbyPinInit, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, parentWidget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, screenCapture, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, bobbyPinMoveRange, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyLockpickPuzzle_C, bobbyPinLocOffset, 0x04FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MyLockpickPuzzle_C, 0x0500);
		}

		// BlueprintGeneratedClass streetPersonMale01BP.streetPersonMale01BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale01BP__streetPersonMale01BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale01BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass streetPersonMale02BP.streetPersonMale02BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale02BP__streetPersonMale02BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale02BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass streetPersonMale10BP.streetPersonMale10BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale10BP__streetPersonMale10BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale10BP_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass telephoneWidget.telephoneWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__telephoneWidget__telephoneWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, unlockScreen, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, readMessages, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, blueBg, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, blueCallBg, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, blueTop, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, callBtnPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, greyBg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, Image_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, Image_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, incomingCallWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, newMessagesIconFront, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, notifyHolder, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, overlayPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, scrollCalls, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, scrollMessagePeople, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, scrollMessages, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, scrollNotes, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, sectionSlider, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtBtAction, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtCallStatus, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtCallUser, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtClockBig, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtDayNam, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtHour, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, txtNumMessages, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, wallpaper, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, whiteSelected, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, curSlidedSection, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, slideSectionWidth, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, curSlidePos, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, goSlidePos, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, goWhitePos, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, callSeconds, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, curCallerData, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, curCallTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, phoneRef, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, daytimeManager, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtelephoneWidget_C, notificationPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtelephoneWidget_C, 0x03B8);
		}

		// WidgetBlueprintGeneratedClass itemDropQuantityWidget.itemDropQuantityWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__itemDropQuantityWidget__itemDropQuantityWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, btnAdd, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, btnCancel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, quantitySlider, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, txtPrice, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, txtQuan, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, txtTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, targetString, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, QuanMax, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, quanSet, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, TargetWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, Payload, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, dropedPrice, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropQuantityWidget_C, StepSize, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UitemDropQuantityWidget_C, 0x0288);
		}

		// WidgetBlueprintGeneratedClass phoneNoteWidget.phoneNoteWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__phoneNoteWidget__phoneNoteWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneNoteWidget_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneNoteWidget_C, txtNoteText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UphoneNoteWidget_C, 0x0218);
		}

		// BlueprintGeneratedClass AdaptiveMusic_BP.AdaptiveMusic_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AdaptiveMusic_BP__AdaptiveMusic_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, dds_menu_intro_loop, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, dds_menu_intro_fade, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Stress, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Hideout, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Chase, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, IntroChase, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, RamaSave, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Billboard, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Chase_HideoutTransitionTimeline_NewTrack_1_E077DD6A477BBAF884D89F8F6DCAF7CB, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Chase_HideoutTransitionTimeline_NewTrack_0_E077DD6A477BBAF884D89F8F6DCAF7CB, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Chase_HideoutTransitionTimeline__Direction_E077DD6A477BBAF884D89F8F6DCAF7CB, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, UnknownData_6CXQ, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, HideoutTransitionTimeline, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, PlayerRef, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, ChaseIntroMusic, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, ChaseMusic, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, HideoutMusic, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, ChaseIntroPlaying, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, ChaseMusicPlaying, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, HideoutMusicPlaying, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, UnknownData_EEG7, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Time, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, RandomMusic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, currentValue, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, EndPossible, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, UnknownData_69BL, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, ChangeInterval, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, StressMusic, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, Timer, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, CurrentStressVolume, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, StressPlaying, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, EndChaceMusic, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, UnknownData_8FE1, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, OutroCoughtMusic, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, OutroFugitivetMusic, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, ChangeAllowedAfterTime, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, UnknownData_3LS0, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, NumberOfChanges, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, NumberOfBars, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, MenuMusicTransitionTime, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, chaseMusicStartDelay, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdaptiveMusic_BP_C, IsWalking, 0x0434);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAdaptiveMusic_BP_C, 0x0435);
		}

		// BlueprintGeneratedClass interactiveObstacle.interactiveObstacle_C
		TEST_METHOD(BlueprintGeneratedClass__interactiveObstacle__interactiveObstacle_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpTarget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpCam, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, cameraRotator, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, Arrow, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, interactionBox, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, obstacleBox, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, slideUnderCam_camRot_029F842F494E859DDC82A896F7B64D22, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, slideUnderCam_camXPos_029F842F494E859DDC82A896F7B64D22, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, slideUnderCam_camZPos_029F842F494E859DDC82A896F7B64D22, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, slideUnderCam__Direction_029F842F494E859DDC82A896F7B64D22, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UnknownData_QEP1, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, slideUnderCam, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOnCam_camRot_537B225A4C73FFA66527139FF37D7C53, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOnCam_camXPos_537B225A4C73FFA66527139FF37D7C53, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOnCam_camZPos_537B225A4C73FFA66527139FF37D7C53, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOnCam__Direction_537B225A4C73FFA66527139FF37D7C53, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UnknownData_Q1V4, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOnCam, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverBigCam_camRot2_09DFF91240DF6D30E15C7BBA9BD869E5, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverBigCam_camRot_09DFF91240DF6D30E15C7BBA9BD869E5, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverBigCam_camXPos_09DFF91240DF6D30E15C7BBA9BD869E5, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverBigCam_camZPos_09DFF91240DF6D30E15C7BBA9BD869E5, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverBigCam__Direction_09DFF91240DF6D30E15C7BBA9BD869E5, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UnknownData_V09M, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverBigCam, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverCam_camRot2_2FC0FBA540347A051C36319E0AF3FAC5, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverCam_camRot_2FC0FBA540347A051C36319E0AF3FAC5, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverCam_camXPos_2FC0FBA540347A051C36319E0AF3FAC5, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverCam_camZPos_2FC0FBA540347A051C36319E0AF3FAC5, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverCam__Direction_2FC0FBA540347A051C36319E0AF3FAC5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UnknownData_R248, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, jumpOverCam, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, ActionName, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, ObstacleType, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, oneWay, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UnknownData_NQD0, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, ObstacleOffset, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, climbOverHeight, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, obstacleSize, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, InteractionSize, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, endPlayerPos, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, endControlRotation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, caughtWhileJumping, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, obstacleSoundType, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, UnknownData_HRWA, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveObstacle_C, inBlendTime, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AinteractiveObstacle_C, 0x042C);
		}

		// BlueprintGeneratedClass taserCamShake.taserCamShake_C
		TEST_METHOD(BlueprintGeneratedClass__taserCamShake__taserCamShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtaserCamShake_C, 0x0160);
		}

		// WidgetBlueprintGeneratedClass phoneCallWidget.phoneCallWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__phoneCallWidget__phoneCallWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, callIcon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, txtCallDate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, txtCallerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, callerID, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneCallWidget_C, Declined, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UphoneCallWidget_C, 0x0235);
		}

		// WidgetBlueprintGeneratedClass phoneMessagePersonWidget.phoneMessagePersonWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__phoneMessagePersonWidget__phoneMessagePersonWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneMessagePersonWidget_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneMessagePersonWidget_C, txtLastMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneMessagePersonWidget_C, txtMsgCount, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneMessagePersonWidget_C, txtPersonName, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UphoneMessagePersonWidget_C, 0x0228);
		}

		// Class VariantManagerContent.LevelVariantSets
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DisplayNodeExpansionStates, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0088);
		}

		// Class VariantManagerContent.LevelVariantSetsActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0340);
		}

		// Class VariantManagerContent.PropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_Z3SE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bIsObjectProperty, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_8D08, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_CDV9, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_Z7LW, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x00F0);
		}

		// Class VariantManagerContent.PropertyValueMaterial
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x00F0);
		}

		// Class VariantManagerContent.PropertyValueTransform
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x00F0);
		}

		// Class VariantManagerContent.PropertyValueVisibility
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x00F0);
		}

		// Class VariantManagerContent.Variant
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0050);
		}

		// Class VariantManagerContent.VariantObjectBinding
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_XKX1, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0070);
		}

		// Class VariantManagerContent.VariantSet
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0050);
		}

		// BlueprintGeneratedClass backpackBase.backpackBase_C
		TEST_METHOD(BlueprintGeneratedClass__backpackBase__backpackBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, UberGraphFrame, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, InventoryComponent, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, backpackInventory, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, backpackItemSize, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, backpackItemWeight, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, backpackQuantities, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, inHands, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, UnknownData_AKXI, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, PlayerRef_1, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, BackpackSpeed, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackBase_C, BpRespawned, 0x05F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackBase_C, 0x05F5);
		}

		// BlueprintGeneratedClass deadDropBase.deadDropBase_C
		TEST_METHOD(BlueprintGeneratedClass__deadDropBase__deadDropBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, UnknownData_4FYY, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, Box, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, deadDropID, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, retrieveTaskID, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, TimeItemsStored, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, playerAway, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, itemsStored, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, itemsStolen, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropBase_C, secondSide, 0x0517);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeadDropBase_C, 0x0518);
		}

		// BlueprintGeneratedClass deaRaidWindowEscape.deaRaidWindowEscape_C
		TEST_METHOD(BlueprintGeneratedClass__deaRaidWindowEscape__deaRaidWindowEscape_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, pawnOverlap, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, Box1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, Arrow, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, Box, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, BoxExtent, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, timeActivation, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, activationCounter, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, Countdown, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, UnknownData_KHXS, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, widgetDisplayDistance, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, active, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, UnknownData_3VQB, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidWindowEscape_C, Widget, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeaRaidWindowEscape_C, 0x0478);
		}

		// Class HeadMountedDisplay.HeadMountedDisplayFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// Class HeadMountedDisplay.MotionControllerComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_LI33, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_XYYV, 0x056E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_FIUM, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_GV7C, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0610);
		}

		// Class HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// Class HeadMountedDisplay.VRNotificationsComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0180);
		}

		// Class HeadMountedDisplay.XRAssetFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// Class HeadMountedDisplay.AsyncTask_LoadXRDeviceVisComponent
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_49OI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// BlueprintGeneratedClass decoModernFloorLamp3.decoModernFloorLamp3_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernFloorLamp3__decoModernFloorLamp3_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp3_C, UnknownData_9ZPZ, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp3_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp3_C, PointLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp3_C, LightSwitch1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp3_C, LightSwitch2, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp3_C, LightSwitch3, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernFloorLamp3_C, 0x0470);
		}

		// Class LevelSequence.DefaultLevelSequenceInstanceData
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_FRTI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_PAHG, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// Class LevelSequence.LevelSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0498);
		}

		// Class LevelSequence.LevelSequenceBurnInInitSettings
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// Class LevelSequence.LevelSequenceBurnInOptions
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_QU58, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// Class LevelSequence.LevelSequenceActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_ONCS, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bAutoPlay, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_8WIS, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bOverrideInstanceData, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_LVJB, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x03D0);
		}

		// Class LevelSequence.LevelSequenceBurnIn
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0298);
		}

		// Class LevelSequence.LevelSequenceDirector
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// Class LevelSequence.LegacyLevelSequenceDirectorBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00E0);
		}

		// Class LevelSequence.LevelSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_KNAP, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, AdditionalEventReceivers, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_N6Y4, 0x0818);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0868);
		}

		// BlueprintGeneratedClass mediumJarContainer.mediumJarContainer_C
		TEST_METHOD(BlueprintGeneratedClass__mediumJarContainer__mediumJarContainer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmediumJarContainer_C, 0x082C);
		}

		// BlueprintGeneratedClass smallJarContainer.smallJarContainer_C
		TEST_METHOD(BlueprintGeneratedClass__smallJarContainer__smallJarContainer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmallJarContainer_C, 0x082C);
		}

		// BlueprintGeneratedClass largeJarContainer.largeJarContainer_C
		TEST_METHOD(BlueprintGeneratedClass__largeJarContainer__largeJarContainer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlargeJarContainer_C, 0x082C);
		}

		// BlueprintGeneratedClass PowerSwitch.PowerSwitch_C
		TEST_METHOD(BlueprintGeneratedClass__PowerSwitch__PowerSwitch_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, PointLight, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, SM_DoorB, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, SM_Tunnel_Electro_Box, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, powerBoxHatch, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, powerBoxBody, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, DisableTimer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, TimeDisabled, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, PowerStateChange, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, IsOpen, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerSwitch_C, Opening, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APowerSwitch_C, 0x0472);
		}

		// BlueprintGeneratedClass wallSwitchLightBP.wallSwitchLightBP_C
		TEST_METHOD(BlueprintGeneratedClass__wallSwitchLightBP__wallSwitchLightBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, Box, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, Arrow, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, pawnOverlap, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, lightRef, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, Double, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, UnknownData_2TZG, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, textActionTurnOn, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, textActionTurnOff, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, widgetDrawDistance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, UnknownData_BMKV, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, Widget, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSwitchLightBP_C, overlaps, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwallSwitchLightBP_C, 0x04A8);
		}

		// BlueprintGeneratedClass packageBase.packageBase_C
		TEST_METHOD(BlueprintGeneratedClass__packageBase__packageBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, RamaSave_1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, Widget, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, contents, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, Quantities, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, colorText, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, AllAdded, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, UnknownData_3ZW6, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, sumSize, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApackageBase_C, MarkerRef, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApackageBase_C, 0x0498);
		}

		// BlueprintGeneratedClass theGreatSwitch.theGreatSwitch_C
		TEST_METHOD(BlueprintGeneratedClass__theGreatSwitch__theGreatSwitch_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, Cube, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, anim_Y_B153AA31418F579C698A22B935CCEC4E, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, anim__Direction_B153AA31418F579C698A22B935CCEC4E, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, UnknownData_V9NN, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, Anim, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtheGreatSwitch_C, on, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtheGreatSwitch_C, 0x0449);
		}

		// BlueprintGeneratedClass randomSaleDialogueInstance.randomSaleDialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__randomSaleDialogueInstance__randomSaleDialogueInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, UnknownData_A6BS, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, clientIsMale, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, UnknownData_5NHT, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, randomDialogueLines, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, psychedelicsChanceConcrete, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, psychedelicChanceSomething, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, psychNoIdeaResponses, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, psychKnowSomethingResponses, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, psychDirectResponses, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, askedQuestion, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSaleDialogueInstance_C, clientKnew, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ArandomSaleDialogueInstance_C, 0x03F2);
		}

		// Class MediaAssets.MediaSource
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_219Z, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0030);
		}

		// Class MediaAssets.BaseMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0038);
		}

		// Class MediaAssets.FileMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_L557, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x0060);
		}

		// Class MediaAssets.MediaBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// Class MediaAssets.MediaPlayer
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_WQ4R, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_ME04, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_N689, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_K7OD, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_WSUI, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// Class MediaAssets.MediaPlaylist
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// Class MediaAssets.MediaSoundComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_GU81, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_3IZO, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_45ZT, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_1G4O, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x0660);
		}

		// Class MediaAssets.MediaTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_1Z97, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_7IN7, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_WC6R, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0140);
		}

		// Class MediaAssets.PlatformMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0038);
		}

		// Class MediaAssets.StreamMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0048);
		}

		// Class MediaAssets.TimeSynchronizableMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_RMA1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0040);
		}

		// Class CoreUObject.Object
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// Class CoreUObject.Interface
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// Class CoreUObject.GCObjectReferencer
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_NJH4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0060);
		}

		// Class CoreUObject.TextBuffer
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_ANQC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// Class CoreUObject.Field
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// Class CoreUObject.Struct
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x0088);
		}

		// Class CoreUObject.ScriptStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_G0T1, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x0098);
		}

		// Class CoreUObject.Package
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_O2DN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x0090);
		}

		// Class CoreUObject.Class
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_TXTK, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0208);
		}

		// Class CoreUObject.Function
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_CXSZVJEDJB, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_UM5N9AS9FY, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00B8);
		}

		// Class CoreUObject.DelegateFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00B8);
		}

		// Class CoreUObject.DynamicClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_8CKH, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x0270);
		}

		// Class CoreUObject.PackageMap
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_Z0T9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// Class CoreUObject.Enum
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_REW3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// Class CoreUObject.Property
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_229A, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// Class CoreUObject.EnumProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_M67R, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// Class CoreUObject.LinkerPlaceholderClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_EV9Z, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03C0);
		}

		// Class CoreUObject.LinkerPlaceholderExportObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_SQ8Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// Class CoreUObject.LinkerPlaceholderFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_XNYZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0270);
		}

		// Class CoreUObject.MetaData
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_AYNV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// Class CoreUObject.ObjectRedirector
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_QF9G, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// Class CoreUObject.ArrayProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_NYHH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// Class CoreUObject.ObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_3DP2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// Class CoreUObject.BoolProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_RNSY, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// Class CoreUObject.NumericProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// Class CoreUObject.ByteProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_YRIV, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// Class CoreUObject.ObjectProperty
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// Class CoreUObject.ClassProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_04CT, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// Class CoreUObject.DelegateProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0070);
		}

		// Class CoreUObject.DoubleProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// Class CoreUObject.FloatProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// Class CoreUObject.IntProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// Class CoreUObject.Int16Property
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// Class CoreUObject.Int64Property
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// Class CoreUObject.Int8Property
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// Class CoreUObject.InterfaceProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_3M6M, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// Class CoreUObject.LazyObjectProperty
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// Class CoreUObject.MapProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_HI0M, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x00A8);
		}

		// Class CoreUObject.MulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_070Y, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// Class CoreUObject.NameProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// Class CoreUObject.SetProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_IAWA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0098);
		}

		// Class CoreUObject.SoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// Class CoreUObject.SoftClassProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_OWJ2, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// Class CoreUObject.StrProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// Class CoreUObject.StructProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_B3ZN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// Class CoreUObject.UInt16Property
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// Class CoreUObject.UInt32Property
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// Class CoreUObject.UInt64Property
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// Class CoreUObject.WeakObjectProperty
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// Class CoreUObject.TextProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// Class EngineSettings.ConsoleSettings
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_JO5U, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_W8DH, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_J5NG, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// Class EngineSettings.GameMapsSettings
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, EditorStartupMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_5URP, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x0108);
		}

		// Class EngineSettings.GameNetworkManagerSettings
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_TGB6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_QZ01, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// Class EngineSettings.GameSessionSettings
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_MCVM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// Class EngineSettings.GeneralEngineSettings
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// Class EngineSettings.GeneralProjectSettings
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_XLS3, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0118);
		}

		// Class EngineSettings.HudSettings
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_MDB4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// BlueprintGeneratedClass stream_stink.stream_stink_C
		TEST_METHOD(BlueprintGeneratedClass__stream_stink__stream_stink_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_stink_C, 0x0330);
		}

		// BlueprintGeneratedClass SewerSectorTeleportTarget.SewerSectorTeleportTarget_C
		TEST_METHOD(BlueprintGeneratedClass__SewerSectorTeleportTarget__SewerSectorTeleportTarget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleportTarget_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewerSectorTeleportTarget_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASewerSectorTeleportTarget_C, 0x0338);
		}

		// BlueprintGeneratedClass patchManager.patchManager_C
		TEST_METHOD(BlueprintGeneratedClass__patchManager__patchManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApatchManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApatchManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApatchManager_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApatchManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApatchManager_C, patchNumber, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApatchManager_C, patchSavedNumber, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApatchManager_C, 0x0350);
		}

		// BlueprintGeneratedClass BP_Car.BP_Car_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Car__BP_Car_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, Foliage, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, Car, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarBodyMatInst, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarColorPalette, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarVariationsHatchback, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarVariationsPickup, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, ActiveArray, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, AllowFoliage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, UnknownData_V3D4, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, MeshIndex, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, HatchbackFol, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, PickupFol, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarType, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, UnknownData_V5SW, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarVariationsWagon, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, WagonFol, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, RandomColor, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, UnknownData_8YMU, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, ManualCarPaintColor, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, UnknownData_R231, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CarVariationsAmbulance, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, AmbulanceFol, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, FullyRandom, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Car_C, CleanVersion, 0x0411);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Car_C, 0x0412);
		}

		// BlueprintGeneratedClass megaphoneTowerBP.megaphoneTowerBP_C
		TEST_METHOD(BlueprintGeneratedClass__megaphoneTowerBP__megaphoneTowerBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, megaphoneVoice, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, megaphoneTower, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, fadeOut_Multiplier_FD1C347D4EAF80141174E88CB7623FC2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, fadeOut__Direction_FD1C347D4EAF80141174E88CB7623FC2, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, UnknownData_NMI1, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, FadeOut, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, dayTimeControler, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, alarmHourStart, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, initialised, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, UnknownData_1EWD, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmegaphoneTowerBP_C, baseVolume, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmegaphoneTowerBP_C, 0x036C);
		}

		// BlueprintGeneratedClass HighwayBulletinAngledLg_BP.HighwayBulletinAngledLg_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HighwayBulletinAngledLg_BP__HighwayBulletinAngledLg_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, BillboardPanel2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, BillboardPanel1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, BillboardLamps2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, BillboardLamps1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, Catwalks, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, BillboardPower, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, Frame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, PostShort, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, DefaultSceneRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, OffsetCenterPost, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, ExtraTall, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, LightsOn, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, UnknownData_RHFI, 0x0373);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, FaceMaterial1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledLg_BP_C, FaceMaterial2, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHighwayBulletinAngledLg_BP_C, 0x0388);
		}

		// BlueprintGeneratedClass WoodenBulletinBracedLarge_BP.WoodenBulletinBracedLarge_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodenBulletinBracedLarge_BP__WoodenBulletinBracedLarge_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, panel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, LampA, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, AddLamps, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, TurnOnLights, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, UnknownData_AFSV, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedLarge_BP_C, FaceMaterial, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodenBulletinBracedLarge_BP_C, 0x0358);
		}

		// BlueprintGeneratedClass TrashBin_LargeContainer.TrashBin_LargeContainer_C
		TEST_METHOD(BlueprintGeneratedClass__TrashBin_LargeContainer__TrashBin_LargeContainer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrashBin_LargeContainer_C, UnknownData_PBE0, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrashBin_LargeContainer_C, Trash_Container_Green, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrashBin_LargeContainer_C, ContainerMaterial, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrashBin_LargeContainer_C, 0x0520);
		}

		// BlueprintGeneratedClass keijiTerritoryLook.keijiTerritoryLook_C
		TEST_METHOD(BlueprintGeneratedClass__keijiTerritoryLook__keijiTerritoryLook_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiTerritoryLook_C, UnknownData_N83T, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiTerritoryLook_C, UberGraphFrame, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeijiTerritoryLook_C, 0x0360);
		}

		// BlueprintGeneratedClass slupekBarierkaBP.slupekBarierkaBP_C
		TEST_METHOD(BlueprintGeneratedClass__slupekBarierkaBP__slupekBarierkaBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AslupekBarierkaBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AslupekBarierkaBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AslupekBarierkaBP_C, FlipDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AslupekBarierkaBP_C, UnknownData_5AL1, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AslupekBarierkaBP_C, LengthSegments, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AslupekBarierkaBP_C, Spacing, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AslupekBarierkaBP_C, 0x0344);
		}

		// BlueprintGeneratedClass twoTowersRubberDollBP.twoTowersRubberDollBP_C
		TEST_METHOD(BlueprintGeneratedClass__twoTowersRubberDollBP__twoTowersRubberDollBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, PointLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, twoTowersRubberDoll, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, rotDoll_NewTrack_0_09D6CBDA4EE8B71ECE5F5D824E8C38E4, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, rotDoll__Direction_09D6CBDA4EE8B71ECE5F5D824E8C38E4, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, UnknownData_F3Q1, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, rotDoll, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersRubberDollBP_C, rotAmount, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtwoTowersRubberDollBP_C, 0x035C);
		}

		// WidgetBlueprintGeneratedClass gameTipPopup.gameTipPopup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__gameTipPopup__gameTipPopup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, mainBg, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, shadow, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, txtTipDesc, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, txtTipTitle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameTipPopup_C, ready, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgameTipPopup_C, 0x0239);
		}

		// BlueprintGeneratedClass BTService_Bird_DisableAvoidance_NearPerch.BTService_Bird_DisableAvoidance_NearPerch_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_DisableAvoidance_NearPerch__BTService_Bird_DisableAvoidance_NearPerch_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_DisableAvoidance_NearPerch_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_DisableAvoidance_NearPerch_C, BBKey_DoADownTrace_, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_DisableAvoidance_NearPerch_C, 0x00A8);
		}

		// BlueprintGeneratedClass BTService_Bird_FlyToARandomGroundTarget.BTService_Bird_FlyToARandomGroundTarget_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_FlyToARandomGroundTarget__BTService_Bird_FlyToARandomGroundTarget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, CurrentYawSpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, CurrentPitchSpeed, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, CurrentRollSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, TurnSpeed, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, FlyingForwardSpeed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, UnknownData_XDVD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, BBKey_Pitch_Adjustment, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomGroundTarget_C, BbKey_FlyingSpeed, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_FlyToARandomGroundTarget_C, 0x00C8);
		}

		// BlueprintGeneratedClass BTTask_Bird_Set_FlyAway_ToFalse.BTTask_Bird_Set_FlyAway_ToFalse_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_Set_FlyAway_ToFalse__BTTask_Bird_Set_FlyAway_ToFalse_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Set_FlyAway_ToFalse_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Set_FlyAway_ToFalse_C, BBKey_FlyAway_, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_Set_FlyAway_ToFalse_C, 0x00B0);
		}

		// WidgetBlueprintGeneratedClass newCashIncome.newCashIncome_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__newCashIncome__newCashIncome_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, txtCashAmount, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, txtCashStatus, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, Amount, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, UnknownData_ZG6E, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewCashIncome_C, colorRed, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnewCashIncome_C, 0x0260);
		}

		// WidgetBlueprintGeneratedClass worldMapWidget.worldMapWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__worldMapWidget__worldMapWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, playerMarkerAnim, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, btnCloseMap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mainHolder, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, markerHolder, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, playerPosition, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, worldMapImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapScale, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, UnknownData_AMD4, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapRef, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, PlayerRef, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapMarkers, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapScrollOffset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mouseIsDraging, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, UnknownData_0D2T, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, initialClickPosition, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, initialMapTranslation, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mouseDragSpeed, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, endMousePoint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapOffsetLimits, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapCurrentZoom, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapInitialZoom, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapZoomMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapZoomMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, mapZoomStep, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, basePlayerPosition, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapWidget_C, showPlayerPosition, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UworldMapWidget_C, 0x02CD);
		}

		// Class ImgMedia.ImgMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x0060);
		}

		// BlueprintGeneratedClass soundVolumeMasterActor.soundVolumeMasterActor_C
		TEST_METHOD(BlueprintGeneratedClass__soundVolumeMasterActor__soundVolumeMasterActor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsoundVolumeMasterActor_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsoundVolumeMasterActor_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsoundVolumeMasterActor_C, 0x0338);
		}

		// Class MovieSceneCapture.MovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_1YZ4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, bFrameRequested, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_DWCC, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// Class MovieSceneCapture.MovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// Class MovieSceneCapture.NullAudioCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// Class MovieSceneCapture.MasterAudioSubmixCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_WWG8, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// Class MovieSceneCapture.MovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// Class MovieSceneCapture.CompositionGraphCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_KULS, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_VQ1Y, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_2YRE, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_EWST, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// Class MovieSceneCapture.FrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_QNW1, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_NVFQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// Class MovieSceneCapture.CompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_ILQO, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_BMP
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_PNG
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_JPG
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_EXR
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_BYZD, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// Class MovieSceneCapture.MovieSceneCaptureInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// Class MovieSceneCapture.MovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_DY06, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_U0VC, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_I25X, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x01F0);
		}

		// Class MovieSceneCapture.LevelCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_JM25, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_BBGQ, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0210);
		}

		// Class MovieSceneCapture.MovieSceneCaptureEnvironment
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// Class MovieSceneCapture.UserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_S7BN, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00E0);
		}

		// Class MovieSceneCapture.UserDefinedImageCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_SNSY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E8);
		}

		// Class MovieSceneCapture.VideoCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_W92A, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, VideoCodec, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_EPNB, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0090);
		}

		// WidgetBlueprintGeneratedClass furnitureDropQuantityWidget.furnitureDropQuantityWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__furnitureDropQuantityWidget__furnitureDropQuantityWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, btnAdd, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, btnCancel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, quantitySlider, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, txtQuan, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, txtTitle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, targetString, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, QuanMax, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, quanSet, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, TargetWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, Payload, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, dropedPrice, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, StepSize, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfurnitureDropQuantityWidget_C, ManageList, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfurnitureDropQuantityWidget_C, 0x0288);
		}

		// WidgetBlueprintGeneratedClass demoEndWidget.demoEndWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__demoEndWidget__demoEndWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, demoInfoFade, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, blackout, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, flicker, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, Black, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, btnMenu, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, shadow, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdemoEndWidget_C, countdownTimer, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdemoEndWidget_C, 0x0244);
		}

		// BlueprintGeneratedClass lightSwitchWallBP.lightSwitchWallBP_C
		TEST_METHOD(BlueprintGeneratedClass__lightSwitchWallBP__lightSwitchWallBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightSwitchWallBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightSwitchWallBP_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightSwitchWallBP_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightSwitchWallBP_C, Double, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightSwitchWallBP_C, UnknownData_B11K, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightSwitchWallBP_C, lightRef, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlightSwitchWallBP_C, 0x0350);
		}

		// WidgetBlueprintGeneratedClass cutsceneDialogueWidget.cutsceneDialogueWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__cutsceneDialogueWidget__cutsceneDialogueWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, animChoiceB, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, animChoiceA, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, TextBlock_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, TextBlock_4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, txtOptionA, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, txtOptionB, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, Speaker, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, optionA_Action, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, optionB_Action, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcutsceneDialogueWidget_C, activeElementsColor, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcutsceneDialogueWidget_C, 0x02A0);
		}

		// BlueprintGeneratedClass decoTrashSofa.decoTrashSofa_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashSofa__decoTrashSofa_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashSofa_C, 0x0446);
		}

		// AnimBlueprintGeneratedClass laBallenaAnimBP.laBallenaAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__laBallenaAnimBP__laBallenaAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_Root_AED2318B437D98A8644616973BF73A82, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_7F31A3814598392B47B5968856A21AFD, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_17393D19411834F24AB3AAA2B8433839, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_0738F7BF45AB33157ED57D82D35A7055, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_6C9DE14644156C662C9285A931BCA12C, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_284C9B504D45FAF586A34DA047EA5BEC, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_E7D525214F10876F6E58E09B67C47F21, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_037A3DCA49068868159C2B81677A2F31, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_3BBD3452416960408D41FEBF37E2E686, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_F9D9B9BD40032349DADD3D87E2D55145, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_D92D16394AE10A3C0A2CD1A05DB1B8B6, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_CA75825C4BB03EA0C5FBB4ADCCE191F4, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_FFAE29C94910BC05F461AB84CE482F95, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_5776D2BD4E34227A522D358C2DA95B8C, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_2964F27141F6254D0E566699173E3189, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_2484EE824784A22A4EE77683FE19159A, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_TransitionResult_BF2EC669466E28F37AC31E9E895DA210, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_F3E45ACC472C040239693287868F83BE, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_701E069B45DDEBA524569D92B1AC9D5B, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_4EBA6C7546904D05F598629564356C0F, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_455C161046BEBB94029379837F220558, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_1CFDEABD40AF8DEB4CC6D49EF0653B8F, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_07D0873042D09919CDE926A71DA9CC8D, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_0A93FCD2458CDEE73B5EC28369F4960B, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_CB758089476E8CFC67841D8C9C2A2687, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_A8CF70214FFA1E9350AF98875307E00B, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_484320AE4ABB63FD58DD649C12BC4FA4, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_7676DB274EA39FE620D574BE1D5A9FF7, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_67E45FB94E7A2320857D16A8C121672C, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_B4CB059240025388222C1D84114F91DF, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_5A3BF7CE4DBA0E03B236CBA0C445E16B, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_10B557834D1A80D5112DDA8F6D67F178, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_EC92429E4C3053EA8166338A75FB17ED, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_A5A3799244E97C99192AAB86216A8494, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_DA935F234BE5EAC6BD37C5BAAAF1D79C, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_ACE448E14495FD2CE7DC83B7587DEEF9, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_42090658433D46932DC4678454D1DD6D, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_SequencePlayer_DBC9EA794645D69A4CAD319A6F71279B, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateResult_BB93A660479B5EE87EE693A3D287089C, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, AnimGraphNode_StateMachine_0D7940794BE7B4BCD15E609B7D68943A, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, startWelcome, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, startSitDown, 0x12A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, startBrief, 0x12AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, straightPoint, 0x12AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, whatWant, 0x12AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, closer, 0x12AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, playerNotSure, 0x12AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaBallenaAnimBP_C, playerConfirm, 0x12AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlaBallenaAnimBP_C, 0x12B0);
		}

		// BlueprintGeneratedClass seedSellerSpawnPoint.seedSellerSpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__seedSellerSpawnPoint__seedSellerSpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerSpawnPoint_C, Box, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerSpawnPoint_C, Arrow, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerSpawnPoint_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AseedSellerSpawnPoint_C, 0x0340);
		}

		// BlueprintGeneratedClass seedSellerShopInstance.seedSellerShopInstance_C
		TEST_METHOD(BlueprintGeneratedClass__seedSellerShopInstance__seedSellerShopInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerShopInstance_C, UnknownData_6WSG, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerShopInstance_C, UberGraphFrame, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AseedSellerShopInstance_C, 0x03F8);
		}

		// Class EyeTracker.EyeTrackerFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// BlueprintGeneratedClass decoOldschoolCeilingLamp3.decoOldschoolCeilingLamp3_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolCeilingLamp3__decoOldschoolCeilingLamp3_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp3_C, UnknownData_70IW, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp3_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolCeilingLamp3_C, PointLight, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolCeilingLamp3_C, 0x0458);
		}

		// BlueprintGeneratedClass decoHousePlant1.decoHousePlant1_C
		TEST_METHOD(BlueprintGeneratedClass__decoHousePlant1__decoHousePlant1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHousePlant1_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPicture_11.decoPicture_10_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_11__decoPicture_10_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_10_C, 0x0446);
		}

		// BlueprintGeneratedClass navArea_GovRestricted.navArea_GovRestricted_C
		TEST_METHOD(BlueprintGeneratedClass__navArea_GovRestricted__navArea_GovRestricted_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnavArea_GovRestricted_C, 0x0048);
		}

		// BlueprintGeneratedClass streetPersonFemale02BP.streetPersonFemale02BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale02BP__streetPersonFemale02BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale02BP_C, 0x0AD4);
		}

		// AnimBlueprintGeneratedClass CitizenMale02_animBP.CitizenMale02_animBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__CitizenMale02_animBP__CitizenMale02_animBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_Root_2593A7FA4E0F50D926F24DA67EE45E03, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_TransitionResult_9AE92CF74F4C39142C9408BD3C23CFCD, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_TransitionResult_D5ED19BE4AC337301C76D6A7CBC21522, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_TransitionResult_2318AC42437256D781E3E499F9F3FA3C, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_TransitionResult_E5C2513249A59FAEB1C754B5BE0920BE, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_SequencePlayer_A825970B4B825BA9B5B246BD135D1A55, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_StateResult_86E158CE4E3ED28C378A63809363DABC, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_SequencePlayer_EEA263794374854EA3820988BE2A3950, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_StateResult_401A53424C32601C0368228FF65E2D8E, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_BlendSpacePlayer_94E154A84117FF85A3CB4184C647F151, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_StateResult_A21CDBBC4F087D876C31948CAF01B2C5, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, AnimGraphNode_StateMachine_82368E154DD03348ABA997816FA23527, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, RotRate, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, Speed, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, Velocity, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, UnknownData_MLJH, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale02_animBP_C, Owner, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCitizenMale02_animBP_C, 0x08E8);
		}

		// BlueprintGeneratedClass worldCustomMarker.worldCustomMarker_C
		TEST_METHOD(BlueprintGeneratedClass__worldCustomMarker__worldCustomMarker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldCustomMarker_C, UnknownData_DKO6, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldCustomMarker_C, UberGraphFrame, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworldCustomMarker_C, 0x03C8);
		}

		// BlueprintGeneratedClass InteractionInterface.InteractionInterface_C
		TEST_METHOD(BlueprintGeneratedClass__InteractionInterface__InteractionInterface_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionInterface_C, 0x0028);
		}

		// BlueprintGeneratedClass appartmentViewerPawn.appartmentViewerPawn_C
		TEST_METHOD(BlueprintGeneratedClass__appartmentViewerPawn__appartmentViewerPawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, SpringArm, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, Rotator, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, Camera, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, DefaultSceneRoot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, camSpeed, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, camArmLength, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, camRotOffset, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, UnknownData_PH51, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentViewerPawn_C, allStreamActors, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AappartmentViewerPawn_C, 0x03D0);
		}

		// BlueprintGeneratedClass creditsCamera.creditsCamera_C
		TEST_METHOD(BlueprintGeneratedClass__creditsCamera__creditsCamera_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AcreditsCamera_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcreditsCamera_C, Camera, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcreditsCamera_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcreditsCamera_C, RotRate, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcreditsCamera_C, 0x0344);
		}

		// BlueprintGeneratedClass difficultyManager.difficultyManager_C
		TEST_METHOD(BlueprintGeneratedClass__difficultyManager__difficultyManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdifficultyManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdifficultyManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdifficultyManager_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdifficultyManager_C, defaultDifficulty, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdifficultyManager_C, curDifficulty, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdifficultyManager_C, hcAvailable, 0x0342);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdifficultyManager_C, 0x0343);
		}

		// BlueprintGeneratedClass laptopGizmo.laptopGizmo_C
		TEST_METHOD(BlueprintGeneratedClass__laptopGizmo__laptopGizmo_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaptopGizmo_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlaptopGizmo_C, 0x07D8);
		}

		// BlueprintGeneratedClass BP_AS_Ergolina.BP_AS_Ergolina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Ergolina__BP_AS_Ergolina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Ergolina_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Ergolina_C, 0x03F0);
		}

		// BlueprintGeneratedClass ActiveBush_Green02.ActiveBush_Green02_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Green02__ActiveBush_Green02_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Green02_C, 0x0348);
		}

		// BlueprintGeneratedClass BP_Open_Wagon.BP_Open_Wagon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Open_Wagon__BP_Open_Wagon_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, UnknownData_Y74E, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, SM_Wagon_Open, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, SM_Wagon_L_F_Door, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, SM_Wagon_Hatch, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, SM_Wagon_L_B_Door, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, SM_Wagon_R_B_Door, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Open_Wagon_C, SM_Wagon_R_F_Door, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Open_Wagon_C, 0x0398);
		}

		// BlueprintGeneratedClass eqShopSectorC.eqShopSectorC_C
		TEST_METHOD(BlueprintGeneratedClass__eqShopSectorC__eqShopSectorC_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeqShopSectorC_C, 0x03E9);
		}

		// BlueprintGeneratedClass SectorC_FurnitureSalesemanDialogue.SectorC_FurnitureSalesemanDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__SectorC_FurnitureSalesemanDialogue__SectorC_FurnitureSalesemanDialogue_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASectorC_FurnitureSalesemanDialogue_C, 0x0392);
		}

		// BlueprintGeneratedClass stonePreacherFixer.stonePreacherFixer_C
		TEST_METHOD(BlueprintGeneratedClass__stonePreacherFixer__stonePreacherFixer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstonePreacherFixer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstonePreacherFixer_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstonePreacherFixer_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstonePreacherFixer_C, overlappedNPCs, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstonePreacherFixer_C, 0x0350);
		}

		// BlueprintGeneratedClass computerMirror.computerMirror_C
		TEST_METHOD(BlueprintGeneratedClass__computerMirror__computerMirror_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, Camera, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, Box, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, blockReopen, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, userLogged, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, UnknownData_5EE7, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, Interface, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcomputerMirror_C, originalComputer, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcomputerMirror_C, 0x0460);
		}

		// BlueprintGeneratedClass SectorC_GateGuardDialogue.SectorC_GateGuardDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__SectorC_GateGuardDialogue__SectorC_GateGuardDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorC_GateGuardDialogue_C, UnknownData_43X1, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorC_GateGuardDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorC_GateGuardDialogue_C, Gate, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASectorC_GateGuardDialogue_C, 0x03A8);
		}

		// WidgetBlueprintGeneratedClass policePenaltyWidget.policePenaltyWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__policePenaltyWidget__policePenaltyWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpolicePenaltyWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpolicePenaltyWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpolicePenaltyWidget_C, txtAmount, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpolicePenaltyWidget_C, txtReason, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpolicePenaltyWidget_C, 0x0228);
		}

		// BlueprintGeneratedClass WoodenBulletinSingleLarge_BP.WoodenBulletinSingleLarge_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodenBulletinSingleLarge_BP__WoodenBulletinSingleLarge_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, LampA, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, AddLamps, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, TurnOnLights, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, UnknownData_N22H, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinSingleLarge_BP_C, FaceMaterial, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodenBulletinSingleLarge_BP_C, 0x0350);
		}

		// BlueprintGeneratedClass TunnelPieceSmall_BP.TunnelPieceSmall_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TunnelPieceSmall_BP__TunnelPieceSmall_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelPieceSmall_BP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelPieceSmall_BP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelPieceSmall_BP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATunnelPieceSmall_BP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATunnelPieceSmall_BP_C, 0x033D);
		}

		// BlueprintGeneratedClass dialShopDecorations.dialShopDecorations_C
		TEST_METHOD(BlueprintGeneratedClass__dialShopDecorations__dialShopDecorations_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialShopDecorations_C, UnknownData_T0JF, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialShopDecorations_C, UberGraphFrame, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdialShopDecorations_C, 0x03A0);
		}

		// BlueprintGeneratedClass BP_Gas_Tank_White.BP_Gas_Tank_White_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gas_Tank_White__BP_Gas_Tank_White_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Gas_Tank_White_C, Gas_Tank_White, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Gas_Tank_White_C, 0x0330);
		}

		// BlueprintGeneratedClass BP_Truck01_Dump2.BP_Truck01_Dump2_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Truck01_Dump2__BP_Truck01_Dump2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, StaticMeshComponent01, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, StaticMeshComponent0, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, StaticMeshComponent04, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, StaticMeshComponent05, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, StaticMeshComponent03, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, StaticMeshComponent02, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump2_C, SharedRoot, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Truck01_Dump2_C, 0x0360);
		}

		// WidgetBlueprintGeneratedClass dialogueWidget.dialogueWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__dialogueWidget__dialogueWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, showAnswers, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, newDialogue, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, Enter, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, Image_3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, Image_4, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, progRiskFactor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, respHolder, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, txtDialLine, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, txtTalkerName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, txtTransactionRisk, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, curDialogueRef, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, dialogueLines, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, endQuestList, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, endQuestSelf, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueWidget_C, activeElementsColor, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdialogueWidget_C, 0x02D0);
		}

		// BlueprintGeneratedClass lsdEffectSmallTree.lsdEffectSmallTree_C
		TEST_METHOD(BlueprintGeneratedClass__lsdEffectSmallTree__lsdEffectSmallTree_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlsdEffectSmallTree_C, UnknownData_LUN6, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlsdEffectSmallTree_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlsdEffectSmallTree_C, treeMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlsdEffectSmallTree_C, EndScale, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlsdEffectSmallTree_C, tempScale, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlsdEffectSmallTree_C, 0x0370);
		}

		// BlueprintGeneratedClass laBallena.laBallena_C
		TEST_METHOD(BlueprintGeneratedClass__laBallena__laBallena_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Audio, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Box, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_1_Amount_7B4DEB9C4D36404A4744EAB763D498AF, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_1__Direction_7B4DEB9C4D36404A4744EAB763D498AF, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, UnknownData_B1QW, 0x075D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_2, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_0_U_pose_E76EA01F48533E595B08F999C656F380, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_0_A_pose_E76EA01F48533E595B08F999C656F380, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_0__Direction_E76EA01F48533E595B08F999C656F380, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, UnknownData_9CHN, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, Timeline_1, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, curDialogueWidget, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, isSpeaking, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, UnknownData_EBMH, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, AnimBP, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, sitingPawn, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, tempTransform, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, overlappingBallenas, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlaBallena_C, TheOriginal, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlaBallena_C, 0x07E1);
		}

		// BlueprintGeneratedClass shopExpositionModel_HangingPlant.shopExpositionModel_HangingPlant_C
		TEST_METHOD(BlueprintGeneratedClass__shopExpositionModel_HangingPlant__shopExpositionModel_HangingPlant_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopExpositionModel_HangingPlant_C, SM_HFullPot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopExpositionModel_HangingPlant_C, StaticMesh, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopExpositionModel_HangingPlant_C, DisplayName, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopExpositionModel_HangingPlant_C, ProductModel, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopExpositionModel_HangingPlant_C, 0x0458);
		}

		// BlueprintGeneratedClass decoPosterDDS2.decoPosterDDS2_C
		TEST_METHOD(BlueprintGeneratedClass__decoPosterDDS2__decoPosterDDS2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPosterDDS2_C, 0x0446);
		}

		// BlueprintGeneratedClass decoTrashArtPiece.decoTrashArtPiece_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashArtPiece__decoTrashArtPiece_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashArtPiece_C, 0x0446);
		}

		// BlueprintGeneratedClass ws_deskIndustrialLarge.ws_deskIndustrialLarge_C
		TEST_METHOD(BlueprintGeneratedClass__ws_deskIndustrialLarge__ws_deskIndustrialLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_deskIndustrialLarge_C, 0x04C5);
		}

		// BlueprintGeneratedClass ws_shelfLarge.ws_shelfLarge_C
		TEST_METHOD(BlueprintGeneratedClass__ws_shelfLarge__ws_shelfLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_shelfLarge_C, 0x04C5);
		}

		// BlueprintGeneratedClass decoTableHousePlant1.decoTableHousePlant1_C
		TEST_METHOD(BlueprintGeneratedClass__decoTableHousePlant1__decoTableHousePlant1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTableHousePlant1_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_TDE_Diamorfina.BP_TDE_Diamorfina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Diamorfina__BP_TDE_Diamorfina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Diamorfina_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Diamorfina_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Diamorfina_C, 0x04C0);
		}

		// BlueprintGeneratedClass BP_TDE_Metaamfetamina.BP_TDE_Metaamfetamina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Metaamfetamina__BP_TDE_Metaamfetamina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Metaamfetamina_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Metaamfetamina_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Metaamfetamina_C, 0x04C0);
		}

		// WidgetBlueprintGeneratedClass miniTaskListItem.miniTaskListItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__miniTaskListItem__miniTaskListItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, checked, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, bgImage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, CheckBox, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, deliveryIcon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, txtTaskNam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UminiTaskListItem_C, TaskID, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UminiTaskListItem_C, 0x023C);
		}

		// WidgetBlueprintGeneratedClass weedPlanyMarker.weedPlanyMarker_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__weedPlanyMarker__weedPlanyMarker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedPlanyMarker_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UweedPlanyMarker_C, 0x0210);
		}

		// BlueprintGeneratedClass suitcaseBP.suitcaseBP_C
		TEST_METHOD(BlueprintGeneratedClass__suitcaseBP__suitcaseBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsuitcaseBP_C, UnknownData_ZOHQ, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsuitcaseBP_C, UberGraphFrame, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsuitcaseBP_C, 0x0600);
		}

		// BlueprintGeneratedClass equipmentShopDrugstore.equipmentShopDrugstore_C
		TEST_METHOD(BlueprintGeneratedClass__equipmentShopDrugstore__equipmentShopDrugstore_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShopDrugstore_C, UnknownData_PEFO, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShopDrugstore_C, UberGraphFrame, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AequipmentShopDrugstore_C, 0x03F8);
		}

		// WidgetBlueprintGeneratedClass shadyCommWarningBar.shadyCommWarningBar_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__shadyCommWarningBar__shadyCommWarningBar_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, Ping, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, mainCanvas, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, TextBlock_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommWarningBar_C, txtWarning, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UshadyCommWarningBar_C, 0x0240);
		}

		// BlueprintGeneratedClass clubBodyguardSpot02.clubBodyguardSpot02_C
		TEST_METHOD(BlueprintGeneratedClass__clubBodyguardSpot02__clubBodyguardSpot02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AclubBodyguardSpot02_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclubBodyguardSpot02_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AclubBodyguardSpot02_C, 0x0338);
		}

		// Class AppleVision.AppleVisionDetectFacesAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AppleVision__AppleVisionDetectFacesAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, UnknownData_4W0E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, UnknownData_IY79, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, FaceDetectionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, UnknownData_MO9S, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, 0x0078);
		}

		// BlueprintGeneratedClass keyFactoryPass.keyFactoryPass_C
		TEST_METHOD(BlueprintGeneratedClass__keyFactoryPass__keyFactoryPass_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeyFactoryPass_C, 0x05A8);
		}

		// BlueprintGeneratedClass valNecklace.valNecklace_C
		TEST_METHOD(BlueprintGeneratedClass__valNecklace__valNecklace_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvalNecklace_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageTin.garbageTin_C
		TEST_METHOD(BlueprintGeneratedClass__garbageTin__garbageTin_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageTin_C, 0x05A8);
		}

		// BlueprintGeneratedClass fluidMixerLargeLabTray.fluidMixerLargeLabTray_C
		TEST_METHOD(BlueprintGeneratedClass__fluidMixerLargeLabTray__fluidMixerLargeLabTray_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerLargeLabTray_C, UberGraphFrame, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerLargeLabTray_C, contentMesh, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerLargeLabTray_C, contentScale, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfluidMixerLargeLabTray_C, 0x0864);
		}

		// BlueprintGeneratedClass weedStrain_StonerHaze.weedStrain_StonerHaze_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_StonerHaze__weedStrain_StonerHaze_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_StonerHaze_C, 0x05A0);
		}

		// BlueprintGeneratedClass doorsExtMetal02.doorsExtMetal02_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtMetal02__doorsExtMetal02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtMetal02_C, UnknownData_FWT2, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtMetal02_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtMetal02_C, LaundryDoor, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtMetal02_C, 0x0539);
		}

		// BlueprintGeneratedClass eddieBlantBP.eddieBlantBP_C
		TEST_METHOD(BlueprintGeneratedClass__eddieBlantBP__eddieBlantBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieBlantBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieBlantBP_C, ParticleSystem, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieBlantBP_C, blantEddie, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieBlantBP_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeddieBlantBP_C, 0x0348);
		}

		// BlueprintGeneratedClass sebiksSpawnPoint.sebiksSpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__sebiksSpawnPoint__sebiksSpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksSpawnPoint_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksSpawnPoint_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsebiksSpawnPoint_C, 0x0338);
		}

		// BlueprintGeneratedClass filterPatrolPathOnly.filterPatrolPathOnly_C
		TEST_METHOD(BlueprintGeneratedClass__filterPatrolPathOnly__filterPatrolPathOnly_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfilterPatrolPathOnly_C, 0x0048);
		}

		// WidgetBlueprintGeneratedClass policemanMarkerWidget.policemanMarkerWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__policemanMarkerWidget__policemanMarkerWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpolicemanMarkerWidget_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpolicemanMarkerWidget_C, 0x0210);
		}

		// BlueprintGeneratedClass policeDogCrowdCon.policeDogCrowdCon_C
		TEST_METHOD(BlueprintGeneratedClass__policeDogCrowdCon__policeDogCrowdCon_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceDogCrowdCon_C, UberGraphFrame, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceDogCrowdCon_C, 0x0440);
		}

		// BlueprintGeneratedClass sampleClientCheckTime.sampleClientCheckTime_C
		TEST_METHOD(BlueprintGeneratedClass__sampleClientCheckTime__sampleClientCheckTime_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientCheckTime_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsampleClientCheckTime_C, 0x00A0);
		}

		// WidgetBlueprintGeneratedClass shadyCommInterface.shadyCommInterface_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__shadyCommInterface__shadyCommInterface_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, optionsOpen, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, appOpen, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, allBg, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, areaDataList, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, areaDataScroll, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, areaDetailsPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, areaUnlockList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, bankHintCloudWidget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, boostersPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnAddToOrder, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnAskMeeting, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnBankAccount, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnBuyPtc01, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnCancelPrice, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnCloseOptions, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnConfirmOrder, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnDeclineOrder, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnDesktop, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnDontHire, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnEddieCash, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnHideoutsOffer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnHire, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnHireAdditional, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnHireDealer, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnMakeOrder, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnMarkRead, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnNotHireDealer, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnOpenOptions, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnPtcCancel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnSavePrice, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnSendMessage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnUserOptions, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnWarningBack, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, btnWarningConfirm, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Button_3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Button_4, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Button_5, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, buyPTCPanel, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, BuyPtcSourceCombo, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, contactList, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, curContactPanel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, desktopPanel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, drugListPanel, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, drugListScroll, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, drugPriceEditInput, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, drugPriceEditPopup, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, drugPriceListing, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, drugSalePricesScreen, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, expectationsPanel, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_3, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_6, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_7, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_8, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_9, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_10, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_11, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_12, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_13, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, Image_14, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, inputBg, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, leftBg, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, loginBg, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, loginOverlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, mainAppHolder, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, markAsReadPanel, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, messageList, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, optionButtons, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, optionPanelBg, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, optionsBg, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, optionsPanel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, optionSteps, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, orderDeleteBin, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, orderDropOverlay, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, orderScreen, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, overBlur, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, priceConfirmFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, progClamp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, progClientExpectation, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, progProgress, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, progUnlockProgress, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, reputationChartWidget, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, reqPanel, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, respectHolder, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, saleAreaManagementWidget, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, saleAreaPanel, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, shadyLogoSmall, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, SpinBoxPTC, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, TextBlock_29, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, TextBlock_32, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, TextBlock_45, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, TextBlock_47, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, topBg, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtAddButton, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtAreaNam, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtConfirmOrder, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtCurUserHeading, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtExpBoost, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtHireAdditional, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtHireButton, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtHiredForTime, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtIsTyping, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtPriceWarning, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtRespBoost, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtRespDropBoost, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtRespectAmount, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtSaleBoost, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtStatusClientSatisfaction, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtStatusDeliveryTime, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtUnlockArea, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtUnlockAreasHeading, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtUnlockedAreasHeading, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtUnlockLevel, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtUnlockRespect, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtUserMainName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtWalletCrypto, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, txtWalletCryptoPrice, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, unlockProgressHolder, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, userOptionsPanel, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, walletPanel, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, warningHolder, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, parentRef, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, curSelectedUser, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, curEditedPrice, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, NewVar_1, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, bankWidget, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, baseHireTime, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, averageDeliveryTime, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, meetingQuery, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, tempSpawnTaskID, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, UnknownData_RIMU, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, dealerResponseQueueID, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, dealerResponseQueuePositive, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, psychedelicContactGuyIndex, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, curScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, curShear, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, curAngle, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, randShear, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, randScale, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, randAngle, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, filtersEnabled, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, filterSectorA, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, filterSectorB, 0x065E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, filterAddicted, 0x065F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, ArrestListOpen, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, UnknownData_FMD4, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, ArrestListRef, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommInterface_C, ChosenPtcSourceIndex, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UshadyCommInterface_C, 0x0674);
		}

		// WidgetBlueprintGeneratedClass EquipmentShopInterfaceWidget.EquipmentShopInterfaceWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__EquipmentShopInterfaceWidget__EquipmentShopInterfaceWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, allCover, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, appartmentList, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, btnCloseShop, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, btnConfirmAddress, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, btnOrderPay, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, btnShowAll, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, btnShowDeco, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, btnShowFunctional, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, checkountListPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, deliveryPanel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, deliverySteps, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, equipmentList, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, Image_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, Image_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, Image_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, Image_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, itemGridPanel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, itemList, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, orderPayCover, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, txtAccBalance, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, txtBasketNumCash, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, txtBasketNumItems, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, txtCardVerication, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, txtShopName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, AvailableItemNames, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, availableItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, availableItemPrices, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, availableItemQuantity, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, CheckoutItemNames, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, checkoutItems, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, checkoutItemQuantity, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, checkoutItemSourceIndex, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, curItemRow, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, curItemColumn, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, scrollWidth, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, numColumns, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, curItemNum, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, curOrderValue, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, appartmentManager, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, selectedDeliveryIndex, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, UnknownData_WF3G, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, equipmentShopRef, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, isFinalising, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, UnknownData_F5RD, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, cardPaymentTitle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, setShowFunctional, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, setShowDeco, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, UnknownData_ECD7, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, ShopDatabase, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEquipmentShopInterfaceWidget_C, CurHideoutList, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEquipmentShopInterfaceWidget_C, 0x03C8);
		}

		// Class EditableMesh.EditableMesh
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_Y05X, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_03DJ, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_EUKJ, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0620);
		}

		// Class EditableMesh.EditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// Class EditableMesh.EditableMeshFactory
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// Class EditableMesh.EditableStaticMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_38N1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// Class MobilePatchingUtils.MobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_X5ZY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// Class MobilePatchingUtils.MobilePendingContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_EQ3D, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// Class MobilePatchingUtils.MobilePatchingLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// WidgetBlueprintGeneratedClass sprayActionWidget.sprayActionWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__sprayActionWidget__sprayActionWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsprayActionWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsprayActionWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsprayActionWidget_C, progProgress, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsprayActionWidget_C, txtAction, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsprayActionWidget_C, 0x0228);
		}

		// WidgetBlueprintGeneratedClass packageProductWidget.packageProductWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__packageProductWidget__packageProductWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, Border, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, border2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, btnAddInventory, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, btnAddPackage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, btnCancel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, errorPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, packageList, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, TextBlock_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, txtNoPackages, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, txtProductName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, txtTotalMass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, MixerRef, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, nameLenLimit, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, UnknownData_WWGU, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, productData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, ProductMixProportions, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, productID, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, Equipment, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, tempString, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, massTotalLast, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, massPackageLast, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, demandedQuantitySet, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, demandedPackageSizeSet, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, packagesGrams, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, packagesQuantity, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, listTotalMass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, UnknownData_9KB4, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpackageProductWidget_C, activeElementColor, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpackageProductWidget_C, 0x0400);
		}

		// WidgetBlueprintGeneratedClass itemDropWidget.itemDropWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__itemDropWidget__itemDropWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UitemDropWidget_C, bg, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UitemDropWidget_C, 0x0210);
		}

		// BlueprintGeneratedClass decoPicture_07.decoPicture_07_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_07__decoPicture_07_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_07_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPosterLFB1.decoPosterLFB1_C
		TEST_METHOD(BlueprintGeneratedClass__decoPosterLFB1__decoPosterLFB1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPosterLFB1_C, 0x0446);
		}

		// WidgetBlueprintGeneratedClass atmUI.atmUI_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__atmUI__atmUI_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, bg, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnBalanceBack, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnCancel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnCheckBalance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnCustomBack, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnDepoAccept, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnDeposite, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnDepositeBack, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWith100, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWith1000, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWith250, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWith500, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWithAccept, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWithBack, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWithCustom, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWithdraw, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, btnWithdrawErrorBack, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, dark, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, depositeAmountInput, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_4, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_6, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_7, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_8, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_9, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_10, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_11, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_12, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_13, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_14, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_18, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Image_21, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, pointasd, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, pointDepoAccept, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, Pointer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, pointWithAccept, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, screenSwitcher, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_5, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_7, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_8, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_9, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_10, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_11, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_18, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_28, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_30, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_32, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, TextBlock_35, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, txtAccountBalance, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, txtNoBillWarning, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, txtScreenName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, withCustomInput, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, parentRef, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, loadingDelay, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, loadingDelayShort, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, adDelay, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, UnknownData_HPI1, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, operationTitleWithdraw, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, operationSourceNam, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UatmUI_C, opertionTitleDeposite, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UatmUI_C, 0x0418);
		}

		// WidgetBlueprintGeneratedClass tutorialTipWidget.tutorialTipWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__tutorialTipWidget__tutorialTipWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UtutorialTipWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtutorialTipWidget_C, arrowLoop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtutorialTipWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtutorialTipWidget_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtutorialTipWidget_C, txtTutDesc, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtutorialTipWidget_C, 0x0230);
		}

		// WidgetBlueprintGeneratedClass lockpickWidget.lockpickWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__lockpickWidget__lockpickWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, Image_3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, overBlur, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, TextBlock_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, txtBobbyPinCount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, outerAngle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, innerAngle, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, multiplier1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, multiplier2, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, rotTempo, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, rotTempoTarget, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, rotTempo2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, rotTempoTarget2, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, outerCompare, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, innerCompare, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, Match, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, UnknownData_8RX2, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, lockpickStep, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, Unlocked, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, UnknownData_JPOE, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, failTimes, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, lockpickPuzzleRef, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, lockPressed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, UnknownData_MT5Q, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, curScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, curShear, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, curAngle, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, randScale, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, randShear, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, randAngle, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, UnknownData_0LF2, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlockpickWidget_C, activeElementColor, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlockpickWidget_C, 0x02C8);
		}

		// BlueprintGeneratedClass flashBangShake.flashBangShake_C
		TEST_METHOD(BlueprintGeneratedClass__flashBangShake__flashBangShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UflashBangShake_C, 0x0160);
		}

		// WidgetBlueprintGeneratedClass introCutsceneWidget.introCutsceneWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__introCutsceneWidget__introCutsceneWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, subtitleFadeBlink, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, beatPoint, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, subtitleFade, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, blackFade, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, beatImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, Black, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UintroCutsceneWidget_C, txtSubtitle, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UintroCutsceneWidget_C, 0x0240);
		}

		// WidgetBlueprintGeneratedClass inventoryErrorWidget.inventoryErrorWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__inventoryErrorWidget__inventoryErrorWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryErrorWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryErrorWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryErrorWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryErrorWidget_C, txtWarning, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UinventoryErrorWidget_C, 0x0228);
		}

		// BlueprintGeneratedClass smuggleLocation.smuggleLocation_C
		TEST_METHOD(BlueprintGeneratedClass__smuggleLocation__smuggleLocation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, locationName, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, nightOnly, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, dayOnly, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, available, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, UnknownData_QOML, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmuggleLocation_C, locationIDNam, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmuggleLocation_C, 0x0378);
		}

		// BlueprintGeneratedClass keyAppartment.keyAppartment_C
		TEST_METHOD(BlueprintGeneratedClass__keyAppartment__keyAppartment_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeyAppartment_C, 0x05A8);
		}

		// BlueprintGeneratedClass valGoldBar.valGoldBar_C
		TEST_METHOD(BlueprintGeneratedClass__valGoldBar__valGoldBar_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvalGoldBar_C, 0x05A8);
		}

		// BlueprintGeneratedClass valPhone.valPhone_C
		TEST_METHOD(BlueprintGeneratedClass__valPhone__valPhone_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvalPhone_C, 0x05A8);
		}

		// BlueprintGeneratedClass sprayPaintBP.sprayPaintBP_C
		TEST_METHOD(BlueprintGeneratedClass__sprayPaintBP__sprayPaintBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPaintBP_C, UberGraphFrame, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsprayPaintBP_C, 0x05B0);
		}

		// Class PhysXVehicles.WheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_MUPR, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_FSU1, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_GUHD, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_BGQT, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_GFJD, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_FX8L, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_FN3R, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_6KEM, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x02D0);
		}

		// Class PhysXVehicles.SimpleWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x02D0);
		}

		// Class PhysXVehicles.TireConfig
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_12AA, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_CTS7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// Class PhysXVehicles.VehicleAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_TW9I, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_VP6N, 0x08F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0900);
		}

		// Class PhysXVehicles.VehicleWheel
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_EA5V, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_S0H3, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_WMRW, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_SW10, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_HCH0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_9ITO, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// Class PhysXVehicles.WheeledVehicle
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0398);
		}

		// Class PhysXVehicles.WheeledVehicleMovementComponent4W
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0428);
		}

		// BlueprintGeneratedClass sprayPlacementGizmo.sprayPlacementGizmo_C
		TEST_METHOD(BlueprintGeneratedClass__sprayPlacementGizmo__sprayPlacementGizmo_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, sprayLoop, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Decal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Box, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Arrow3, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Arrow2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Arrow1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, Arrow, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, lineTraceOffsets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, hitRegister, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, canSpray, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, actionHeld, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, UnknownData_4UXD, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, heldTimer, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, holdTimePlacement, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, UnknownData_6MRG, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, saleAreaManager, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, active, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, UnknownData_GJM7, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, tempYawMin, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, tempYawMax, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, tempPitchMin, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, tempPitchMax, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, blockDestruction, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, controlRotSetup, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, UnknownData_AQ6A, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsprayPlacementGizmo_C, dynMatDecal, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsprayPlacementGizmo_C, 0x03D0);
		}

		// BlueprintGeneratedClass keijiDeadDrop.keijiDeadDrop_C
		TEST_METHOD(BlueprintGeneratedClass__keijiDeadDrop__keijiDeadDrop_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiDeadDrop_C, UberGraphFrame, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeijiDeadDrop_C, 0x0520);
		}

		// BlueprintGeneratedClass backpackLargeBP.backpackLargeBP_C
		TEST_METHOD(BlueprintGeneratedClass__backpackLargeBP__backpackLargeBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackLargeBP_C, 0x05F5);
		}

		// BlueprintGeneratedClass duffleBackBP.duffleBackBP_C
		TEST_METHOD(BlueprintGeneratedClass__duffleBackBP__duffleBackBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AduffleBackBP_C, 0x05F5);
		}

		// BlueprintGeneratedClass SmuggleBox.SmuggleBox_C
		TEST_METHOD(BlueprintGeneratedClass__SmuggleBox__SmuggleBox_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmuggleBox_C, UnknownData_OBTP, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmuggleBox_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmuggleBox_C, SM_Cardboard_box_01, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmuggleBox_C, OtherBox, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmuggleBox_C, Sent, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASmuggleBox_C, 0x0511);
		}

		// BlueprintGeneratedClass garbageCup.garbageCup_C
		TEST_METHOD(BlueprintGeneratedClass__garbageCup__garbageCup_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageCup_C, 0x05A8);
		}

		// BlueprintGeneratedClass BP_AS_THC.BP_AS_THC_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_THC__BP_AS_THC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_THC_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_THC_C, 0x03F0);
		}

		// BlueprintGeneratedClass ballenaMoneyMan.ballenaMoneyMan_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaMoneyMan__ballenaMoneyMan_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaMoneyMan_C, UnknownData_UP3V, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaMoneyMan_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaMoneyMan_C, moneySpawn, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaMoneyMan_C, waitingForPlayer, 0x0AE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaMoneyMan_C, 0x0AE9);
		}

		// BlueprintGeneratedClass streetPersonFemale08BP.streetPersonFemale08BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale08BP__streetPersonFemale08BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale08BP_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass drugTakenWidget.drugTakenWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__drugTakenWidget__drugTakenWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugTakenWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugTakenWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugTakenWidget_C, txtTookDrug, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdrugTakenWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass PM_GetGetPatrolPoint.PM_GetGetPatrolPoint_C
		TEST_METHOD(BlueprintGeneratedClass__PM_GetGetPatrolPoint__PM_GetGetPatrolPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetGetPatrolPoint_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetGetPatrolPoint_C, randomPointNum, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_GetGetPatrolPoint_C, 0x00AC);
		}

		// BlueprintGeneratedClass AudioDrugEffect.AudioDrugEffect_C
		TEST_METHOD(BlueprintGeneratedClass__AudioDrugEffect__AudioDrugEffect_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, binaural, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, VoiceHal, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, soundHal, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, heartbeat, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, DefaultSceneRoot, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioDrugEffect_C, binauralEnabled, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioDrugEffect_C, 0x04E1);
		}

		// BlueprintGeneratedClass drugMillBase.drugMillBase_C
		TEST_METHOD(BlueprintGeneratedClass__drugMillBase__drugMillBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugMillBase_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdrugMillBase_C, 0x07D8);
		}

		// BlueprintGeneratedClass mainComputer.mainComputer_C
		TEST_METHOD(BlueprintGeneratedClass__mainComputer__mainComputer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, Laptop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, RamaSave_1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, Camera, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, Box, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, contactList, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, contactNumMessages, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, contactNumMessagesRead, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, contactListFriend, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, Interface, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsAvailableIDs, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsAvailable, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsUnlocked, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsSaleEnabled, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsCantSell, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsToUnlock, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugsUnlockLevel, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugPrices, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugSalePrices, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, drugExpectedPrices, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerOrderLimit, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerOrderLimitMax, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerCryptoCount, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, cryptoCurrencyPrice, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerBankMoney, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_AVZ0, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgOrderRandomStarts, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, MsgString, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgOrderRandomEndings, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, messagesList, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, messagesUsers, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, messagesMine, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, orderList, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, orderReady, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, responseMsgString, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgOrderResponses, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgOrderDeclineResponses, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgPriceChangeResponses, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, lastSmuggleLocationID, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgOrderResponseSMS, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerCreditAmountTotal, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerCreditAmountLeft, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerCreditPayAmount, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerCreditDayTaken, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, playerCreditDayPayment, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, yourAvatar, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, userLogged, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_1QIL, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, msgConfirmOrderResponses, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, computerActivated, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, firstLaunch, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, eddieWaitingForPlayer, 0x06A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, orderingDrugsAvailable, 0x06A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, bankAvailable, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_711B, 0x06A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, maxDebt, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_R5MG, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, bankOperationsIncome, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, bankOperationsAmount, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, bankOperationsTitle, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, bankOperationsSource, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, nextBenefitPayday, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_K1XI, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, benefitPaymentTitle, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, benefitPaymentSource, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, bankFirstLaunch, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_E5JK, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, lastDebtSMS, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, launderingAvailable, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_0S6U, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, statsManager, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, oneGramSizeScale, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, oneGramWeightScale, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, blockReopen, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, UnknownData_GNJI, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, illegalIncomeTotal, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, illegalIncomeMax, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, illegalIncomeDPS, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, PsychedelicDrugIDs, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, psychedelicsOffer, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, psychedelicsPrice, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, psychedelicsSellPrice, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, psychedelicsExpectedPrice, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, DrugDatabase, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, MoneyLaunderedTotal, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, MoneyToLaunder, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, MoneyLaunderLevel, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, LastLaunderDay, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, LaunderingDataTable, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, PlayerEddieDebt, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainComputer_C, ViewingApartments, 0x07CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmainComputer_C, 0x07CD);
		}

		// BlueprintGeneratedClass weedStrain_Brainfuck.weedStrain_Brainfuck_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_Brainfuck__weedStrain_Brainfuck_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_Brainfuck_C, 0x05A0);
		}

		// BlueprintGeneratedClass weedStrain_Firecracker.weedStrain_Firecracker_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_Firecracker__weedStrain_Firecracker_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_Firecracker_C, 0x05A0);
		}

		// BlueprintGeneratedClass decoHousePlant3.decoHousePlant3_C
		TEST_METHOD(BlueprintGeneratedClass__decoHousePlant3__decoHousePlant3_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHousePlant3_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoVase1.BP_decoVase1_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoVase1__BP_decoVase1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoVase1_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoVase2.BP_decoVase2_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoVase2__BP_decoVase2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoVase2_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_TDE_MDMA.BP_TDE_MDMA_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_MDMA__BP_TDE_MDMA_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_MDMA_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_MDMA_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_MDMA_C, 0x04C0);
		}

		// BlueprintGeneratedClass BP_TDE_THC.BP_TDE_THC_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_THC__BP_TDE_THC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_THC_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_THC_C, DefaultSceneRoot, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_THC_C, spawnedTree, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_THC_C, rotSpeed, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_THC_C, 0x04CC);
		}

		// BlueprintGeneratedClass randomSampleDialogueInstance.randomSampleDialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__randomSampleDialogueInstance__randomSampleDialogueInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSampleDialogueInstance_C, UnknownData_WQJK, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSampleDialogueInstance_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSampleDialogueInstance_C, clientIsMale, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSampleDialogueInstance_C, UnknownData_P63X, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSampleDialogueInstance_C, randomDialogueLines, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomSampleDialogueInstance_C, firstSetup, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ArandomSampleDialogueInstance_C, 0x03B9);
		}

		// BlueprintGeneratedClass passageTraderDialogue.passageTraderDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__passageTraderDialogue__passageTraderDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTraderDialogue_C, UnknownData_CL3A, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTraderDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTraderDialogue_C, curPrice, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApassageTraderDialogue_C, respawned, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApassageTraderDialogue_C, 0x03A5);
		}

		// BlueprintGeneratedClass dialogueInstance.dialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__dialogueInstance__dialogueInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, dialogueAudio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, Collision, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, DialogueID, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, firstDialougueID, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, startDialogueID, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, tradeReturnID, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, firstLaunched, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, UnknownData_1MG9, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, dialogueLines, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, startOnOverlap, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, UnknownData_4A4P, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, talkerRef, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, blockEscapeExit, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdialogueInstance_C, InheritFromDataTable, 0x0391);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdialogueInstance_C, 0x0392);
		}

		// BlueprintGeneratedClass seedSellerBP.seedSellerBP_C
		TEST_METHOD(BlueprintGeneratedClass__seedSellerBP__seedSellerBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerBP_C, UnknownData_SGLB, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AseedSellerBP_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AseedSellerBP_C, 0x0AE0);
		}

		// Class ProceduralMeshComponent.KismetProceduralMeshLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// Class ProceduralMeshComponent.ProceduralMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_OX0X, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_LCM3, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_WHA0, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_LB22, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x05F0);
		}

		// BlueprintGeneratedClass randomTwoTowersSoundPlayer.randomTwoTowersSoundPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__randomTwoTowersSoundPlayer__randomTwoTowersSoundPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomTwoTowersSoundPlayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomTwoTowersSoundPlayer_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomTwoTowersSoundPlayer_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomTwoTowersSoundPlayer_C, soundRangeMin, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArandomTwoTowersSoundPlayer_C, soundRangeMax, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ArandomTwoTowersSoundPlayer_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass debugSkradankowy.debugSkradankowy_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__debugSkradankowy__debugSkradankowy_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, ProgressBar_2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, ProgressBar_3, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, progSuspicion, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, PlayerRef, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, suspicionLevel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, visibilityLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, lightLevel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdebugSkradankowy_C, InterpSpeed, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdebugSkradankowy_C, 0x0240);
		}

		// BlueprintGeneratedClass ProceduralSidewalk300.ProceduralSidewalk300_C
		TEST_METHOD(BlueprintGeneratedClass__ProceduralSidewalk300__ProceduralSidewalk300_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk300_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk300_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk300_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk300_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralSidewalk300_C, 0x033D);
		}

		// BlueprintGeneratedClass ballenaClubManager.ballenaClubManager_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaClubManager__ballenaClubManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, SM_WallBorder_2_4x, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, SM_Door_2_R, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, SM_Door_2_L, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaClubManager_C, music, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaClubManager_C, 0x0360);
		}

		// BlueprintGeneratedClass stobernGateUnlocker.stobernGateUnlocker_C
		TEST_METHOD(BlueprintGeneratedClass__stobernGateUnlocker__stobernGateUnlocker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstobernGateUnlocker_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstobernGateUnlocker_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstobernGateUnlocker_C, GateRef, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstobernGateUnlocker_C, 0x0340);
		}

		// BlueprintGeneratedClass garage3m01.garage3m01_C
		TEST_METHOD(BlueprintGeneratedClass__garage3m01__garage3m01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Agarage3m01_C, UnknownData_8F58, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agarage3m01_C, garageDoorMaterial, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarage3m01_C, 0x0480);
		}

		// BlueprintGeneratedClass smug_Cemetery.smug_Cemetery_C
		TEST_METHOD(BlueprintGeneratedClass__smug_Cemetery__smug_Cemetery_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Asmug_Cemetery_C, 0x0378);
		}

		// BlueprintGeneratedClass smug_sewageTreatment.smug_sewageTreatment_C
		TEST_METHOD(BlueprintGeneratedClass__smug_sewageTreatment__smug_sewageTreatment_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Asmug_sewageTreatment_C, 0x0378);
		}

		// BlueprintGeneratedClass SM_sidewalk_02_BP.SM_sidewalk_02_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SM_sidewalk_02_BP__SM_sidewalk_02_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_02_BP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_02_BP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_02_BP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_02_BP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASM_sidewalk_02_BP_C, 0x033D);
		}

		// BlueprintGeneratedClass BP_Carousel_B.BP_Carousel_B_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Carousel_B__BP_Carousel_B_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Carousel_B_C, Carousel_B, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Carousel_B_C, Carousel_Core_B, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Carousel_B_C, SharedRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Carousel_B_C, 0x0340);
		}

		// BlueprintGeneratedClass doorBreacher.doorBreacher_C
		TEST_METHOD(BlueprintGeneratedClass__doorBreacher__doorBreacher_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, Camera, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, DefaultSceneRoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachAnimation_camYRot_73C8C8154EC4B1294778CEA38CF9408B, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachAnimation_camXPos_73C8C8154EC4B1294778CEA38CF9408B, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachAnimation_camZRot_73C8C8154EC4B1294778CEA38CF9408B, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachAnimation__Direction_73C8C8154EC4B1294778CEA38CF9408B, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, UnknownData_702W, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachAnimation, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breaching, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, UnknownData_TO2H, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachWidget, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, previousPawn, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, doorRef, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, blockBreaching, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, UnknownData_W70O, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, breachPoints, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, circleProgressImages, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBreacher_C, ready, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorBreacher_C, 0x03F1);
		}

		// BlueprintGeneratedClass policeTeleportLocation.policeTeleportLocation_C
		TEST_METHOD(BlueprintGeneratedClass__policeTeleportLocation__policeTeleportLocation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceTeleportLocation_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceTeleportLocation_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceTeleportLocation_C, 0x0338);
		}

		// WidgetBlueprintGeneratedClass appartmentListItem.appartmentListItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__appartmentListItem__appartmentListItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, appImage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, bgImage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, checker, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, txtAddress, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, txtAppertmentNam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, txtMeterage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, Index, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, UnknownData_Z0SC, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, parentRef, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentListItem_C, activeElementsColor, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UappartmentListItem_C, 0x0278);
		}

		// WidgetBlueprintGeneratedClass workStationListWidget.workStationListWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__workStationListWidget__workStationListWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, imgSelected, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, itemIcon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, mainCanvas, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, txtAmount, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, txtForm, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, txtNam, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, txtQuan, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, itemDescription, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, Quantity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, UnknownData_3Y27, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, InvData, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, EqData, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, Amount, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, InvGuid, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, UnknownData_6EWR, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationListWidget_C, MixProportions, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UworkStationListWidget_C, 0x0420);
		}

		// BlueprintGeneratedClass alarmClockBP.alarmClockBP_C
		TEST_METHOD(BlueprintGeneratedClass__alarmClockBP__alarmClockBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AalarmClockBP_C, alarmClock, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AalarmClockBP_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AalarmClockBP_C, 0x0338);
		}

		// BlueprintGeneratedClass BP_NextSingletonWorldHelper.BP_NextSingletonWorldHelper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NextSingletonWorldHelper__BP_NextSingletonWorldHelper_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NextSingletonWorldHelper_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NextSingletonWorldHelper_C, 0x0348);
		}

		// BlueprintGeneratedClass sewageExit.sewageExit_C
		TEST_METHOD(BlueprintGeneratedClass__sewageExit__sewageExit_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageExit_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageExit_C, Cube, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageExit_C, tunelExitLadder, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageExit_C, sewageTeleport, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageExit_C, tempPlayerRef, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsewageExit_C, 0x0450);
		}

		// BlueprintGeneratedClass raidCamera.raidCamera_C
		TEST_METHOD(BlueprintGeneratedClass__raidCamera__raidCamera_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidCamera_C, Camera, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidCamera_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AraidCamera_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AraidCamera_C, 0x0340);
		}

		// BlueprintGeneratedClass labDryerBase.labDryerBase_C
		TEST_METHOD(BlueprintGeneratedClass__labDryerBase__labDryerBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlabDryerBase_C, UberGraphFrame, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlabDryerBase_C, maxCapOverride, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlabDryerBase_C, 0x07DC);
		}

		// BlueprintGeneratedClass streetPersonMale07BP.streetPersonMale07BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale07BP__streetPersonMale07BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale07BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass stream_oldMarket_squareDetails.stream_oldMarket_squareDetails_C
		TEST_METHOD(BlueprintGeneratedClass__stream_oldMarket_squareDetails__stream_oldMarket_squareDetails_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_oldMarket_squareDetails_C, 0x0330);
		}

		// BlueprintGeneratedClass halogenLightBP.halogenLightBP_C
		TEST_METHOD(BlueprintGeneratedClass__halogenLightBP__halogenLightBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, UnknownData_X5U9, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, UberGraphFrame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, Overlap, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, SpotLight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, halogenLight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, isStandby, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, detectedPawn, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, UnknownData_H0UM, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, timeActiveAfterDetect, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, emiMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, detectorSizing, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhalogenLightBP_C, detectorOffset, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhalogenLightBP_C, 0x03C0);
		}

		// BlueprintGeneratedClass NewStreetLantern.NewStreetLantern_C
		TEST_METHOD(BlueprintGeneratedClass__NewStreetLantern__NewStreetLantern_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewStreetLantern_C, UnknownData_9SDZ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewStreetLantern_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewStreetLantern_C, SpotLight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewStreetLantern_C, StaticMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewStreetLantern_C, dynMat, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANewStreetLantern_C, 0x03A0);
		}

		// BlueprintGeneratedClass bp_en_GroundConcrete_01_01.bp_en_GroundConcrete_01_01_C
		TEST_METHOD(BlueprintGeneratedClass__bp_en_GroundConcrete_01_01__bp_en_GroundConcrete_01_01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, SharedRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh11, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh10, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh9, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh8, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh7, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh6, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh5, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh3, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abp_en_GroundConcrete_01_01_C, StaticMesh, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Abp_en_GroundConcrete_01_01_C, 0x0390);
		}

		// BlueprintGeneratedClass dd_ventShaft01.dd_ventShaft01_C
		TEST_METHOD(BlueprintGeneratedClass__dd_ventShaft01__dd_ventShaft01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Add_ventShaft01_C, 0x0518);
		}

		// BlueprintGeneratedClass dd_ventShaft02.dd_ventShaft02_C
		TEST_METHOD(BlueprintGeneratedClass__dd_ventShaft02__dd_ventShaft02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_ventShaft02_C, UberGraphFrame, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_ventShaft02_C, StaticMesh, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Add_ventShaft02_C, 0x0528);
		}

		// BlueprintGeneratedClass npcDonaldMcKensey.npcDonaldMcKensey_C
		TEST_METHOD(BlueprintGeneratedClass__npcDonaldMcKensey__npcDonaldMcKensey_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AnpcDonaldMcKensey_C, UnknownData_4O6O, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnpcDonaldMcKensey_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnpcDonaldMcKensey_C, 0x0AE0);
		}

		// BlueprintGeneratedClass SectorC_FurnitureSaleseman.SectorC_FurnitureSaleseman_C
		TEST_METHOD(BlueprintGeneratedClass__SectorC_FurnitureSaleseman__SectorC_FurnitureSaleseman_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASectorC_FurnitureSaleseman_C, 0x0AD4);
		}

		// BlueprintGeneratedClass splineRoad400.splineRoad400_C
		TEST_METHOD(BlueprintGeneratedClass__splineRoad400__splineRoad400_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplineRoad400_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplineRoad400_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsplineRoad400_C, 0x0338);
		}

		// BlueprintGeneratedClass ballenaManSpawnPoint.ballenaManSpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaManSpawnPoint__ballenaManSpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaManSpawnPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaManSpawnPoint_C, Box1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaManSpawnPoint_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaManSpawnPoint_C, moneySpawn, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaManSpawnPoint_C, Arrow, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaManSpawnPoint_C, DefaultSceneRoot, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaManSpawnPoint_C, 0x0358);
		}

		// BlueprintGeneratedClass shopAmyGasStaion.shopAmyGasStaion_C
		TEST_METHOD(BlueprintGeneratedClass__shopAmyGasStaion__shopAmyGasStaion_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopAmyGasStaion_C, UnknownData_AKU2, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopAmyGasStaion_C, UberGraphFrame, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopAmyGasStaion_C, 0x03F8);
		}

		// BlueprintGeneratedClass BTTask_Bird_Random_MaxWalkSpeed.BTTask_Bird_Random_MaxWalkSpeed_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_Random_MaxWalkSpeed__BTTask_Bird_Random_MaxWalkSpeed_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Random_MaxWalkSpeed_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Random_MaxWalkSpeed_C, MinWalkSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_Random_MaxWalkSpeed_C, MaxWalkSpeed, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_Random_MaxWalkSpeed_C, 0x00B0);
		}

		// WidgetBlueprintGeneratedClass sampleClientWidget.sampleClientWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__sampleClientWidget__sampleClientWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientWidget_C, MyArea, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsampleClientWidget_C, 0x0218);
		}

		// WidgetBlueprintGeneratedClass dealerArrestPopup.dealerArrestPopup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__dealerArrestPopup__dealerArrestPopup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdealerArrestPopup_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdealerArrestPopup_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdealerArrestPopup_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdealerArrestPopup_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdealerArrestPopup_C, txtOverdose, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdealerArrestPopup_C, 0x0230);
		}

		// BlueprintGeneratedClass BP_Classic_Commode.BP_Classic_Commode_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Classic_Commode__BP_Classic_Commode_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_C, SM_Classic_Commode_Drawer_2_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_C, SM_Classic_Commode_Drawer_1_3, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_C, SM_Classic_Commode_Drawer_1_2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_C, SM_Classic_Commode_Drawer_3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_C, SM_Classic_Commode_Drawer_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Commode_C, StaticMesh, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Classic_Commode_C, 0x0358);
		}

		// BlueprintGeneratedClass BP_Truck01_DumpFrame.BP_Truck01_DumpFrame_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Truck01_DumpFrame__BP_Truck01_DumpFrame_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_DumpFrame_C, StaticMeshComponent0, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Truck01_DumpFrame_C, 0x0330);
		}

		// BlueprintGeneratedClass fenceIndustrialPartBP.fenceIndustrialPartBP_C
		TEST_METHOD(BlueprintGeneratedClass__fenceIndustrialPartBP__fenceIndustrialPartBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrialPartBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrialPartBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrialPartBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceIndustrialPartBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfenceIndustrialPartBP_C, 0x033D);
		}

		// WidgetBlueprintGeneratedClass passOutScreen.passOutScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__passOutScreen__passOutScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpassOutScreen_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpassOutScreen_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpassOutScreen_C, Black, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpassOutScreen_C, 0x0220);
		}

		// BlueprintGeneratedClass weedLampRange.weedLampRange_C
		TEST_METHOD(BlueprintGeneratedClass__weedLampRange__weedLampRange_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedLampRange_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedLampRange_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedLampRange_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedLampRange_C, RamaSave, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedLampRange_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedLampRange_C, MaxRange, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedLampRange_C, 0x0354);
		}

		// WidgetBlueprintGeneratedClass workStationManualListWidget.workStationManualListWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__workStationManualListWidget__workStationManualListWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, Illustration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, txtDesc, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, txtTitle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, PositionNam, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, PositionText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationManualListWidget_C, Image, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UworkStationManualListWidget_C, 0x0260);
		}

		// WidgetBlueprintGeneratedClass policeSearchWidget.policeSearchWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__policeSearchWidget__policeSearchWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceSearchWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceSearchWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceSearchWidget_C, progSearch, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpoliceSearchWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass BP_decoDeskLamp4.BP_decoDeskLamp4_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoDeskLamp4__BP_decoDeskLamp4_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp4_C, UnknownData_13PO, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp4_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp4_C, SpotLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp4_C, DynLightMat, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoDeskLamp4_C, 0x0460);
		}

		// BlueprintGeneratedClass decoTrashBed.decoTrashBed_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashBed__decoTrashBed_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashBed_C, 0x0446);
		}

		// BlueprintGeneratedClass decoTableHousePlant4.decoTableHousePlant4_C
		TEST_METHOD(BlueprintGeneratedClass__decoTableHousePlant4__decoTableHousePlant4_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTableHousePlant4_C, 0x0446);
		}

		// BlueprintGeneratedClass streetPersonMale06BP1.streetPersonMale06BP1_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale06BP1__streetPersonMale06BP1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale06BP1_C, 0x0AD4);
		}

		// BlueprintGeneratedClass technicalPassageTeleport.technicalPassageTeleport_C
		TEST_METHOD(BlueprintGeneratedClass__technicalPassageTeleport__technicalPassageTeleport_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, traderChecker, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, traderLoc, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, teleportLoc, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, Box, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, SM_Fence_Concrete_pole_b, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, SM_garage_4, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, targetPassage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtechnicalPassageTeleport_C, passageUnlocked, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtechnicalPassageTeleport_C, 0x0469);
		}

		// BlueprintGeneratedClass BP_TDE_Amfetamina.BP_TDE_Amfetamina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Amfetamina__BP_TDE_Amfetamina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Amfetamina_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Amfetamina_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Amfetamina_C, 0x04C0);
		}

		// BlueprintGeneratedClass airplaneBP.airplaneBP_C
		TEST_METHOD(BlueprintGeneratedClass__airplaneBP__airplaneBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, Airplane, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, ParticleSystem, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, airplaneParticles, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, Speed, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AairplaneBP_C, stoped, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AairplaneBP_C, 0x035D);
		}

		// BlueprintGeneratedClass deaVanBP.deaVanBP_C
		TEST_METHOD(BlueprintGeneratedClass__deaVanBP__deaVanBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaVanBP_C, RamaSave, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaVanBP_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaVanBP_C, Car_Van, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaVanBP_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeaVanBP_C, 0x0348);
		}

		// BlueprintGeneratedClass additiveBakingSoda50.additiveBakingSoda50_C
		TEST_METHOD(BlueprintGeneratedClass__additiveBakingSoda50__additiveBakingSoda50_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AadditiveBakingSoda50_C, 0x05B0);
		}

		// BlueprintGeneratedClass sewageTeleportPoint.sewageTeleportPoint_C
		TEST_METHOD(BlueprintGeneratedClass__sewageTeleportPoint__sewageTeleportPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, Sphere, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, Arrow, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, TargetPoint, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, wallPassage, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, UnknownData_SHIH, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, targetPointUnderground, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewageTeleportPoint_C, undergroundActive, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsewageTeleportPoint_C, 0x0459);
		}

		// BlueprintGeneratedClass BTService_Bird_FlyToARandomPerchTarget.BTService_Bird_FlyToARandomPerchTarget_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_FlyToARandomPerchTarget__BTService_Bird_FlyToARandomPerchTarget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, CurrentYawSpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, CurrentPitchSpeed, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, CurrentRollSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, TurnSpeed, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, FlyingForwardSpeed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, UnknownData_MM94, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, BBKey_Pitch_Adjustment, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, BbKey_FlyingSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomPerchTarget_C, BBKey_FlyAway_, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_FlyToARandomPerchTarget_C, 0x00D0);
		}

		// BlueprintGeneratedClass BTTask_Bird_RandomBehaviorSelector.BTTask_Bird_RandomBehaviorSelector_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_RandomBehaviorSelector__BTTask_Bird_RandomBehaviorSelector_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, BBKey_IsLookingForPerch_, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, BBKey_FlyAway_, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, BKey_TimeToLand_, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, RandomVar, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, UnknownData_3ALZ, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_RandomBehaviorSelector_C, BKey_CanThisBirdPerch_, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_RandomBehaviorSelector_C, 0x00D0);
		}

		// BlueprintGeneratedClass PM_Ser_ShoutChasePhrase.PM_Ser_ShoutChasePhrase_C
		TEST_METHOD(BlueprintGeneratedClass__PM_Ser_ShoutChasePhrase__PM_Ser_ShoutChasePhrase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_Ser_ShoutChasePhrase_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_Ser_ShoutChasePhrase_C, 0x00A0);
		}

		// BlueprintGeneratedClass smallElectricMixerBP.smallElectricMixerBP_C
		TEST_METHOD(BlueprintGeneratedClass__smallElectricMixerBP__smallElectricMixerBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmallElectricMixerBP_C, 0x083C);
		}

		// BlueprintGeneratedClass BP_P_CarOpen.BP_P_CarOpen_C
		TEST_METHOD(BlueprintGeneratedClass__BP_P_CarOpen__BP_P_CarOpen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, CarBodyMatInst, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, CarColorPalette, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, CarType, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, RandomColor, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, UnknownData_3Y2W, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, ManualCarPaintColor, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_P_CarOpen_C, CleanVersion, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_P_CarOpen_C, 0x0365);
		}

		// BlueprintGeneratedClass psychDoorTalkerTeleport.psychDoorTalkerTeleport_C
		TEST_METHOD(BlueprintGeneratedClass__psychDoorTalkerTeleport__psychDoorTalkerTeleport_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychDoorTalkerTeleport_C, DefaultSceneRoot, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychDoorTalkerTeleport_C, 0x0330);
		}

		// Class JsonUtilities.JsonUtilitiesDummyObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// Class AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_S7D1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_2ZOK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_Y25D, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// Class AppleImageUtils.AppleImageInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// BlueprintGeneratedClass contactsManager.contactsManager_C
		TEST_METHOD(BlueprintGeneratedClass__contactsManager__contactsManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, characterList, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, characterMinLevel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, characterTrustLevel, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, maxTrustLevel, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, UnknownData_S2RT, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charCanSell, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charCanChangePrice, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charCanBuy, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charCanRent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charCanBeHired, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charCanMeet, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charIsHired, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charNewOffer, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charDealerOffer, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charIsDealer, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charIsDead, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charOrderPending, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charHirePrice, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charHiredTillDayID, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontactsManager_C, charReminderSent, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcontactsManager_C, 0x0470);
		}

		// Class DrugDealerSimulator.AbsorbedSubstance
		TEST_METHOD(Class__DrugDealerSimulator__AbsorbedSubstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, currentConcetration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takeAddictedLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takeAddictedFactor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takeToleranceLevel, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takeToleranceFactor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, calcRateAbsorption, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, calcRateDecomposition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, calcRateExcretion, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, calcPower, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, stillEffective, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, injectionCalculated, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, UnknownData_MBUO, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenBase, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenHealth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenSpirit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenPerception, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenBrainFuncs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, takenPhysical, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, drugPointer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, substanceIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstance, UnknownData_ZEOO, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbsorbedSubstance, 0x0098);
		}

		// Class DrugDealerSimulator.AbsorbedSubstanceComp
		TEST_METHOD(Class__DrugDealerSimulator__AbsorbedSubstanceComp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, tempCheckTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenMass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takeAddictedLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takeAddictedFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takeToleranceLevel, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takeToleranceFactor, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, calcRateAbsorption, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, calcRateDecomposition, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, calcRateExcretion, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, calcPower, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, MassToPowerFactor, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, SAEMajorVersion, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, SAESubVersion, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, stillEffective, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, injectionCalculated, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, UnknownData_E9GE, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenBase, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenHealth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenSpirit, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenPerception, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenBrainFuncs, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, takenPhysical, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, drugPointer, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, substanceIndex, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbedSubstanceComp, UnknownData_Q0OQ, 0x016C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbsorbedSubstanceComp, 0x0170);
		}

		// Class DrugDealerSimulator.AbsorbedSubstancesComponent
		TEST_METHOD(Class__DrugDealerSimulator__AbsorbedSubstancesComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbsorbedSubstancesComponent, 0x00F0);
		}

		// Class DrugDealerSimulator.ActionableActor
		TEST_METHOD(Class__DrugDealerSimulator__ActionableActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AActionableActor, innerIndex, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActionableActor, innerSubIndex, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActionableActor, 0x0330);
		}

		// Class DrugDealerSimulator.ActiveSubstance
		TEST_METHOD(Class__DrugDealerSimulator__ActiveSubstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BaseFactors, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, substanceName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, innerIndex, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, UnknownData_QZU2, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BodyFastImpact, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BodyAddictionImpact, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BodyExcretionImpact, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, SpiritFastImpact, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, SpiritAddictionImpact, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, SpiritExcretionImpact, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, PerceptionFastImpact, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, PerceptionAddictionImpact, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, PerceptionExcretionImpact, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BrainFuncsFastImpact, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BrainFuncsAddictionImpact, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, BrainFuncsExcretionImpact, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, PhysicalFastImpact, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, PhysicalAddictionImpact, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, PhysicalExcretionImpact, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, neutralPurityPoint, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, goodPurityPoint, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, neutralQualityPoint, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, goodQualityPoint, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, fullToleranceAchiveIn, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, maxToleranceFactor, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, fullAddictionAchiveIn, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, toleranceRecoveryDays, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, addictionRecoveryDays, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, pruityDebug, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, qualityDebug, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveSubstance, UnknownData_HJXC, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveSubstance, 0x03E8);
		}

		// Class DrugDealerSimulator.AddictionComp
		TEST_METHOD(Class__DrugDealerSimulator__AddictionComp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddictionComp, autoCleanup, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddictionComp, UnknownData_57NV, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddictionComp, AddictionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddictionComp, UnknownData_SFUF, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddictionComp, 0x0110);
		}

		// Class DrugDealerSimulator.AirComponent
		TEST_METHOD(Class__DrugDealerSimulator__AirComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAirComponent, airTemp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAirComponent, airMinTemp, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAirComponent, airMaxTemp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAirComponent, rainChance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAirComponent, rainDensity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAirComponent, stormChance, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAirComponent, 0x0108);
		}

		// Class DrugDealerSimulator.AirProfile
		TEST_METHOD(Class__DrugDealerSimulator__AirProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirProfile, airTemp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirProfile, airMinTemp, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirProfile, airMaxTemp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirProfile, rainChance, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirProfile, rainDensity, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirProfile, stromChance, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAirProfile, 0x0340);
		}

		// Class DrugDealerSimulator.AS_Alkaloid
		TEST_METHOD(Class__DrugDealerSimulator__AS_Alkaloid)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Alkaloid, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Amfetamina
		TEST_METHOD(Class__DrugDealerSimulator__AS_Amfetamina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Amfetamina, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Diamorfina
		TEST_METHOD(Class__DrugDealerSimulator__AS_Diamorfina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Diamorfina, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Ergolina
		TEST_METHOD(Class__DrugDealerSimulator__AS_Ergolina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Ergolina, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_MDMA
		TEST_METHOD(Class__DrugDealerSimulator__AS_MDMA)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_MDMA, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Metaamfetamina
		TEST_METHOD(Class__DrugDealerSimulator__AS_Metaamfetamina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Metaamfetamina, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Piperydyna
		TEST_METHOD(Class__DrugDealerSimulator__AS_Piperydyna)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Piperydyna, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Psylocybina
		TEST_METHOD(Class__DrugDealerSimulator__AS_Psylocybina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Psylocybina, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_THC
		TEST_METHOD(Class__DrugDealerSimulator__AS_THC)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_THC, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_THCSativa
		TEST_METHOD(Class__DrugDealerSimulator__AS_THCSativa)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_THCSativa, 0x03E8);
		}

		// Class DrugDealerSimulator.AS_Tryptamina
		TEST_METHOD(Class__DrugDealerSimulator__AS_Tryptamina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAS_Tryptamina, 0x03E8);
		}

		// Class DrugDealerSimulator.AstralProfile
		TEST_METHOD(Class__DrugDealerSimulator__AstralProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, ligthPower, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, isEmmitingEnergy, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, UnknownData_8GOY, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, emmitPower, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, heatEmmitingPerc, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, orbitToSurfaceAngle, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAstralProfile, baseDistance, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAstralProfile, 0x0340);
		}

		// Class DrugDealerSimulator.BU_ManagerActor
		TEST_METHOD(Class__DrugDealerSimulator__BU_ManagerActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, MainBuildingTargetPtr, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, UpgradeLines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, SeenUpgrades, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, SaveSpace, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, HasMainLine, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, UnknownData_XRKU, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, MainLineName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, ReadyToUse, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, UnknownData_NHIH, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_ManagerActor, LineNameIndex, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABU_ManagerActor, 0x0410);
		}

		// Class DrugDealerSimulator.BU_UpgradeDetails
		TEST_METHOD(Class__DrugDealerSimulator__BU_UpgradeDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeDetails, ChangesSet, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABU_UpgradeDetails, 0x0338);
		}

		// Class DrugDealerSimulator.BU_UpgradeLineActor
		TEST_METHOD(Class__DrugDealerSimulator__BU_UpgradeLineActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, CurrentLevel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, seenMaxLevel, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, SaveSpace, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, MaxLevel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, MaxLevelAutoAdaptAfterLoad, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, IsMainUpgradeLine, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, UnknownData_0TXD, 0x0346);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, BuildingUpgradeManagerPtr, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, MainLineLevelRequirement, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, UnknownData_OB3H, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABU_UpgradeLineActor, UpgradesSettings, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABU_UpgradeLineActor, 0x0368);
		}

		// Class DrugDealerSimulator.CepSaveTester
		TEST_METHOD(Class__DrugDealerSimulator__CepSaveTester)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepSaveTester, someInt, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepSaveTester, UnknownData_AI67, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACepSaveTester, 0x0330);
		}

		// Class DrugDealerSimulator.CepWeatherComponent
		TEST_METHOD(Class__DrugDealerSimulator__CepWeatherComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, yearDaysLen, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_Y9MG, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, baseAstralSettings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, moonSettings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, moonDayHoursLength, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, moonOrbitDegRot, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, Seasons, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, rootHandler, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, enablingSunTimeMarginOnToggle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, sunCeremonyDegMargin, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, inited, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_QD1N, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, currentTimeInstance, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonsDefined, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_851G, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, sunDataSunrises, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, sunDataSunsets, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, sunDataNoons, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, sunOrbitData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, sunOrbitDistanceData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonScheme, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonBasicTemperature, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonMinTemperature, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonMaxTemperature, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainChance, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonCalcRainChance, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainDensity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonCloudsDayLogs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonStormChance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainSet, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonFogSet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainStartHour, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainEndHour, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonClouds, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainDetails, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonHeatProfile, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonFogLevels, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonFogDensity, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainDensityA, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonRainDensityB, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonStormLength, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonStormOffset, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempObject, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, totalSeasonWage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_J3RP, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonA, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, seasonB, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, impactA, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, impactB, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, instabilityFactors, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, daysCounter, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempTest, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_GYW8, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempSeasonProfileA, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempSeasonProfileB, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempAirProfileA, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempAirProfileB, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempSeasonAstralA, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempSeasonAstralB, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_UTBC, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, tempDebProgress, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, t1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, t2, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, t3, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, t4, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, t5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCepWeatherComponent, UnknownData_BVPC, 0x03CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCepWeatherComponent, 0x03D0);
		}

		// Class DrugDealerSimulator.CepWeatherProfile
		TEST_METHOD(Class__DrugDealerSimulator__CepWeatherProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, yearDaysLen, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, UnknownData_LB73, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, baseAstralSettings, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, Seasons, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, rootHandler, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, inited, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, UnknownData_EJBT, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, currentTimeInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonsDefined, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, UnknownData_065R, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, sunDataSunrises, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, sunDataSunsets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonScheme, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonBasicTemperature, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonMinTemperature, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonMaxTemperature, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, totalSeasonWage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, UnknownData_8LKO, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonA, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, seasonB, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, impactA, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, impactB, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, instabilityFactors, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, daysCounter, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempTest, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, UnknownData_ZPCP, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempSeasonProfileA, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempSeasonProfileB, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempAirProfileA, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempAirProfileB, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempSeasonAstralA, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, tempSeasonAstralB, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACepWeatherProfile, UnknownData_3L1V, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACepWeatherProfile, 0x0460);
		}

		// Class DrugDealerSimulator.DayConditionsLogger_UE
		TEST_METHOD(Class__DrugDealerSimulator__DayConditionsLogger_UE)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, hoursCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, markupsPerHour, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, commitJumps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, markupMinuteStep, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, markupHourStep, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, UnknownData_PUQJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, vals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, calcProgresses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, commitingMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, UnknownData_O9V9, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, lastWriteIndex, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, firstCommitIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, startCommitVal, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, endCommitVal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, curWriteIndex, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, tempDebProgress, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, ttIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, ttIndex1, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLogger_UE, ttIndex2, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDayConditionsLogger_UE, 0x0088);
		}

		// Class DrugDealerSimulator.DayConditionsLoggerComponent
		TEST_METHOD(Class__DrugDealerSimulator__DayConditionsLoggerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLoggerComponent, Values, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDayConditionsLoggerComponent, UnknownData_BX7G, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDayConditionsLoggerComponent, 0x0108);
		}

		// Class DrugDealerSimulator.DrugsEffectsBase
		TEST_METHOD(Class__DrugDealerSimulator__DrugsEffectsBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrugsEffectsBase, innerType, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrugsEffectsBase, saveInnerPropertiesCount, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrugsEffectsBase, blockCancelEffect, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrugsEffectsBase, UnknownData_NM3G, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrugsEffectsBase, 0x0100);
		}

		// Class DrugDealerSimulator.EB_BaseFactors
		TEST_METHOD(Class__DrugDealerSimulator__EB_BaseFactors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, Strength, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, purity, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, Quality, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, addictiveness, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, toleranceFactor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, effectsEffectivnessFactor, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, rateAbsorption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, rateDecomposition, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, rateExcretion, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BaseFactors, junkieHunger, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEB_BaseFactors, 0x0128);
		}

		// Class DrugDealerSimulator.EB_BodyHealth
		TEST_METHOD(Class__DrugDealerSimulator__EB_BodyHealth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, nervousSystem, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, digestiveSystem, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, urinaryTract, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, liver, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, kidneys, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, circulatory, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, respiratory, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BodyHealth, heart, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEB_BodyHealth, 0x0120);
		}

		// Class DrugDealerSimulator.EB_BrainFunctions
		TEST_METHOD(Class__DrugDealerSimulator__EB_BrainFunctions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BrainFunctions, Mathematics, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BrainFunctions, Navigation, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BrainFunctions, Observation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_BrainFunctions, Communication, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEB_BrainFunctions, 0x0110);
		}

		// Class DrugDealerSimulator.EB_Perception
		TEST_METHOD(Class__DrugDealerSimulator__EB_Perception)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, soundHal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, VoiceHal, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Scotomas, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, ColorTrans, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, SizeTrans, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Contours, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, ImgCreation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, SelfHearthHear, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, TimeMultiplier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, FOVMultiplier, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, THC, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, THCSativa, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Amfetamina, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Metaamfetamina, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, MDMA, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Ergolina, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Tryptamina, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Psylocybina, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Alkaloid, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Diamorfina, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, Piperydyna, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Perception, UnknownData_QJYX, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEB_Perception, 0x0158);
		}

		// Class DrugDealerSimulator.EB_Physical
		TEST_METHOD(Class__DrugDealerSimulator__EB_Physical)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Physical, MovementSpeed, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Physical, staminaMultiplier, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Physical, MovementCoordination, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Physical, IrisDisfunction, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Physical, Seizures, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Physical, UnknownData_JZK5, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEB_Physical, 0x0118);
		}

		// Class DrugDealerSimulator.EB_Spirit
		TEST_METHOD(Class__DrugDealerSimulator__EB_Spirit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Spirit, Afraid, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Spirit, Agrresive, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Spirit, Sad, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Spirit, Happy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Spirit, Calm, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEB_Spirit, Enraged, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEB_Spirit, 0x0118);
		}

		// Class DrugDealerSimulator.HealthTestActor
		TEST_METHOD(Class__DrugDealerSimulator__HealthTestActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthTestActor, humanization, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHealthTestActor, 0x0330);
		}

		// Class DrugDealerSimulator.HumanoidActor
		TEST_METHOD(Class__DrugDealerSimulator__HumanoidActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, testInt, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, UnknownData_UKM9, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, bodyHealth, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, bodyHealthRecovery, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, spiritAttitude, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, Perception, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, brainFuncs, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, physcials, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, inBodySubstances, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, AddictionData, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, ToleranceData, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SaveSpace0, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SaveSpace1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SaveSpace2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SaveSpace3, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SaveSpace4, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, InBodySubsCount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, checkValue, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, curConcetrations, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, tempCalcFactors, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SAEptr, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, UnknownData_D4BN, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, NonCalcMinFrames, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, NonCalcMinTime, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, SomeDebugInteger, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHumanoidActor, UnknownData_NXW6, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHumanoidActor, 0x04A0);
		}

		// Class DrugDealerSimulator.HumanoidComponent
		TEST_METHOD(Class__DrugDealerSimulator__HumanoidComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, bodyHealth, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, bodyHealthRecovery, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, spiritAttitude, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, Perception, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, brainFuncs, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, physcials, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, UnknownData_URBJ, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, addictionList, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, toleranceList, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanoidComponent, UnknownData_LE2L, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHumanoidComponent, 0x0238);
		}

		// Class DrugDealerSimulator.LockpickPuzzle
		TEST_METHOD(Class__DrugDealerSimulator__LockpickPuzzle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyLevel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, BobbyPinStartAngle, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, ScrewDriverStartAngle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, baseScrewDriverSpeed, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, baseShakeDamageFactor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, UnknownData_PYCC, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, targetedBobbyPinAngle, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, targetedScrewDriverAngle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, UnknownData_81JQ, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, printLogToOutput, 0x036B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, UnknownData_XXC5, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, dfcRangeMin, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, dfcRangeMax, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, UnknownData_L2VQ, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyAngleMargins, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyRotationMarginBefore, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyRotationMarginAfter, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyTimeMargins, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, UnknownData_G21S, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyUnlockingTimes, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, difficultyHealthDrops, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALockpickPuzzle, UnknownData_QM17, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALockpickPuzzle, 0x0498);
		}

		// Class DrugDealerSimulator.NextSingleton
		TEST_METHOD(Class__DrugDealerSimulator__NextSingleton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, nativeTimeRecover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, UnknownData_YD17, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, SAE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, SAEOperational, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, UnknownData_4PC4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, WTAC, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, TSManager, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, callCount, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, UnknownData_4T4P, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, HelpersList, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, MasterHelpers, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, WTACCounts, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, UnknownData_B2YH, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, debVal, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, UnknownData_4TNP, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, requireWTAC, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNextSingleton, UnknownData_IP3G, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNextSingleton, 0x0148);
		}

		// Class DrugDealerSimulator.NextSingletonLibrary
		TEST_METHOD(Class__DrugDealerSimulator__NextSingletonLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNextSingletonLibrary, 0x0028);
		}

		// Class DrugDealerSimulator.NextSingletonWorldHelper
		TEST_METHOD(Class__DrugDealerSimulator__NextSingletonWorldHelper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANextSingletonWorldHelper, MasterWorld, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANextSingletonWorldHelper, validSingleton, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANextSingletonWorldHelper, UnknownData_LN0D, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANextSingletonWorldHelper, tempWorld, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANextSingletonWorldHelper, debVal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANextSingletonWorldHelper, UnknownData_YC6M, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANextSingletonWorldHelper, 0x0340);
		}

		// Class DrugDealerSimulator.SDB_BodyHealth
		TEST_METHOD(Class__DrugDealerSimulator__SDB_BodyHealth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealth, MainBodyHealth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealth, Spirit, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealth, Perception, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealth, brainFuncs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealth, Physical, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USDB_BodyHealth, 0x0050);
		}

		// Class DrugDealerSimulator.SDB_BodyHealthComp
		TEST_METHOD(Class__DrugDealerSimulator__SDB_BodyHealthComp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealthComp, MainBodyHealth, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealthComp, Spirit, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealthComp, Perception, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealthComp, brainFuncs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USDB_BodyHealthComp, Physical, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USDB_BodyHealthComp, 0x0118);
		}

		// Class DrugDealerSimulator.SeasonAstralComponent
		TEST_METHOD(Class__DrugDealerSimulator__SeasonAstralComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonAstralComponent, manipulationAstralObject, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonAstralComponent, orbitToSurfaceAngle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonAstralComponent, baseDistance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonAstralComponent, sunHours, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonAstralComponent, sunHourCenter, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeasonAstralComponent, 0x0108);
		}

		// Class DrugDealerSimulator.SeasonAstralProfile
		TEST_METHOD(Class__DrugDealerSimulator__SeasonAstralProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonAstralProfile, manipulationAstralObject, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonAstralProfile, orbitToSurfaceAngle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonAstralProfile, baseDistance, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonAstralProfile, sunHours, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonAstralProfile, sunHourCenter, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASeasonAstralProfile, 0x0340);
		}

		// Class DrugDealerSimulator.SeasonProfile
		TEST_METHOD(Class__DrugDealerSimulator__SeasonProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, lengthWage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, UnknownData_NOXM, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, airComp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, astralSettingsComp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, seasonConditionsImpactance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, rainChance, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, worldIndex, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, seasonMargin, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeasonProfile, UnknownData_PSP1, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASeasonProfile, 0x0678);
		}

		// Class DrugDealerSimulator.ShiroActor
		TEST_METHOD(Class__DrugDealerSimulator__ShiroActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShiroActor, UnknownData_Z8YA, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShiroActor, 0x0340);
		}

		// Class DrugDealerSimulator.ShiroBlueprint
		TEST_METHOD(Class__DrugDealerSimulator__ShiroBlueprint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShiroBlueprint, 0x0028);
		}

		// Class DrugDealerSimulator.SubstancesAndEffects
		TEST_METHOD(Class__DrugDealerSimulator__SubstancesAndEffects)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_HealthObject, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, HealthObject, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, StdEffectsList, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, AutoSubstancesSearch, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, UnknownData_JH8B, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, ActiveEffects, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, AutoTriggeredEffectsSearch, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, UnknownData_FT1I, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_THC, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_THC, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_THC, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_THCSativa, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_THCSativa, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_THCSativa, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Amfetamina, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Amfetamina, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Amfetamina, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Metaamfetamina, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Metaamfetamina, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Metaamfetamina, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_MDMA, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_MDMA, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_MDMA, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Ergolina, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Ergolina, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Ergolina, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Tryptamina, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Tryptamina, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Tryptamina, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Psylocybina, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Psylocybina, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Psylocybina, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Alkaloid, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Alkaloid, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Alkaloid, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Diamorfina, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Diamorfina, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Diamorfina, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BPT_Piperydyna, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, BD_Piperydyna, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, TDES_Piperydyna, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, FactorDefaults, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, MinValues, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, MaxValues, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, MajorVersion, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, SubVersion, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, MaxSubstances, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, selfTimer, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, tempSubsBeingAbs, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASubstancesAndEffects, UnknownData_VEQ2, 0x0831);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASubstancesAndEffects, 0x0838);
		}

		// Class DrugDealerSimulator.TriggeredDrugEffect
		TEST_METHOD(Class__DrugDealerSimulator__TriggeredDrugEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, hasTriggered, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ListAssociated, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_AF7Y, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, substanceIndex, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, wutDeb, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, TakeTriggered, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, AddictionTriggered, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ToleranceTriggered, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_7J6U, 0x0337);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, substanceIndexTriggering, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, liveEffect, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_5I19, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, TimeToLive, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, continousEffect, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_XYP2, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, cooldownTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, isNPCEffect, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_RH10, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, bp_InnerIndex, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_XO7O, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, StartBlockList, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, StartCount, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, LastTriggeredTime, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, LastTriggeredEndTime, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, isWorking, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_2P4Z, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, rootHandler, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_CG63, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETA_IsTriggering, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETA_CanTriggerAlone, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETA_CheckAsEqualAndLess, 0x03EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_I0MO, 0x03EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETA_ActivateValue, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETT_IsTriggering, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETT_CanTriggerAlone, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETT_CheckAsEqualAndLess, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_H7ST, 0x03F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, ETT_ActivateValue, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HB_IsTriggering, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HB_CanTriggerAlone, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HB_ActivateWhenAll, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HB_CheckAsEqualAndLess, 0x03FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_nervousSystem, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_digestiveSystem, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_urinaryTract, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_liver, 0x03FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_kidneys, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_circulatory, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_respiratory, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HBC_heart, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_M29K, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BodyHealthTriggerValues, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Spirit_IsTriggering, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Spirit_CanTriggerAlone, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Spirit_ActivateWhenAll, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Spirit_CheckAsEqualAndLess, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SC_Afraid, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SC_Agrresive, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SC_Sad, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SC_Happy, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SC_Calm, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SC_Enraged, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_DEPT, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, SpiritTriggerValues, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Per_IsTriggering, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Per_CanTriggerAlone, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Per_ActivateWhenAll, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Per_CheckAsEqualAndLess, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_SoundHal, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_VoiceHal, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Scotomas, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_ColorTrans, 0x042F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_SizeTrans, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Contours, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_ImgCreation, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_SelfHearthHear, 0x0433);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_TimeMultiplier, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_FOVMultiplier, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_THC, 0x0436);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_THCSativa, 0x0437);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Amfetamina, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Metaamfetamina, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_MDMA, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Ergolina, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Tryptamina, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Psylocybina, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Alkaloid, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Diamorfina, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PRC_Piperydyna, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_B85Q, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PerceptionTriggerValues, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFuncs_IsTriggering, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFuncs_CanTriggerAlone, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFuncs_ActivateWhenAll, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFuncs_CheckAsEqualAndLess, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFC_Mathematics, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFC_Navigation, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFC_Observation, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BFC_Communication, 0x0457);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, BrainFuncsTriggerValues, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Phys_IsTriggering, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Phys_CanTriggerAlone, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Phys_ActivateWhenAll, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, Phys_CheckAsEqualAndLess, 0x0463);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PHC_MovementSpeed, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PHC_StaminaMultiplier, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PHC_MovementCoordination, 0x0466);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PHC_IrisDisfunction, 0x0467);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PHC_Seizures, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_R53S, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, PhysicalTriggerValues, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, tickTime, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, framesPassed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, nonCalcFramesCount, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, framesOffset, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, minCalcFramesSkip, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, minTimeSkip, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, EffectStartInnerTime, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, EffectEndInnerTime, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, InnerEffectTimer, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, EffectStartRootTime, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, EffectEndRootTime, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, DrugSessionRun, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, UnknownData_TU3A, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggeredDrugEffect, HealthObject, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggeredDrugEffect, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Alkaloid
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Alkaloid)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Alkaloid, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Amfetamina
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Amfetamina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Amfetamina, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Diamorfina
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Diamorfina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Diamorfina, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Ergolina
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Ergolina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Ergolina, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_MDMA
		TEST_METHOD(Class__DrugDealerSimulator__TDE_MDMA)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_MDMA, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Metaamfetamina
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Metaamfetamina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Metaamfetamina, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Piperydyna
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Piperydyna)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Piperydyna, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Psylocybina
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Psylocybina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Psylocybina, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_THC
		TEST_METHOD(Class__DrugDealerSimulator__TDE_THC)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_THC, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_THCSativa
		TEST_METHOD(Class__DrugDealerSimulator__TDE_THCSativa)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_THCSativa, 0x04B0);
		}

		// Class DrugDealerSimulator.TDE_Tryptamina
		TEST_METHOD(Class__DrugDealerSimulator__TDE_Tryptamina)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATDE_Tryptamina, 0x04B0);
		}

		// Class DrugDealerSimulator.TimeProfile
		TEST_METHOD(Class__DrugDealerSimulator__TimeProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, instanceTime, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, iDay, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, iHour, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, iMinute, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, iSec, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, iTimeMultiplier, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeProfile, UnknownData_P933, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimeProfile, 0x0358);
		}

		// Class DrugDealerSimulator.TrainControllerCode
		TEST_METHOD(Class__DrugDealerSimulator__TrainControllerCode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, UnknownData_8ZUU, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, actorPath, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, leaderBPLeader, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, innerSegmentsSpawn, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, UnknownData_I4JD, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, segmentBPClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, MaxSpeed, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, forcePropagation, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, frictionForcePropagation, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, constPMRmultiplier, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, stopLength, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, MaxDeltaTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, minInterval, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, maxInterval, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, loadSimulate, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, segmentsInit, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, IsRunning, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainControllerCode, UnknownData_5AN2, 0x03C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrainControllerCode, 0x5370);
		}

		// Class DrugDealerSimulator.TrainRealSegment
		TEST_METHOD(Class__DrugDealerSimulator__TrainRealSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, weigth, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, loadWeigth, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, isCargo, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, hasEngine, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, UnknownData_WOT7, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, enginePower, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, backwardDirectionEngine, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, UnknownData_JA83, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, axleLength, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, axleWide, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, modelLength, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, modelWidth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, lastAngle, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainRealSegment, TrainSegmentMesh, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrainRealSegment, 0x0358);
		}

		// Class DrugDealerSimulator.TrainSegmentCode
		TEST_METHOD(Class__DrugDealerSimulator__TrainSegmentCode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainSegmentCode, leadSegment, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainSegmentCode, UnknownData_FNEW, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrainSegmentCode, 0x0330);
		}

		// Class DrugDealerSimulator.TrainSegmentSubClass
		TEST_METHOD(Class__DrugDealerSimulator__TrainSegmentSubClass)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrainSegmentSubClass, 0x0330);
		}

		// Class DrugDealerSimulator.TS_Manager
		TEST_METHOD(Class__DrugDealerSimulator__TS_Manager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntrancesIndex, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntDataIndex, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, TempDebA, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, TempDebB, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, TempDebC, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_KOWR, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntrencesReverseIndex, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntrencesData, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, NextIndexGen, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, raidDifficultyLevel, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, RaidedEntrances, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, InstanceReady, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_PKOV, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, SaveSpace0, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, SaveSpace1, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, SaveSpace2, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, SaveSpace3, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, MapUserEntrences, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntConnections, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, AvailableConnectionUpgrades, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UpgradesIndex, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, BaseStartWorkers, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, BaseWorkersEffieciency, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, PricePerHour, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, MeterDigBasePrice, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, MeterDigSpeedPerWorkerPerGameHour, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DigTimeHours, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, MinDigTimeHoursAbsClamp, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, WorkersWalkBaseSpeedMetersPerGameHour, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, MinWorkersWalkSpeedAbsClamp, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DugReportStepProgress, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, NewEntrencePrice, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntranceRaidRecoveryPrice, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, RespectWorkingHours, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_DLS6, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, StartWorkingHour, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EndWorkingHour, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_0FZ7, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, EntranceClass, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DEARaidSeekSpeedMetersPerGameHour, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, MinDEASeekSpeedAbsClamp, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, AfterRaidCoolDownHours, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DEARaidSeekBaseDeep, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DEARaidSeekDeep, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DEARaidSeekSpeed, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DEARaidReportStepProgress, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_MS4Q, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, RaidLog, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_ZPHX, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, fRDT, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, TempDigDistancePerc, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastMoneyTake, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastDugDistance, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastMoneyAmount, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastEndRaidTime, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_XFOE, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastRaidConnectionLoss, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastRaidEntrancesLoss, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, LastRaidUpgradeLoss, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, DebugDigSpeedFactor, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, StateRecalcMinTime, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, StateRecalcMinFrames, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, NonCalcFrames, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, NonCalcTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, TunnelsBeeingRaided, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, HasCooldownLock, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, RaidReported, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, UnknownData_Q87P, 0x0653);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_Manager, ParallelMethodExecutionTest, 0x0654);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATS_Manager, 0x0658);
		}

		// Class DrugDealerSimulator.TS_TunnelEntrence
		TEST_METHOD(Class__DrugDealerSimulator__TS_TunnelEntrence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_TunnelEntrence, ManagerIndex, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_TunnelEntrence, ManagerDataIndex, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_TunnelEntrence, ManagerPtr, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_TunnelEntrence, UserTunnel, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_TunnelEntrence, StartGameManaged, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATS_TunnelEntrence, UnknownData_MQTH, 0x033A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATS_TunnelEntrence, 0x0340);
		}

		// Class DrugDealerSimulator.WeatherHumanFactors
		TEST_METHOD(Class__DrugDealerSimulator__WeatherHumanFactors)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeatherHumanFactors, 0x00F0);
		}

		// Class DrugDealerSimulator.WeatherHumanSense
		TEST_METHOD(Class__DrugDealerSimulator__WeatherHumanSense)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeatherHumanSense, 0x00F0);
		}

		// Class DrugDealerSimulator.WeatherProfile
		TEST_METHOD(Class__DrugDealerSimulator__WeatherProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, yearDaysLen, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, defaultSunrise, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, defaultSunset, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, UnknownData_FE70, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, Seasons, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, rootHandler, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, inited, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, UnknownData_CUDL, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, currentTimeInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, seasonsDefined, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, UnknownData_PGC2, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, sunDataSunrises, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, sunDataSunsets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, seasonScheme, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, seasonBasicTemperature, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, seasonNightTemperature, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, totalSeasonWage, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, UnknownData_4ALJ, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, seasonA, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, seasonB, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, impactA, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, impactB, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, daysCounter, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, tempTest, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, UnknownData_JP5F, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, tempSeasonProfileA, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, tempSeasonProfileB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, tempAirProfileA, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, tempAirProfileB, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeatherProfile, UnknownData_5RNZ, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeatherProfile, 0x0430);
		}

		// Class DrugDealerSimulator.WorldPhysicsComponent
		TEST_METHOD(Class__DrugDealerSimulator__WorldPhysicsComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldPhysicsComponent, 0x00F0);
		}

		// Class DrugDealerSimulator.WorldPhysicsConsts
		TEST_METHOD(Class__DrugDealerSimulator__WorldPhysicsConsts)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldPhysicsConsts, 0x0328);
		}

		// Class DrugDealerSimulator.WorldTimeAndConditions
		TEST_METHOD(Class__DrugDealerSimulator__WorldTimeAndConditions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, myTimeProfile, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, timeProfileInstance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, disableWeatherSystem, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_Y89X, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, myBaseAirProfile, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSCeremonyHoursLength, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSCloudsLevel, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSRainLevel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSFogLevel, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, weatherProfileInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, disableSkyCalculations, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_NYMD, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, standardGametimeMultiplier, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, standardCloudSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_GU9V, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, sunAstralProfile, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, sunBaseInstance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, sunRotator, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, moonAstralProfile, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, moonInstance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, moonRotator, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, calculationInterval, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, minNonCalcFrames, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, innerCalcFrameSkip, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_W1PE, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, currentFactors, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, planetPhysicsData, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, weatherSpectrateMode, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_9MIU, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, loadStarted, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_FFSL, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, absmin_UltraSKyTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, sunrise_UltraSkyTime, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, noon_UltraSkyTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, sunset_UltraSkyTime, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, absmax_UltraSKyTime, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, moonPhaseLength, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, moonReportedShadows, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, sunReportedShadows, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyNiceWeatherEnabled, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSCeremonyEnd, 0x03F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSEnabledDay, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, earlyWSEnabledHour, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, debSaveMinute, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, yearDaysLen, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_USOS, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, seasonClouds, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, seasonRainDetails, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, seasonHeatProfile, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, seasonFogLevels, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, debugMode, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_GKOH, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, debHour, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, debDay, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, debMinute, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, debTimeSpeed, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, actorLocation, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, actorRotation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_Q290, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, tempSeasonProfileA, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, tempSeasonProfileB, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, tempAirProfileA, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, tempAirProfileB, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, tempSeasonAstralA, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, tempSeasonAstralB, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditions, UnknownData_QG4Z, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldTimeAndConditions, 0x0518);
		}

		// Class DrugDealerSimulator.WorldTimeAndConditionsCurFactors
		TEST_METHOD(Class__DrugDealerSimulator__WorldTimeAndConditionsCurFactors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldTimeAndConditionsCurFactors, UnknownData_XEZD, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldTimeAndConditionsCurFactors, 0x0350);
		}

		// Class DrugDealerSimulator.WTACFactorsComponent
		TEST_METHOD(Class__DrugDealerSimulator__WTACFactorsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWTACFactorsComponent, factorFloats, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWTACFactorsComponent, saveT1, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWTACFactorsComponent, serializedFloatsObjects, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWTACFactorsComponent, UnknownData_Y6ZC, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWTACFactorsComponent, allocated, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWTACFactorsComponent, UnknownData_JD65, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWTACFactorsComponent, 0x0170);
		}

		// WidgetBlueprintGeneratedClass mapMarkerWidget.mapMarkerWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__mapMarkerWidget__mapMarkerWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, panel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, txtDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, txtName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, minDistanceToPlayer, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, playerInRange, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, UnknownData_3318, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapMarkerWidget_C, Parent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmapMarkerWidget_C, 0x0238);
		}

		// BlueprintGeneratedClass appartmentWallPicker.appartmentWallPicker_C
		TEST_METHOD(BlueprintGeneratedClass__appartmentWallPicker__appartmentWallPicker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, wallsToHighlight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, highlightValue, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, UnknownData_2DWE, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, dynMats, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentWallPicker_C, appartmentViewer, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AappartmentWallPicker_C, 0x0368);
		}

		// Class UMG.AsyncTaskDownloadImage
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// Class UMG.Visual
		TEST_METHOD(Class__UMG__Visual)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// Class UMG.Widget
		TEST_METHOD(Class__UMG__Widget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, tooltipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_JWDL, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_1YHZ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0100);
		}

		// Class UMG.PanelWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_QEFW, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0118);
		}

		// Class UMG.ContentWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0118);
		}

		// Class UMG.BackgroundBlur
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_MROQ, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_5874, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_LBAE, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D0);
		}

		// Class UMG.PanelSlot
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// Class UMG.BackgroundBlurSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_1XWB, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// Class UMG.PropertyBinding
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// Class UMG.BoolBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// Class UMG.Border
		TEST_METHOD(Class__UMG__Border)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_DK38, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_VTZ6, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_B52F, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0260);
		}

		// Class UMG.BorderSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_UYMM, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// Class UMG.BrushBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_OS4I, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// Class UMG.Button
		TEST_METHOD(Class__UMG__Button)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_AONX, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_YKQM, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0420);
		}

		// Class UMG.ButtonSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_VM1Y, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// Class UMG.CanvasPanel
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_BY4F, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0128);
		}

		// Class UMG.CanvasPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_5ABV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_0XSB, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// Class UMG.CheckBox
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_66SL, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_GA4W, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_38XS, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_XWC3, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_2O1D, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0768);
		}

		// Class UMG.CheckedStateBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_6MI6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// Class UMG.CircularThrobber
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_WLFT, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_V6KE, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01B8);
		}

		// Class UMG.ColorBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_W4DB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// Class UMG.ComboBox
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_XUP5, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0138);
		}

		// Class UMG.ComboBoxString
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0BC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_61XS, 0x0BC6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_AO8X, 0x0C49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_EMXO, 0x0C80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0CC0);
		}

		// Class UMG.DragDropOperation
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_2BYO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_9AMN, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// Class UMG.DynamicEntryBox
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryBoxType, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_1ENR, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySpacing, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_EIER, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, SpacingPattern, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySizeRule, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryHorizontalAlignment, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryVerticalAlignment, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_CIOX, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, MaxElementSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_259Z, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_LEG8, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01D0);
		}

		// Class UMG.EditableText
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_7X3G, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x041F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_SBC2, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_EAWQ, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0458);
		}

		// Class UMG.EditableTextBox
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_GTVQ, 0x09DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_TEI4, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_EQR4, 0x0A20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A30);
		}

		// Class UMG.ExpandableArea
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_9SYH, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_CDLL, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_KFH9, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0330);
		}

		// Class UMG.FloatBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// Class UMG.GridPanel
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_ZFUG, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0148);
		}

		// Class UMG.GridSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_KCYO, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_ZJBL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// Class UMG.HorizontalBox
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_VB08, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0128);
		}

		// Class UMG.HorizontalBoxSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_1VWV, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// Class UMG.Image
		TEST_METHOD(Class__UMG__Image)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_J4XM, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x01E8);
		}

		// Class UMG.InputKeySelector
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_K42F, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_M6F4, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0670);
		}

		// Class UMG.Int32Binding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// Class UMG.InvalidationBox
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_5K7N, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0130);
		}

		// Class UMG.NativeUserListEntry
		TEST_METHOD(Class__UMG__NativeUserListEntry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeUserListEntry, 0x0028);
		}

		// Class UMG.UserListEntry
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// Class UMG.UserObjectListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// Class UMG.ListViewBase
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_XFOU, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0208);
		}

		// Class UMG.ListView
		TEST_METHOD(Class__UMG__ListView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_T14C, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_DNZ8, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_AQ9R, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0328);
		}

		// Class UMG.ListViewDesignerPreviewItem
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// Class UMG.MenuAnchor
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_H24F, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_SIHB, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0158);
		}

		// Class UMG.MouseCursorBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// Class UMG.MovieScene2DTransformSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_26TD, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_2XIK, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0550);
		}

		// Class UMG.MovieScene2DTransformTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0080);
		}

		// Class UMG.MovieSceneMarginSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0360);
		}

		// Class UMG.MovieSceneMarginTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0080);
		}

		// Class UMG.MovieSceneWidgetMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0080);
		}

		// Class UMG.TextLayoutWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_2PHC, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0120);
		}

		// Class UMG.MultiLineEditableText
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_P732, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x03AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x03AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_7MD5, 0x03AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_CCMN, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x03E0);
		}

		// Class UMG.MultiLineEditableTextBox
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0B41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0B42);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0B43);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_DPKA, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_PSH4, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C08);
		}

		// Class UMG.NamedSlot
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_2JFW, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0128);
		}

		// Class UMG.NamedSlotInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// Class UMG.NativeWidgetHost
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_F289, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0110);
		}

		// Class UMG.Overlay
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_CS3F, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0128);
		}

		// Class UMG.OverlaySlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_V1K1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_S0ZE, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// Class UMG.ProgressBar
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_QSXV, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_ZSNV, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0310);
		}

		// Class UMG.RetainerBox
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_H1XB, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_OSHK, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_QUMK, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0148);
		}

		// Class UMG.RichTextBlock
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_PHRD, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_ZCE5, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0368);
		}

		// Class UMG.RichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// Class UMG.RichTextBlockImageDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// Class UMG.SafeZone
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_A90T, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0130);
		}

		// Class UMG.SafeZoneSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_7C32, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_3CN3, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// Class UMG.ScaleBox
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_374P, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, bSingleLayoutPass, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_X1BZ, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0138);
		}

		// Class UMG.ScaleBoxSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_Q05X, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// Class UMG.ScrollBar
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_QFJ9, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_SJYQ, 0x05E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x05F8);
		}

		// Class UMG.ScrollBox
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x0822);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_S8SH, 0x0823);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x082E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_4F0E, 0x082F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_QEGH, 0x0835);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_8X8A, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0860);
		}

		// Class UMG.ScrollBoxSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_NKQ9, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// Class UMG.SizeBox
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_RAJ3, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_285F, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0148);
		}

		// Class UMG.SizeBoxSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_BX6P, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// Class UMG.SlateBlueprintLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// Class UMG.SlateVectorArtData
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// Class UMG.Slider
		TEST_METHOD(Class__UMG__Slider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_FGDN, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_OON2, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x047F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_XCWI, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_TWX2, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04E8);
		}

		// Class UMG.Spacer
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_YJ59, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0118);
		}

		// Class UMG.SpinBox
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GZ9G, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_93B2, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_L4H3, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_H8DE, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_RIGM, 0x04F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0508);
		}

		// Class UMG.TextBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_I0WU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// Class UMG.TextBlock
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_KXHI, 0x0206);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x0218);
		}

		// Class UMG.Throbber
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_LK25, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_R0ZK, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01A8);
		}

		// Class UMG.TileView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_8RM8, 0x0332);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0348);
		}

		// Class UMG.TreeView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_MIF6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_8QUY, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x0380);
		}

		// Class UMG.UMGSequencePlayer
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_ZUA9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_XQ29, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x06E8);
		}

		// Class UMG.UniformGridPanel
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_AXGO, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0140);
		}

		// Class UMG.UniformGridSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_ZZDH, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_EFUK, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// Class UMG.UserWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FAX5, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_RQVK, 0x01AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_JO0V, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0208);
		}

		// Class UMG.VerticalBox
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_XEF0, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0128);
		}

		// Class UMG.VerticalBoxSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_2ZUP, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// Class UMG.Viewport
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_G9T3, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0140);
		}

		// Class UMG.VisibilityBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// Class UMG.WidgetAnimation
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationStarted, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationFinished, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_787Q, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0398);
		}

		// Class UMG.WidgetBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// Class UMG.WidgetBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_RB8X, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0350);
		}

		// Class UMG.WidgetBlueprintLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// Class UMG.WidgetComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Space, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TimingPolicy, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_RINS, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_AIM7, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_V4DX, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_21RC, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x05BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x05BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_RJSY, 0x05BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x05ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_05R6, 0x05EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_TN4X, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_989U, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_2ZNL, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_1MP2, 0x067C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x06A0);
		}

		// Class UMG.WidgetInteractionComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ZZMX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_D30B, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_BDPW, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_9L2U, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_U9BT, 0x0423);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0430);
		}

		// Class UMG.WidgetLayoutLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// Class UMG.WidgetNavigation
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0118);
		}

		// Class UMG.WidgetSwitcher
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_6J6T, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0130);
		}

		// Class UMG.WidgetSwitcherSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_DLIG, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// Class UMG.WidgetTree
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// Class UMG.WindowTitleBarArea
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_6K4R, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0138);
		}

		// Class UMG.WindowTitleBarAreaSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_LKV4, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// Class UMG.WrapBox
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_KMR5, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0138);
		}

		// Class UMG.WrapBoxSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_ACZ1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_QN4X, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// BlueprintGeneratedClass interactiveWaterSinkBP.interactiveWaterSinkBP_C
		TEST_METHOD(BlueprintGeneratedClass__interactiveWaterSinkBP__interactiveWaterSinkBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, Widget, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, Audio, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, waterFound, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, allWaterFull, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, fillingWater, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, UnknownData_EIZL, 0x0443);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, waterFillTimer, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, waterFillTimeFull, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, waterFillPerSecond, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinteractiveWaterSinkBP_C, sinkProgress, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AinteractiveWaterSinkBP_C, 0x0458);
		}

		// BlueprintGeneratedClass IBO_UpgradeBuildingTest.IBO_UpgradeBuildingTest_C
		TEST_METHOD(BlueprintGeneratedClass__IBO_UpgradeBuildingTest__IBO_UpgradeBuildingTest_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AIBO_UpgradeBuildingTest_C, StaticMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIBO_UpgradeBuildingTest_C, BuilingManager, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIBO_UpgradeBuildingTest_C, 0x0438);
		}

		// BlueprintGeneratedClass playerCharacterPC.playerCharacterPC_C
		TEST_METHOD(BlueprintGeneratedClass__playerCharacterPC__playerCharacterPC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterPC_C, UberGraphFrame, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterPC_C, FrontWidgets, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AplayerCharacterPC_C, 0x0690);
		}

		// BlueprintGeneratedClass IBO_DrugTake.IBO_DrugTake_C
		TEST_METHOD(BlueprintGeneratedClass__IBO_DrugTake__IBO_DrugTake_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AIBO_DrugTake_C, TakeSubstance, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIBO_DrugTake_C, 0x0430);
		}

		// WidgetBlueprintGeneratedClass inventoryScreen.inventoryScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__inventoryScreen__inventoryScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillInfoAnim, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, activeSalesList, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, activeTaskList, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, backpackListWidget, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, backpackPanel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, backpackSlotWidget, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, bg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Border, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, btnAcceptTrade, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, btnCancelTrade, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, btnClearTrade, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, confusionBlur, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, containerListWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, containerPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, dropActionPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, dropBlocker, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_7, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_12, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, Image_13, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, inventoryLeftBG, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, itemDropWidget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, neededList, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, pocketHolder, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, progExpLevel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, progExpoFactor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, progRiskFactor, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, sellerItemsList, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelIllusion, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelLearner, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelLockpick, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelPockets, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelRunner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelSalesman, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelStamina, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillLevelStealth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, skillPointsQuanPanel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, sumPanel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabCharacter, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabInventory, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabOrganiser, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabPanel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabsBackground, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_4, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_8, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_11, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_16, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_22, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_24, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, TextBlock_31, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tradeItemList, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tradePanel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tradeSumPanel, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tradeTypeSwitch, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtBackpackWeight, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtContainerName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtContainerWeight, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtExpositionHeading, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtItemsValue, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtNumSkillPoints, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtRiskFactorHeading, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtSellerName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtSkillsAvailable, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsClientsLost, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsClientsOD, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsClientsReturning, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsClientsTotal, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsDealers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsDistribution, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsExpoRank, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsNextLevel, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsNumRaids, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsPlayerLevel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsRiskFactorRank, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsSales, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsTimesCaught, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtStatsTimesChased, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtTradeTitle, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, txtWalletValue, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, useSlotWidget_2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, useSlotWidget_3, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, useSlotWidget_4, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, useSlotWidget_5, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, widgetHolder, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, WidgetSwitcher_106, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, inactiveTabOpacity, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, curItemValue, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, valueGoodColor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, valueBadColor, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, statManagerRef, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, riskRankList, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, expoRankList, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, sellerMem, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabColorActive, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabColorInactive, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, newTabID, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tempCountedItemPrice, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabTextColorActive, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, tabTextColorInactive, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, randScale, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, randShear, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, randAngle, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, curScale, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, curShear, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, curAngle, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinventoryScreen_C, activeElementsColor, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UinventoryScreen_C, 0x05E8);
		}

		// WidgetBlueprintGeneratedClass appartmentViewerWidget.appartmentViewerWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__appartmentViewerWidget__appartmentViewerWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, confirmIntro, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, ConfirmPanel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, detailsPanel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, Image_3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, Image_4, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, Image_5, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, Image_6, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, rentCTA, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, rentingSteps, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, statsHolder, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_8, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_10, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_14, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_16, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, TextBlock_17, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtAccBalance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtAddress, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtAppartmentName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtAppDesc, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtBoostClients, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtBoostDealers, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtBoostExp, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtBoostRespDrop, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtBoostRespect, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtBoostSales, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtConfirmText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtConfirmTitle, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtFloors, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtMeterage, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtOwned, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtPrice, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtProcessing, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtRaided, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtRespBoost, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, txtSavePoint, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentViewerWidget_C, activeElementsColor, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UappartmentViewerWidget_C, 0x0380);
		}

		// WidgetBlueprintGeneratedClass appartmentModeWidget.appartmentModeWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__appartmentModeWidget__appartmentModeWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, appartmentList, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, AppManageList, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, AppManageList_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, AppManageList_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, btnCloseShipment, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Button_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, hoveredDescPanel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_5, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_6, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_8, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, Image_9, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, ManagerPanel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, objectList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, ShipmentPanel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, tabFloors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, tabFurniture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, tabManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, tabsVilla, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, tabWalls, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, TextBlock_7, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, TextBlock_9, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, TextBlock_19, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, TextBlock_33, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, txt, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, txtHoveredDescription, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, placeObjectNames, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, placeObjects, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, placeObjectsCategories, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, placeObjectsQuantity, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, curSelectedListObject, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, UnknownData_THRB, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, placeObjectsSourceIndex, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, AppartmentRef, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, activeElementsColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, InManager, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, UnknownData_8UME, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, VillaRef, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, CurListCategory, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, UnknownData_8W6C, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, CurActiveTab, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, MoneyCountedSell, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, UnknownData_DEL8, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, computerRef, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UappartmentModeWidget_C, CurHideoutList, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UappartmentModeWidget_C, 0x03C0);
		}

		// WidgetBlueprintGeneratedClass checkOutListItemWidget.checkOutListItemWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__checkOutListItemWidget__checkOutListItemWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, btnQuanAdd, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, btnQuanSub, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, btnRemove, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, itemImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, txtAmountPriceTotal, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, txtItemName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, txtItemQuan, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, Quantity, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, basePrice, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, Index, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, UnknownData_3N1P, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckOutListItemWidget_C, parentRef, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcheckOutListItemWidget_C, 0x0268);
		}

		// BlueprintGeneratedClass PM_CaughtPlayer.PM_CaughtPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__PM_CaughtPlayer__PM_CaughtPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CaughtPlayer_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CaughtPlayer_C, ignore, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_CaughtPlayer_C, 0x00B8);
		}

		// BlueprintGeneratedClass questManager.questManager_C
		TEST_METHOD(BlueprintGeneratedClass__questManager__questManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, narrator, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, PlayerRef, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskNames, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, tempDrugNames, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskDecriptions, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskStringActions, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskCompleted, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskFailed, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskIsSale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskDisplayed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskSpecial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskExpRewards, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, narrationPlaying, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_3EQE, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, defCameraPostProcess, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, greyCameraPostProcess, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstEncounters, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, tipActive, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_APM0, 0x0DD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, narrationsPlayed, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskDisplayQueueTitle, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskDisplayQueueDesc, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskDisplayQueueStatus, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskDisplayDelay, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstDeadDropTaskID, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, curGameTip, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, workStationManualOnceOpen, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_TW45, 0x0E29);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, numSales, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstSalesDone, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstShadyComm, 0x0E31);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_FRL1, 0x0E32);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstShadyCommTaskID, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, introCreditsTitles, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, introCretitsPersons, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, introCreditsCompany, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, introCreditsCurNum, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstDeadDrop, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, metEddie, 0x0E6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstWorkStationMade, 0x0E6E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_WZPE, 0x0E6F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstDopeOrderTaskID, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstShoppingTaskID, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstOrderDone, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_PDXW, 0x0E79);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstOwnOrderTaskID, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstOwnOrderWasReceived, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_GVJ4, 0x0E81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, workStationTutorial, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, workStationTutorialEnded, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, playerKnowsRefundCartel, 0x0E91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_I650, 0x0E92);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, waitingTipTitle, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, waitingTipDesc, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, bankTaskID, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, atmWasActivated, 0x0ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, bankWasIntroduced, 0x0ECD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_6H5K, 0x0ECE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, levelUpUnlocks, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstLoaded, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_KBY2, 0x0EE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, eddieCalls, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, apartmentModeIntroduced, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, apartmentModeFirstLaunched, 0x0EF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_00OK, 0x0EFA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, apartmentModeTaskID, 0x0EFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, rentingTaskID, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, apartmentViewerLaunched, 0x0F04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, appRentDisplayed, 0x0F05);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_GYFT, 0x0F06);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, drugStoreTaskID, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, policeIntroduced, 0x0F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_TSSO, 0x0F0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, confirmedOrderCount, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, keyFinderTaskID, 0x0F14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, rentHideoutTaskID, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstApartmentRented, 0x0F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_E1XZ, 0x0F1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, furnitureModeTaskID, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longGainClientsTaskID, 0x0F24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longFirstDealerTaskID, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longNewDrugsTaskID, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListName, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListShort, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListDescription, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListExpReward, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListCashReward, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListActive, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questListCompleted, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, questActivateScript, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, memQuestID, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_5J9O, 0x0FB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, taskCompletesQuest, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, cartelRefundQuestID, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, markTerritoryTaskID, 0x0FCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, gainTerritory, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_8BS8, 0x0FD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, findSampleClientsTaskID, 0x0FD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, sprayPutCount, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, putSprays, 0x0FDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, disableNarration, 0x0FDD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, secondMapZoneUnlocked, 0x0FDE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_NXNL, 0x0FDF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, jayShopTaskID, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, sectorBTaskID, 0x0FE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, eddieCallCountdown, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, spraySymbolDialogueDisplayed, 0x0FEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_94S7, 0x0FED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, chosenSpraySymbol, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, eddieCalledGangsters, 0x0FF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_0REO, 0x0FF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, meetGangTaskID, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, sectorBTaskID2, 0x0FFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longGangsTaskID, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longGainGangRepTaskID, 0x1004);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longDominationTaskID, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, ballenaProtection, 0x100C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, unlockDowntownTask, 0x100D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_YBFH, 0x100E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, furtherNorthTaskID, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, ballenaFirstQuan, 0x1014);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, ballenaFirstSize, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, ballenaFirstPrice, 0x101C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, keijiFirstQuan, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, keijiFirstSize, 0x1024);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, keijiFirstPrice, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_620K, 0x102C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, quickHintQueueTexts, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, quickHintQueueCategories, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, policeHoursHintDisplayed, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, firstOrderSpawnTip, 0x1051);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_TUJ7, 0x1052);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, unlockOldMarket, 0x1054);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longAreas01TaskID, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longAreas02TaskID, 0x105C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, longAreas03TaskID, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, officialVersion, 0x1064);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_YM66, 0x1065);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, seedGuyContactID, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_9Y2Q, 0x106C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, passageTraderDialoguesDelet, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, SectorCUnlocked, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_PNKM, 0x1081);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, SectorTaskHideoutID, 0x1084);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, SectorTaskFactoryID, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, SectorTaskLaundryID, 0x108C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, LaunderDoorsReported, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UserMessages, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, NewLaunderPresented, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, UnknownData_W0B7, 0x10B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AquestManager_C, NewLaunderTaskID, 0x10B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AquestManager_C, 0x10B8);
		}

		// BlueprintGeneratedClass BP_AS_MDMA.BP_AS_MDMA_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_MDMA__BP_AS_MDMA_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_MDMA_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_MDMA_C, 0x03F0);
		}

		// BlueprintGeneratedClass BP_AS_Metaamfetamina.BP_AS_Metaamfetamina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Metaamfetamina__BP_AS_Metaamfetamina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Metaamfetamina_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Metaamfetamina_C, 0x03F0);
		}

		// BlueprintGeneratedClass BP_AS_Psylocybina.BP_AS_Psylocybina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Psylocybina__BP_AS_Psylocybina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Psylocybina_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Psylocybina_C, 0x03F0);
		}

		// BlueprintGeneratedClass BP_TDE_THCSativa.BP_TDE_THCSativa_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_THCSativa__BP_TDE_THCSativa_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_THCSativa_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_THCSativa_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_THCSativa_C, 0x04C0);
		}

		// WidgetBlueprintGeneratedClass orderDropOverlay.orderDropOverlay_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__orderDropOverlay__orderDropOverlay_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, addPanel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, addQuantitySpin, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, bg, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, btnAddToOrder, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, btnBalanceAccept, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, btnBalanceCancel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, btnCancelAdd, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, btnEvenCrypto, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, btnSendOrder, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, buyPTC, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, drugIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, evenPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, HorizontalBox_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, Image_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, Image_3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, itemList, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, TextBlock_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, TextBlock_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtadd, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtAddAction, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtAddButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtBalanceDesc, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtDebt, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtOrderPriceTotal, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtPitcoins, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtPlayerMoney, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtPtcBoost, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, txtTotalPrice, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, addedDrugs, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, AddedDrugIDs, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, addedDrugPrices, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, addedDrugQuantity, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, drugToTransfer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, DrugToTransferID, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, transferedDrugPrice, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, totalOrderPrice, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, priceColorOK, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, priceColorBad, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, tempRemoveID, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, cryptoToFill, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, dolarsFill, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, UnknownData_R444, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDropOverlay_C, ClickedBuytPTC, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UorderDropOverlay_C, 0x0468);
		}

		// BlueprintGeneratedClass policeWalkieTalkie.policeWalkieTalkie_C
		TEST_METHOD(BlueprintGeneratedClass__policeWalkieTalkie__policeWalkieTalkie_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, Audio, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, WalkieTalkie, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceWalkieTalkie_C, policemanRef, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceWalkieTalkie_C, 0x0360);
		}

		// WidgetBlueprintGeneratedClass doorBreachWidget.doorBreachWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__doorBreachWidget__doorBreachWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdoorBreachWidget_C, breachTap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdoorBreachWidget_C, circleProg, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdoorBreachWidget_C, circleProgBG, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdoorBreachWidget_C, ProgressBar_1, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdoorBreachWidget_C, 0x0228);
		}

		// BlueprintGeneratedClass virusFlashDrivePickup.virusFlashDrivePickup_C
		TEST_METHOD(BlueprintGeneratedClass__virusFlashDrivePickup__virusFlashDrivePickup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AvirusFlashDrivePickup_C, UberGraphFrame, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvirusFlashDrivePickup_C, 0x05B0);
		}

		// BlueprintGeneratedClass drugSeedPickup.drugSeedPickup_C
		TEST_METHOD(BlueprintGeneratedClass__drugSeedPickup__drugSeedPickup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugSeedPickup_C, Box, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdrugSeedPickup_C, 0x05B0);
		}

		// BlueprintGeneratedClass decoModernCouch.decoModernCouch_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernCouch__decoModernCouch_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernCouch_C, 0x0446);
		}

		// BlueprintGeneratedClass decoModernFloorLamp4.decoModernFloorLamp4_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernFloorLamp4__decoModernFloorLamp4_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp4_C, UnknownData_LTGJ, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp4_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp4_C, PointLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp4_C, LightSwitch1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp4_C, LightSwitch2, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernFloorLamp4_C, 0x0468);
		}

		// BlueprintGeneratedClass ws_tableIndustrialLarge.ws_tableIndustrialLarge_C
		TEST_METHOD(BlueprintGeneratedClass__ws_tableIndustrialLarge__ws_tableIndustrialLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_tableIndustrialLarge_C, 0x04C5);
		}

		// BlueprintGeneratedClass ws_oldschoolLongTable.ws_oldschoolLongTable_C
		TEST_METHOD(BlueprintGeneratedClass__ws_oldschoolLongTable__ws_oldschoolLongTable_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_oldschoolLongTable_C, 0x04C5);
		}

		// BlueprintGeneratedClass npcAmy.npcAmy_C
		TEST_METHOD(BlueprintGeneratedClass__npcAmy__npcAmy_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnpcAmy_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass confirmPopupFrame.confirmPopupFrame_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__confirmPopupFrame__confirmPopupFrame_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, End, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, bigBg, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, btnCancel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, btnConfirm, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, canvasBg, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, cracks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, frameHolder, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, TextBlock_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, txtButtonText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, txtDesc, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, txtTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, ShowMouse, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, UnknownData_8R0B, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, ActionID, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmPopupFrame_C, Querier, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UconfirmPopupFrame_C, 0x0290);
		}

		// BlueprintGeneratedClass rentAppartmentArea.rentAppartmentArea_C
		TEST_METHOD(BlueprintGeneratedClass__rentAppartmentArea__rentAppartmentArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, marker, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, Overlap, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, HideoutID, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaSize, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_I6UP, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, appartmentInventoryNames, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, appartmentInventory, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, appartmentInventoryQuantities, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaName, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaAddress, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaDescription, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaRented, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaOnDebt, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_PGLJ, 0x03EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaRentedTill, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaForever, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaTerminated, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_RJJJ, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaMeterage, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaImage, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaMinLevel, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaPrice, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaFloors, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaSaveStation, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_XQN2, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaVisits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, flashBangCount, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, flashBangCounter, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaDEAobserved, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, playerIn, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_8Q2X, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, playerDistanceSpawnSUV, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, tryStartObservation, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_43WD, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaObservationLength, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaObservationCounter, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, raidCleanup, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, areaRaided, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_QJIN, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, respectBoost, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, wallPickerRef, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, resetCountdown, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, tryingToReset, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, showingMarker, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_0MHI, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, clientBoost, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, respectPercBoost, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, respectDropBoost, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, expBoost, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, saleSpeedBoost, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, filterRatio, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, filterCalcRatio, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, weedFailBaseExpo, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, weedFailBaseRisk, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, weedGrowthRatio, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, curPurgeItems, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, OriginalInstance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, UnknownData_JOIN, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, AreaSizeStatic, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, raidManager, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, HideoutDatabase, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, RamaVariableFix, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArentAppartmentArea_C, SectorCFirst, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ArentAppartmentArea_C, 0x04B1);
		}

		// BlueprintGeneratedClass eddieCashReturnDialogue.eddieCashReturnDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__eddieCashReturnDialogue__eddieCashReturnDialogue_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeddieCashReturnDialogue_C, 0x0392);
		}

		// WidgetBlueprintGeneratedClass demoWatermark.demoWatermark_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__demoWatermark__demoWatermark_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdemoWatermark_C, 0x0208);
		}

		// BlueprintGeneratedClass garbageCloth2.garbageCloth2_C
		TEST_METHOD(BlueprintGeneratedClass__garbageCloth2__garbageCloth2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageCloth2_C, 0x05A8);
		}

		// BlueprintGeneratedClass keyElectricBox.keyElectricBox_C
		TEST_METHOD(BlueprintGeneratedClass__keyElectricBox__keyElectricBox_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeyElectricBox_C, 0x05A8);
		}

		// BlueprintGeneratedClass PolicemanBaseClass.PolicemanBaseClass_C
		TEST_METHOD(BlueprintGeneratedClass__PolicemanBaseClass__PolicemanBaseClass_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, vest, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, Helmet, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, RamaSave, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, Taser, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, Voice, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, leashPosition2, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, leashPosition, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, playerPhrase, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, overlapDetector, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, AIPerception, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, startPoint, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, tempHeadRot, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, partnerRefID, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, MyID, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, PlayerRef, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, perceptionMeter, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, perceptionRise, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, perceptionDetectLevel, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, perceptionMinVisibility, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, immediateDetectionDistance, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, maxDetectionDistance, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, chaseVisibilityBoost, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, chaseBoostValue, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, minSuspicionValue, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, suspectMode, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_7PKO, 0x07E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, speedWalking, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, speedChasing, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, speedSeeking, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, speedSuspect, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, closeHearRadius, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, alerted, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_TZAI, 0x07FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, alertedTimeout, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, alertedTimer, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, alertSuspicionAdd, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, alertLevelMax, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, imediateControlSuspicion, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, maxControlDistance, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, observePlayer, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_C7SQ, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, controlMultiplier, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, controlDistanceClose, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, firstLaunched, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_ZDSQ, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, Blackboard, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, isSetUp, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, canSeePlayer, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, playerInSight, 0x0832);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, farFromPartner, 0x0833);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, controlTimeChase, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, controlApproachTimer, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, controlDistanceLastFrame, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, WalkieTalkie, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, recalled, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, headRotReset, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, playerClose, 0x084A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_B2S5, 0x084B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, policemanSuspicion, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, policemanStatic, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_IAHO, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, staticDespawnTime, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, staticDespawnTimer, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, minDistancePerceptionClamp, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, staticPoliceman, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, canHearPlayer, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, UnknownData_42B9, 0x0862);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, spotChanceMultiplier, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::APolicemanBaseClass_C, CheatBlinded, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APolicemanBaseClass_C, 0x0869);
		}

		// BlueprintGeneratedClass SampleClientSpawner.SampleClientSpawner_C
		TEST_METHOD(BlueprintGeneratedClass__SampleClientSpawner__SampleClientSpawner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, AreasPopulated, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, SaleAreaMan, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, SalesMan, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, AllAreaGizmos, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, AreasToClean, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, testString, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASampleClientSpawner_C, CurPlayerAreas, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASampleClientSpawner_C, 0x0398);
		}

		// BlueprintGeneratedClass Factory_01_01.Factory_01_01_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_01_01__Factory_01_01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh126, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh125, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, Scene, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh124, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh123, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh122, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh121, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh120, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh119, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh118, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh117, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh116, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh115, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh114, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh113, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh112, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh111, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh110, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh109, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh108, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh107, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh106, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh105, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh104, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh103, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh102, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh101, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh100, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh99, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh98, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh97, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh96, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh95, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh94, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh93, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh92, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh91, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh90, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh89, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh88, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh87, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh86, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh85, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh84, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh83, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh82, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh81, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh80, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh79, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh78, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh77, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh76, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh75, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh74, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh73, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh72, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh71, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh70, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh69, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh68, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh67, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh66, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh65, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh64, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh63, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh62, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh61, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh60, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh59, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh58, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh57, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh56, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh55, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh54, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh53, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh52, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh51, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh50, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh49, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh48, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh47, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh46, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh45, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh44, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh43, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh42, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh41, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh40, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh39, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh38, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh37, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh36, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh35, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh34, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh33, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh32, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh31, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh30, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh29, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh28, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh27, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh26, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh25, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh24, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh23, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh22, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh21, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh20, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh19, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh18, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh17, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh16, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh15, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh14, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh13, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh12, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh11, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh10, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh9, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh8, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh7, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh6, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh5, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh4, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh3, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh1, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_01_C, StaticMesh, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_01_01_C, 0x0728);
		}

		// BlueprintGeneratedClass Factory_03_01_closed.Factory_03_01_closed_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_03_01_closed__Factory_03_01_closed_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh51, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh50, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh49, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh48, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh21, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh47, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh46, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh45, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh44, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh43, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh42, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh41, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh40, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal7, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal6, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal5, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh39, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Scene, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal3, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, Decal, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh38, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh37, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh36, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh35, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh34, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh33, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh32, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh31, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh30, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh29, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh28, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh27, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh26, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh25, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh24, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh23, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh22, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh20, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh19, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh18, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh17, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh16, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh15, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh14, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh13, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh12, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh11, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh10, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh9, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh8, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh7, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh6, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh5, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh4, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh3, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh2, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh1, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_03_01_closed_C, StaticMesh, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_03_01_closed_C, 0x0510);
		}

		// BlueprintGeneratedClass lootSpawner.lootSpawner_C
		TEST_METHOD(BlueprintGeneratedClass__lootSpawner__lootSpawner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, SpawnTimeout, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, spawnTimeoutMin, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, spawnTimeoutMax, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, lootSpawnChance, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, Countdown, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, UnknownData_X4JI, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, spawnableLoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, spawnableQuanMin, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, spawnableQuanMax, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, spawnableSpawnWeight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, memQuan, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, UnknownData_GWUG, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlootSpawner_C, memDrug, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlootSpawner_C, 0x0458);
		}

		// BlueprintGeneratedClass weedAnnihilator.weedAnnihilator_C
		TEST_METHOD(BlueprintGeneratedClass__weedAnnihilator__weedAnnihilator_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedAnnihilator_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedAnnihilator_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedAnnihilator_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedAnnihilator_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedAnnihilator_C, VolumeBounds, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedAnnihilator_C, 0x0354);
		}

		// BlueprintGeneratedClass burningTires.burningTires_C
		TEST_METHOD(BlueprintGeneratedClass__burningTires__burningTires_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, Sphere1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, Audio, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, RamaSave, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, burningTiresAfterSmoke, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, PointLight, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, Decal, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, burningTiresSmoke, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, StaticMesh3, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, StaticMesh1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, StaticMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, SM_Wheel_02, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, DefaultSceneRoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, lightIntensity_NewTrack_0_CA4D2E6048C7CCB4FBD38DAF10ABB806, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, lightIntensity__Direction_CA4D2E6048C7CCB4FBD38DAF10ABB806, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, UnknownData_RUJK, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, LightIntensity, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, initialIntensity, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AburningTires_C, extinguished, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AburningTires_C, 0x03B5);
		}

		// BlueprintGeneratedClass eddieFirstDialogue.eddieFirstDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__eddieFirstDialogue__eddieFirstDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, phone, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, spawnPoint, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, Capsule, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, RamaSave, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, Audio, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, playerComeTrigger, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, blinkingEyesTL_Amount_895805BE4374DB3D02D8FABD08C2FB14, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, blinkingEyesTL__Direction_895805BE4374DB3D02D8FABD08C2FB14, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, UnknownData_V41M, 0x077D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, blinkingEyesTL, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, mouthAnimTL_U_pose_3D8BE4384516E5C3D72A3A8C92B73554, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, mouthAnimTL_A_pose_3D8BE4384516E5C3D72A3A8C92B73554, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, mouthAnimTL__Direction_3D8BE4384516E5C3D72A3A8C92B73554, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, UnknownData_08SX, 0x0791);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, mouthAnimTL, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, playerCame, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, UnknownData_D1QJ, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, inpatientQuotes, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, eddieAnimBP, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, isSpeaking, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, playerIsSiting, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, dialogueEnded, 0x07C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, UnknownData_T2UE, 0x07C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, sitingPawn, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, extinguishPolice, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, eddieFirstAnimBP, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieFirstDialogue_C, blantRef, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeddieFirstDialogue_C, 0x07E8);
		}

		// BlueprintGeneratedClass keijiManSpawnPoint.keijiManSpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__keijiManSpawnPoint__keijiManSpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, Box1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, moneySpawn, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, SM_hangaBench, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, Arrow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AkeijiManSpawnPoint_C, DefaultSceneRoot, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AkeijiManSpawnPoint_C, 0x0360);
		}

		// BlueprintGeneratedClass dd_CustomSpot.dd_CustomSpot_C
		TEST_METHOD(BlueprintGeneratedClass__dd_CustomSpot__dd_CustomSpot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_CustomSpot_C, UberGraphFrame, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_CustomSpot_C, Box_1, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_CustomSpot_C, CustomStotName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_CustomSpot_C, colliderExtent, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Add_CustomSpot_C, 0x054C);
		}

		// BlueprintGeneratedClass SecurityGuardSectorCDialogue.SecurityGuardSectorCDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityGuardSectorCDialogue__SecurityGuardSectorCDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityGuardSectorCDialogue_C, UnknownData_MHRK, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityGuardSectorCDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityGuardSectorCDialogue_C, KeyPrice, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityGuardSectorCDialogue_C, 0x03A4);
		}

		// BlueprintGeneratedClass workspaceTutorialManager.workspaceTutorialManager_C
		TEST_METHOD(BlueprintGeneratedClass__workspaceTutorialManager__workspaceTutorialManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, tutorialSteps, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, numStep, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, awaitingPlayer, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, workStationTutorialStarted, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworkspaceTutorialManager_C, containerAlreadyPut, 0x0356);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworkspaceTutorialManager_C, 0x0357);
		}

		// BlueprintGeneratedClass BTService_Bird_GetDistanceToEnemy.BTService_Bird_GetDistanceToEnemy_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_GetDistanceToEnemy__BTService_Bird_GetDistanceToEnemy_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_GetDistanceToEnemy_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_GetDistanceToEnemy_C, Enemy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_GetDistanceToEnemy_C, DistanceToEnemy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_GetDistanceToEnemy_C, 0x00F0);
		}

		// BlueprintGeneratedClass BTTask_Bird_MoveToEnemyLocation.BTTask_Bird_MoveToEnemyLocation_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_MoveToEnemyLocation__BTTask_Bird_MoveToEnemyLocation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_MoveToEnemyLocation_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_MoveToEnemyLocation_C, Enemy, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_MoveToEnemyLocation_C, 0x00D0);
		}

		// BlueprintGeneratedClass ActiveBush.ActiveBush_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush__ActiveBush_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveBush_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveBush_C, BushMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveBush_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveBush_C, Randomize, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveBush_C, UnknownData_HBVE, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActiveBush_C, ScaleMultiplier, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_C, 0x0348);
		}

		// Class LightPropagationVolumeRuntime.LightPropagationVolumeBlendable
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_QKW8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_7CQB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// BlueprintGeneratedClass backpackRepresentationModel.backpackRepresentationModel_C
		TEST_METHOD(BlueprintGeneratedClass__backpackRepresentationModel__backpackRepresentationModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackRepresentationModel_C, StaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbackpackRepresentationModel_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackRepresentationModel_C, 0x0338);
		}

		// Class InputCore.InputCoreTypes
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// Class CinematicCamera.CameraRig_Crane
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_JA8W, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0358);
		}

		// Class CinematicCamera.CameraRig_Rail
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_KQ87, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0348);
		}

		// Class CinematicCamera.CineCameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_U8XW, 0x0870);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0880);
		}

		// Class CinematicCamera.CineCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_7PHM, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_MU1H, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x084C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x0850);
		}

		// Class AssetRegistry.AssetRegistryImpl
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_97UY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0710);
		}

		// Class AssetRegistry.AssetRegistryHelpers
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// Class AssetRegistry.AssetRegistry
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// BlueprintGeneratedClass PM_PredictPlayerEscapePath.PM_PredictPlayerEscapePath_C
		TEST_METHOD(BlueprintGeneratedClass__PM_PredictPlayerEscapePath__PM_PredictPlayerEscapePath_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, chosenVector, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, directionSeek, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, TargetRightSide, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, UnknownData_B2X4, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, locationSeek, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PredictPlayerEscapePath_C, DirectionModifier, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_PredictPlayerEscapePath_C, 0x00D4);
		}

		// WidgetBlueprintGeneratedClass declarePackageWidget.declarePackageWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__declarePackageWidget__declarePackageWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn100g, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn10g, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn1g, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn1kg, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn20g, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn2g, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn3g, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn500g, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn50g, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btn5g, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btnAdd, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btnAdd5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btnCancel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btnConfirm, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btnSub, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, btnSub5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, Image_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, Image_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, quantitySlider, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, TextBlock_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, txtEndQuantity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, txtTitle, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, declaredSize, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, declaredQuantity, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, parentRef, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, colorSelected, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, colorDeselected, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, maxQuantity, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, UnknownData_048G, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeclarePackageWidget_C, activeElementColor, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdeclarePackageWidget_C, 0x0320);
		}

		// AnimBlueprintGeneratedClass fpsArmsAnimBP.fpsArmsAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__fpsArmsAnimBP__fpsArmsAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_Root_27DD5B424D87BE179AD36386CF46C416, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_TransitionResult_BF9116814F3A1F64B51BA69036AA187B, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_TransitionResult_3CEAF43F462B71A3BEEBD181B15B69BD, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_TransitionResult_FA435425470FBC54B34802AB1BD0A689, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_TransitionResult_E5A80D9D46124E3BE5CAEE95482C4865, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_TransitionResult_912D86B3479A90D9610D6B9C7F00D05C, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_TransitionResult_3031917A44126AEFF36F52B93B1469F6, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_SequencePlayer_7B32C1B041BB17723D37BFBDB807F696, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_StateResult_D2DC9CBB410CE9E91515F48992D1E339, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_SequencePlayer_7FDE4E3347378F1C910122860C60270D, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_StateResult_3FED405F48C42E32323074AE0C190EF4, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_SequencePlayer_723CC8E54A7F3EC47D04D381D483486E, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_StateResult_CBC9EADB4C5D979AAE3F54894387ADB8, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_SequencePlayer_443625294C59F22CA69BE6B1336983FA, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_StateResult_488375104E7F23378260E3BE76A1F7D8, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_BlendSpacePlayer_02B9A3904AB2F8A3B72D28913C2BF3EE, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_StateResult_246AF31246C0B6C5AD5E06862DC2105B, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, AnimGraphNode_StateMachine_37011AA24CDF3D3FD75D32A2F8848027, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, phoneIsUp, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, IsJumping, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UfpsArmsAnimBP_C, hasLanded, 0x0B22);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfpsArmsAnimBP_C, 0x0B23);
		}

		// BlueprintGeneratedClass checkPatrolMoving.checkPatrolMoving_C
		TEST_METHOD(BlueprintGeneratedClass__checkPatrolMoving__checkPatrolMoving_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckPatrolMoving_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcheckPatrolMoving_C, 0x00A0);
		}

		// BlueprintGeneratedClass policemanSpawner2.policemanSpawner2_C
		TEST_METHOD(BlueprintGeneratedClass__policemanSpawner2__policemanSpawner2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApolicemanSpawner2_C, DefaultSceneRoot, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApolicemanSpawner2_C, 0x0330);
		}

		// BlueprintGeneratedClass DrugSaleArea.DrugSaleArea_C
		TEST_METHOD(BlueprintGeneratedClass__DrugSaleArea__DrugSaleArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, Billboard, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, AreaID, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, AreaParentName, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, salePoints, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, areaMinLevel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSaleArea_C, areaLocked, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADrugSaleArea_C, 0x0375);
		}

		// BlueprintGeneratedClass DrugSalePoint.DrugSalePoint_C
		TEST_METHOD(BlueprintGeneratedClass__DrugSalePoint__DrugSalePoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, Arrow, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, SalePointName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, nightTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, Occupied, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, UnknownData_7UO8, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADrugSalePoint_C, occupyTime, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADrugSalePoint_C, 0x0370);
		}

		// WidgetBlueprintGeneratedClass bankHintCloudWidget.bankHintCloudWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__bankHintCloudWidget__bankHintCloudWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHintCloudWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHintCloudWidget_C, arrowLoop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHintCloudWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbankHintCloudWidget_C, Image_2, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbankHintCloudWidget_C, 0x0228);
		}

		// WidgetBlueprintGeneratedClass clientODPopup.clientODPopup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__clientODPopup__clientODPopup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientODPopup_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientODPopup_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientODPopup_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientODPopup_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UclientODPopup_C, txtOverdose, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UclientODPopup_C, 0x0230);
		}

		// BlueprintGeneratedClass decoHangingHousePlant1.decoHangingHousePlant1_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant1__decoHangingHousePlant1_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant1_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPicture_04.decoPicture_04_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_04__decoPicture_04_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_04_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPicture_06.decoPicture_06_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_06__decoPicture_06_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_06_C, 0x0446);
		}

		// BlueprintGeneratedClass decoPicture_09.decoPicture_09_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_09__decoPicture_09_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_09_C, 0x0446);
		}

		// BlueprintGeneratedClass navArea_PrivateProperty.navArea_PrivateProperty_C
		TEST_METHOD(BlueprintGeneratedClass__navArea_PrivateProperty__navArea_PrivateProperty_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnavArea_PrivateProperty_C, 0x0048);
		}

		// BlueprintGeneratedClass streetPersonFemale06BP.streetPersonFemale06BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale06BP__streetPersonFemale06BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale06BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass streetPersonFemale09BP.streetPersonFemale09BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale09BP__streetPersonFemale09BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale09BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass streetPersonFemale10BP.streetPersonFemale10BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale10BP__streetPersonFemale10BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale10BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass wallSprayMarking.wallSprayMarking_C
		TEST_METHOD(BlueprintGeneratedClass__wallSprayMarking__wallSprayMarking_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, sphereSmall, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, Sphere, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, Decal, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, LifeTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, spawned, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, UnknownData_O2D2, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallSprayMarking_C, defExposureEffect, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwallSprayMarking_C, 0x0364);
		}

		// WidgetBlueprintGeneratedClass symbolChoiceWidget.symbolChoiceWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__symbolChoiceWidget__symbolChoiceWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnClose, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol5, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol6, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol7, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnSymbol8, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, btnUseSelected, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_7, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_8, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_9, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, Image_10, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, symbolSelected, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, fromShady, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsymbolChoiceWidget_C, CanManualClose, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsymbolChoiceWidget_C, 0x02BE);
		}

		// AnimBlueprintGeneratedClass eddieMainAnimBP.eddieMainAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__eddieMainAnimBP__eddieMainAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieMainAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieMainAnimBP_C, AnimGraphNode_Root_71E2D97142C6063582A4289CBF6CFEDB, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieMainAnimBP_C, AnimGraphNode_SequencePlayer_CFE8EA36482E3727A05109AC9E317033, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UeddieMainAnimBP_C, 0x0448);
		}

		// BlueprintGeneratedClass backpackRepr_Duffle.backpackRepr_Duffle_C
		TEST_METHOD(BlueprintGeneratedClass__backpackRepr_Duffle__backpackRepr_Duffle_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackRepr_Duffle_C, 0x0338);
		}

		// BlueprintGeneratedClass BP_TDE_Tryptamina.BP_TDE_Tryptamina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Tryptamina__BP_TDE_Tryptamina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Tryptamina_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Tryptamina_C, DMT, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Tryptamina_C, DefaultSceneRoot, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Tryptamina_C, maxVol, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Tryptamina_C, 0x04CC);
		}

		// BlueprintGeneratedClass ActiveBush_Green03.ActiveBush_Green03_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Green03__ActiveBush_Green03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Green03_C, 0x0348);
		}

		// BlueprintGeneratedClass BP_WorldTimeAndConditions.BP_WorldTimeAndConditions_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WorldTimeAndConditions__BP_WorldTimeAndConditions_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WorldTimeAndConditions_C, UberGraphFrame, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WorldTimeAndConditions_C, RamaSave, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WorldTimeAndConditions_C, worldInitiated, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WorldTimeAndConditions_C, 0x0529);
		}

		// BlueprintGeneratedClass Barrier_bar_01_BP.Barrier_bar_01_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Barrier_bar_01_BP__Barrier_bar_01_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarrier_bar_01_BP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarrier_bar_01_BP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarrier_bar_01_BP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarrier_bar_01_BP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABarrier_bar_01_BP_C, 0x033D);
		}

		// BlueprintGeneratedClass BP_Laundry_Cart.BP_Laundry_Cart_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Laundry_Cart__BP_Laundry_Cart_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Laundry_Cart_Main, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Attacher_D, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Attacher_C, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Attacher_B, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Attacher_A, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Wheel_A, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Wheel_B, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Wheel_C, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, Wheel_D, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Laundry_Cart_C, SharedRoot, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Laundry_Cart_C, 0x0378);
		}

		// BlueprintGeneratedClass BP_NPC_Bird_Base.BP_NPC_Bird_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NPC_Bird_Base__BP_NPC_Bird_Base_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, UnknownData_UGLY, 0x074D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, UberGraphFrame, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FeatherParticle_Walking, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, Feather_Particle_Flying, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, RunAwayPoint, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FollowCamera, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, SpringArm, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, DoIFearEnemies_, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, ShouldIAttackEnemies_, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, ChaseTheEnemy_, 0x0782);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, UnknownData_H6XY, 0x0783);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, HealthBar, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, CanThisBirdPerch_, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, CanThisBirdFly_, 0x0791);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FlyAwayFromEnemies_, 0x0792);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, UnknownData_WCAC, 0x0793);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FlyingSpeed, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FlyingTurnSpeed, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BeginLevel_Flying_, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BeginLevel_Walking_, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BeginLevel_Perched_, 0x079E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, UnknownData_UHFN, 0x079F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BBKey_AreWeWalking_, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BBKey_AreWeFlying_, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BBKey_AreWePerched_, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FlySpeed_Min, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, FlySpeed_Max, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BBKey_TimeToLand_, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, GroundSpeed_Min, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, GroundSpeed_Max, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, BBKey_IsLookingForPerch_, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, VerticleThrustAmount, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, StayInSky_, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, DoADownTrace_, 0x07DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, UnknownData_O0G6, 0x07DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NPC_Bird_Base_C, DownTraceDistance, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NPC_Bird_Base_C, 0x07E4);
		}

		// BlueprintGeneratedClass SectorC_GateGuard.SectorC_GateGuard_C
		TEST_METHOD(BlueprintGeneratedClass__SectorC_GateGuard__SectorC_GateGuard_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorC_GateGuard_C, UnknownData_E3FC, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorC_GateGuard_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASectorC_GateGuard_C, 0x0AE0);
		}

		// BlueprintGeneratedClass curb5mBP.curb5mBP_C
		TEST_METHOD(BlueprintGeneratedClass__curb5mBP__curb5mBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Acurb5mBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acurb5mBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acurb5mBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acurb5mBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acurb5mBP_C, 0x033D);
		}

		// BlueprintGeneratedClass splineRoad500.splineRoad500_C
		TEST_METHOD(BlueprintGeneratedClass__splineRoad500__splineRoad500_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplineRoad500_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplineRoad500_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsplineRoad500_C, 0x0338);
		}

		// WidgetBlueprintGeneratedClass ArrestListItem.ArrestListItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ArrestListItem__ArrestListItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, BAILAMT, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, BailHolder, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, Button_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, DaysLeft, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, Image_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, Name, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, parentRef, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, ClientId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, UnknownData_E5UP, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, SalesMan, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, ClientMeta, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, HasBail, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, UnknownData_RCSH, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, ButtonChuj, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestListItem_C, BailQuan, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrestListItem_C, 0x02BC);
		}

		// BlueprintGeneratedClass shopOwnerDecorations.shopOwnerDecorations_C
		TEST_METHOD(BlueprintGeneratedClass__shopOwnerDecorations__shopOwnerDecorations_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopOwnerDecorations_C, UnknownData_8CZ4, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopOwnerDecorations_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopOwnerDecorations_C, 0x0AE0);
		}

		// BlueprintGeneratedClass lookAtTrigger.lookAtTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__lookAtTrigger__lookAtTrigger_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlookAtTrigger_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlookAtTrigger_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlookAtTrigger_C, LinetraceCollision, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlookAtTrigger_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlookAtTrigger_C, lookColSizing, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlookAtTrigger_C, subclassBlockActivation, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlookAtTrigger_C, 0x0355);
		}

		// BlueprintGeneratedClass ActiveBush_Fall01.ActiveBush_Fall01_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Fall01__ActiveBush_Fall01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Fall01_C, 0x0348);
		}

		// BlueprintGeneratedClass ActiveBush_Fall03.ActiveBush_Fall03_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Fall03__ActiveBush_Fall03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Fall03_C, 0x0348);
		}

		// BlueprintGeneratedClass closetSmall01BP.closetSmall01BP_C
		TEST_METHOD(BlueprintGeneratedClass__closetSmall01BP__closetSmall01BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AclosetSmall01BP_C, 0x04F1);
		}

		// BlueprintGeneratedClass cemeteryWallPieceBP.cemeteryWallPieceBP_C
		TEST_METHOD(BlueprintGeneratedClass__cemeteryWallPieceBP__cemeteryWallPieceBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AcemeteryWallPieceBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcemeteryWallPieceBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcemeteryWallPieceBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcemeteryWallPieceBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcemeteryWallPieceBP_C, 0x033D);
		}

		// BlueprintGeneratedClass fencePrivate02PartBP.fencePrivate02PartBP_C
		TEST_METHOD(BlueprintGeneratedClass__fencePrivate02PartBP__fencePrivate02PartBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfencePrivate02PartBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfencePrivate02PartBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfencePrivate02PartBP_C, FlipDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfencePrivate02PartBP_C, UnknownData_JNHN, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfencePrivate02PartBP_C, LengthSegments, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfencePrivate02PartBP_C, 0x0340);
		}

		// BlueprintGeneratedClass thickSplineAsphaltBP.thickSplineAsphaltBP_C
		TEST_METHOD(BlueprintGeneratedClass__thickSplineAsphaltBP__thickSplineAsphaltBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AthickSplineAsphaltBP_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AthickSplineAsphaltBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AthickSplineAsphaltBP_C, CloseAtStart, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AthickSplineAsphaltBP_C, CloseAtEnd, 0x0339);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AthickSplineAsphaltBP_C, 0x033A);
		}

		// BlueprintGeneratedClass ActiveBush_Flatland02.ActiveBush_Flatland02_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Flatland02__ActiveBush_Flatland02_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Flatland02_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass mixDetailsWidget.mixDetailsWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__mixDetailsWidget__mixDetailsWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, Border, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, btnCancel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, mixContents, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, TextBlock_5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, txtTotalMass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, MixerRef, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, nameLenLimit, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, UnknownData_11AL, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixDetailsWidget_C, activeElementsColor, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmixDetailsWidget_C, 0x0280);
		}

		// BlueprintGeneratedClass weedProductionLight.weedProductionLight_C
		TEST_METHOD(BlueprintGeneratedClass__weedProductionLight__weedProductionLight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, placementLimitSphere, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, SpotLight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, lightRangeLimit, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, affectRadius, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionLight_C, memOverlaps, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedProductionLight_C, 0x0460);
		}

		// BlueprintGeneratedClass itemInventoryHolder.itemInventoryHolder_C
		TEST_METHOD(BlueprintGeneratedClass__itemInventoryHolder__itemInventoryHolder_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, itemList, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, itemQuantities, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, itemTotalSize, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, itemTotalWeight, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AitemInventoryHolder_C, containerItemIndex, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AitemInventoryHolder_C, 0x0374);
		}

		// BlueprintGeneratedClass BP_decoDeskLamp3.BP_decoDeskLamp3_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoDeskLamp3__BP_decoDeskLamp3_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp3_C, UnknownData_QXW7, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp3_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp3_C, SpotLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp3_C, DynLightMat, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp3_C, DynGlassMat, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoDeskLamp3_C, 0x0468);
		}

		// BlueprintGeneratedClass decoHangingHousePlant7.decoHangingHousePlant7_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant7__decoHangingHousePlant7_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant7_C, 0x0446);
		}

		// BlueprintGeneratedClass decoTableHousePlant2.decoTableHousePlant2_C
		TEST_METHOD(BlueprintGeneratedClass__decoTableHousePlant2__decoTableHousePlant2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTableHousePlant2_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoTV.BP_decoTV_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoTV__BP_decoTV_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoTV_C, 0x0446);
		}

		// BlueprintGeneratedClass streetPersonMale03BP.streetPersonMale03BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonMale03BP__streetPersonMale03BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonMale03BP_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass plantStatsWidget.plantStatsWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__plantStatsWidget__plantStatsWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, progHealth, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, progHydration, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, progLighting, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, txtStrainNam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, plant, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplantStatsWidget_C, hydrationState, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UplantStatsWidget_C, 0x0244);
		}

		// BlueprintGeneratedClass daytimeRefStorage.daytimeRefStorage_C
		TEST_METHOD(BlueprintGeneratedClass__daytimeRefStorage__daytimeRefStorage_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, Billboard, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, sunLight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, moonLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, SkyLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, sunHolder, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, skySphere, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdaytimeRefStorage_C, exponentialFog, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdaytimeRefStorage_C, 0x0368);
		}

		// BlueprintGeneratedClass BP_Sky_Sphere.BP_Sky_Sphere_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sky_Sphere__BP_Sky_Sphere_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sky_Sphere_mesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Base, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sky_material, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Refresh_material, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_GVIZ, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Directional_light_actor, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Colors_determined_by_sun_position, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_0R2V, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_height, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_Brightness, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_Falloff, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_Color, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Overall_Color, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_Speed, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_Opacity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Stars_brightness, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_RAL8, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color_curve, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_color_curve, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color_curve, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sky_Sphere_C, 0x03C8);
		}

		// WidgetBlueprintGeneratedClass levelUpWidget.levelUpWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__levelUpWidget__levelUpWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UlevelUpWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlevelUpWidget_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlevelUpWidget_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlevelUpWidget_C, flash, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlevelUpWidget_C, txtLevel, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlevelUpWidget_C, 0x0230);
		}

		// Class FacialAnimation.AudioCurveSourceComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_FX6A, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0690);
		}

		// BlueprintGeneratedClass stream_oldMarket_farDetail.stream_oldMarket_farDetail_C
		TEST_METHOD(BlueprintGeneratedClass__stream_oldMarket_farDetail__stream_oldMarket_farDetail_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_oldMarket_farDetail_C, 0x0330);
		}

		// WidgetBlueprintGeneratedClass hideoutMarker.hideoutMarker_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__hideoutMarker__hideoutMarker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UhideoutMarker_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UhideoutMarker_C, 0x0210);
		}

		// BlueprintGeneratedClass smug_oldHarbor.smug_oldHarbor_C
		TEST_METHOD(BlueprintGeneratedClass__smug_oldHarbor__smug_oldHarbor_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Asmug_oldHarbor_C, 0x0378);
		}

		// BlueprintGeneratedClass doorsExtWood05.doorsExtWood05_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood05__doorsExtWood05_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood05_C, 0x052A);
		}

		// BlueprintGeneratedClass doorsExtWood06.doorsExtWood06_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood06__doorsExtWood06_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood06_C, 0x052A);
		}

		// BlueprintGeneratedClass SM_sidewalk_01_BP.SM_sidewalk_01_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SM_sidewalk_01_BP__SM_sidewalk_01_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_01_BP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_01_BP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_01_BP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_sidewalk_01_BP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASM_sidewalk_01_BP_C, 0x033D);
		}

		// AnimBlueprintGeneratedClass keijiFinalAnimBP.keijiFinalAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__keijiFinalAnimBP__keijiFinalAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_Root_6990C17A44D96BA282F7FFB676C64017, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_TransitionResult_5E9F2E8A4D72A91AF42D1DBD5ADA7592, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_TransitionResult_F52EA8374F65723411A2D2B1FC98001D, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_TransitionResult_620918F0478003E0E59E7CADE16A00DD, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_TransitionResult_BCAB126244DC6C9B52C7B4B7702594F5, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_TransitionResult_CF03E16D415206F872BC66B912ED980F, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_TransitionResult_A1FEEA064CD7AEC4252919985059F5FA, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_SequencePlayer_00B1203C4EBD7EF1050CC2A6F141ACA8, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_StateResult_00BD8C0545A94E513B180E9C8A449006, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_SequencePlayer_517C5FC04B588A2C889FE7AF8AF08B24, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_StateResult_3763BF62485358A2B96FAEA1C5B52DC8, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_SequencePlayer_0ED5FB71420545EF7C13D785BE1EE702, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_StateResult_63DB09614648003BEB2C1EB213F59566, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_SequencePlayer_7942A8F94AA4368F13E9F5B975C849D8, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_StateResult_94FC5F9749F56554FBE868B0BF8011A2, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimGraphNode_StateMachine_D7E8574147CCC9E0204E11A6903FEFB5, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, AnimStep, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UkeijiFinalAnimBP_C, Reset, 0x09BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UkeijiFinalAnimBP_C, 0x09BD);
		}

		// BlueprintGeneratedClass closetBig01BP.closetBig01BP_C
		TEST_METHOD(BlueprintGeneratedClass__closetBig01BP__closetBig01BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AclosetBig01BP_C, 0x04F1);
		}

		// BlueprintGeneratedClass HighwayPosterDouble_BP.HighwayPosterDouble_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HighwayPosterDouble_BP__HighwayPosterDouble_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, BillboardPower, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, BillboardLamps2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, BillboardLamps1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, BillboardPanel2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, BillboardPanel1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, Frame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, Post, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, LightsOn, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, UnknownData_CEKY, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, FaceMaterial1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayPosterDouble_BP_C, FaceMaterial2, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHighwayPosterDouble_BP_C, 0x0380);
		}

		// BlueprintGeneratedClass PoliceBlockadeManager.PoliceBlockadeManager_C
		TEST_METHOD(BlueprintGeneratedClass__PoliceBlockadeManager__PoliceBlockadeManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, PoliceAreas, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, PoliceAreaNums, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, SpawnedBlockade, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, UnknownData_VVQY, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, SpawnedAt, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, SpawnTimeout, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, SpawnMaxInterval, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, chosenPoint, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeManager_C, StatsMan, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APoliceBlockadeManager_C, 0x0380);
		}

		// BlueprintGeneratedClass weedStrain_Skyscrapper.weedStrain_Skyscrapper_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_Skyscrapper__weedStrain_Skyscrapper_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_Skyscrapper_C, 0x05A0);
		}

		// AnimBlueprintGeneratedClass eddieAnimBP.eddieAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__eddieAnimBP__eddieAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_Root_9852C6224E5B3A3B11DED0A19EFCBB45, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_4D6430234CAAFD4A9F357D9E419BAB8F, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_7AB3992B4BE66E94C1A770BB0D9C27DB, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_8F490EE04EFBACA433FC72ACC96EBE94, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_5530D9024AD8943FA46CC3BCBFB56441, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_5EC2B4074798D84BF4FC7EAEA91876F8, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_700109CF4DFD3F07C1FAC58948C65898, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_TransitionResult_C8D8A7DF46B51864674988A635069937, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_53ADEAA34BAAAD668A2D909DFA447282, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_71E5F05145E9209C8AF184A0C0D3FB84, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_82714C1847A0B8D7E6EF33A9A69E9BE8, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_6DB7F538473BD2896BD3C8A0A3BA0BB0, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_5F5E824245C87EF0C1DA1ABD2D5107EF, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_6243636D4D74661E46DD23A269809699, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_F1B045334663519C7BA9CEAA89567EBB, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_BE869DE14D48D513B334D683F319EEB9, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_9609A2CA4D5C0DFDD71A84BA76DC1712, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_3073B85C47372A8D208F3C9278AFE056, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_91AD55784D9B0E6FFC9FD9A39924588F, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_82A916FB4F71DBB6BFF984BC0C21676E, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_SequencePlayer_917F78F941B9D423AAAC96B1C60B7C54, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateResult_C981B1FE4D0E9D0417E10DB532337199, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, AnimGraphNode_StateMachine_E61653394F17E81B1E4626B4691A626F, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, giveJoint, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, afterJoint, 0x0CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, tellStory, 0x0CA2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, briefing, 0x0CA3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieAnimBP_C, Finish, 0x0CA4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UeddieAnimBP_C, 0x0CA5);
		}

		// BlueprintGeneratedClass BP_NextSingleton.BP_NextSingleton_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NextSingleton__BP_NextSingleton_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NextSingleton_C, 0x0148);
		}

		// Class Paper2D.MaterialExpressionSpriteTextureSampler
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_VXNO, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x0138);
		}

		// Class Paper2D.PaperCharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x0740);
		}

		// Class Paper2D.PaperFlipbook
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_CY7Y, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_BL9L, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// Class Paper2D.PaperFlipbookActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0330);
		}

		// Class Paper2D.PaperFlipbookComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_AYUL, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_M0II, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x05D0);
		}

		// Class Paper2D.PaperGroupedSpriteActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0330);
		}

		// Class Paper2D.PaperGroupedSpriteComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_DIRV, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x05B0);
		}

		// Class Paper2D.PaperRuntimeSettings
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_0FL4, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// Class Paper2D.PaperSprite
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_ET2S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceUV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceDimension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_T55L, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_9AX8, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00C0);
		}

		// Class Paper2D.PaperSpriteActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0330);
		}

		// Class Paper2D.PaperSpriteAtlas
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// Class Paper2D.PaperSpriteBlueprintLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// Class Paper2D.PaperSpriteComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x05A0);
		}

		// Class Paper2D.PaperTerrainActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0340);
		}

		// Class Paper2D.PaperTerrainComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_CY98, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_LQHB, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_R76U, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_26M7, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x05B0);
		}

		// Class Paper2D.PaperTerrainMaterial
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// Class Paper2D.PaperTerrainSplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_CAX4, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0650);
		}

		// Class Paper2D.PaperTileLayer
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_C39M, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_ZE34, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// Class Paper2D.PaperTileMap
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_QWOB, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_UA1Z, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_PT9K, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// Class Paper2D.PaperTileMapActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0330);
		}

		// Class Paper2D.PaperTileMapComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapWidth, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_4YI5, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x05D0);
		}

		// Class Paper2D.PaperTileSet
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// Class Paper2D.TileMapBlueprintLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// Class GeometryCache.GeometryCache
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_4POO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_3DYH, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0060);
		}

		// Class GeometryCache.GeometryCacheActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0330);
		}

		// Class GeometryCache.GeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// Class GeometryCache.GeometryCacheCodecRaw
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_IX7C, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// Class GeometryCache.GeometryCacheCodecV1
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_UT0G, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// Class GeometryCache.GeometryCacheComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_LAZF, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_EAL9, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_Q69V, 0x05D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x05E0);
		}

		// Class GeometryCache.GeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_AE5I, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// Class GeometryCache.GeometryCacheTrack_FlipbookAnimation
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_5EB5, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// Class GeometryCache.GeometryCacheTrackStreamable
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_O189, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_ZQ6A, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x0188);
		}

		// Class GeometryCache.GeometryCacheTrack_TransformAnimation
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_ETHM, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// Class GeometryCache.GeometryCacheTrack_TransformGroupAnimation
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_PUO8, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// BlueprintGeneratedClass equipmentShopFurniture.equipmentShopFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__equipmentShopFurniture__equipmentShopFurniture_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShopFurniture_C, UnknownData_NB6A, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AequipmentShopFurniture_C, UberGraphFrame, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AequipmentShopFurniture_C, 0x03F8);
		}

		// BlueprintGeneratedClass SewageExitPeekPawn.SewageExitPeekPawn_C
		TEST_METHOD(BlueprintGeneratedClass__SewageExitPeekPawn__SewageExitPeekPawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, MSH_Cover_11, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, Camera, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, Rotator, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, tunnelExitTopWell, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, Arrow, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, DefaultSceneRoot, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, PlayerRef, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, ExitLadderRef, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, ready, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, UnknownData_NOMF, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, tempRot, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, SewageHUD, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, SpaceHeld, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, UnknownData_FSI4, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, ExitTime, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewageExitPeekPawn_C, BackBlocker, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASewageExitPeekPawn_C, 0x03E9);
		}

		// WidgetBlueprintGeneratedClass mainMenuWidget.mainMenuWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__mainMenuWidget__mainMenuWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, difficultyEnter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnCreditsHover, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnLoadHover, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, creditsGlitch2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, creditsGlitch, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, inCredits, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnExitHover, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnSettingsHover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnContinueHover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, entryAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnGrajHover, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, Black, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnCasual, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnCloseDiff, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnContinue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnCredits, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnExitGame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnGame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnHard, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnHardcore, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnLoadGame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnNormal, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnOpenCredits, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, btnOptions, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, buttonUnderline, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, creditsBg, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, creditsScroll, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, difficultyPanel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, inactiveButtonCover, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, logo, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, logoIntro01, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, logoIntro02, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, pasekBottom, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, pasekTop, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, txt_description, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, txtBtnCredits, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, txtDemo, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, txtDiffDesc, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, txtEngineInfo, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, parentPawn, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, settingsWidget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, menuPawn, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, playOverride, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, UnknownData_UFXY, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, loadingScreen, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, continueSlotID, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, officialVersion, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, UnknownData_XXSG, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, creditScrollOffset, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, creditScrollTempo, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, rollCredits, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, UnknownData_E5MI, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmainMenuWidget_C, saveObject, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmainMenuWidget_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass equipmentListWidget.equipmentListWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__equipmentListWidget__equipmentListWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, itemIcon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, selectionImage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, txtItemName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, txtQuantity, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, EqData, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, Quantity, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, UnknownData_23HI, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, activeElementsColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UequipmentListWidget_C, EqID, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UequipmentListWidget_C, 0x02C0);
		}

		// Class AIModule.AIAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_ML83, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// Class AIModule.AIBlueprintHelperLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// Class AIModule.AIController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_TN64, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_ANC2, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_KDZD, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0438);
		}

		// Class AIModule.AIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// Class AIModule.AIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_G51S, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// Class AIModule.AIDataProvider_Random
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_WCQY, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// Class AIModule.AIHotSpotManager
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// Class AIModule.AIPerceptionComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_DJP3, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_06IA, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x01C0);
		}

		// Class AIModule.AIPerceptionListenerInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// Class AIModule.AIPerceptionStimuliSourceComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_12H3, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x0108);
		}

		// Class AIModule.AIPerceptionSystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_ZT32, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_CPKA, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// Class AIModule.AIResourceInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// Class AIModule.AIResource_Movement
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// Class AIModule.AIResource_Logic
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// Class AIModule.AISense
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_AAQA, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_X74O, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_7XM7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0088);
		}

		// Class AIModule.AISense_Blueprint
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00B0);
		}

		// Class AIModule.AISense_Damage
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0098);
		}

		// Class AIModule.AISense_Hearing
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_R3HH, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00F0);
		}

		// Class AIModule.AISense_Prediction
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0098);
		}

		// Class AIModule.AISense_Sight
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_TYJ4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_9QAM, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_8A4Z, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0160);
		}

		// Class AIModule.AISense_Team
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0098);
		}

		// Class AIModule.AISense_Touch
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0098);
		}

		// Class AIModule.AISenseBlueprintListener
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x00E0);
		}

		// Class AIModule.AISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_ANBZ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// Class AIModule.AISenseConfig_Blueprint
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// Class AIModule.AISenseConfig_Damage
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// Class AIModule.AISenseConfig_Hearing
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_DN2J, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// Class AIModule.AISenseConfig_Prediction
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// Class AIModule.AISenseConfig_Sight
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_3I9J, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0068);
		}

		// Class AIModule.AISenseConfig_Team
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// Class AIModule.AISenseConfig_Touch
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// Class AIModule.AISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// Class AIModule.AISenseEvent_Damage
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// Class AIModule.AISenseEvent_Hearing
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// Class AIModule.AISightTargetInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// Class AIModule.AISystem
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_XMFT, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_K7WY, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// Class AIModule.AITask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// Class AIModule.AITask_LockLogic
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// Class AIModule.AITask_MoveTo
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_0KGM, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// Class AIModule.AITask_RunEQS
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_VZHU, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// Class AIModule.BehaviorTree
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_MPPE, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0060);
		}

		// Class AIModule.BrainComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_NX8O, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_ZI0G, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0150);
		}

		// Class AIModule.BehaviorTreeComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_BOCP, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_ICCQ, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x02A0);
		}

		// Class AIModule.BehaviorTreeManager
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_YJ8H, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// Class AIModule.BehaviorTreeTypes
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// Class AIModule.BlackboardComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_ADRR, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_7LA1, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01E8);
		}

		// Class AIModule.BlackboardData
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_0292, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// Class AIModule.BlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_BU9A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Bool
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Class
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Enum
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_VH49, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// Class AIModule.BlackboardKeyType_Float
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Int
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Name
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_NativeEnum
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// Class AIModule.BlackboardKeyType_Object
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Rotator
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_String
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// Class AIModule.BlackboardKeyType_Vector
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// Class AIModule.BTNode
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_T386, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_DHIR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// Class AIModule.BTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_3NCQ, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// Class AIModule.BTCompositeNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_UT21, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_E065, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// Class AIModule.BTComposite_Selector
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// Class AIModule.BTComposite_Sequence
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// Class AIModule.BTComposite_SimpleParallel
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_P8AJ, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// Class AIModule.BTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_IZBD, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_OMYK, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// Class AIModule.BTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// Class AIModule.BTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_4M0M, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// Class AIModule.BTDecorator_BlueprintBase
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_R46J, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_YG9P, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// Class AIModule.BTDecorator_CheckGameplayTagsOnActor
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_AD22, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// Class AIModule.BTDecorator_CompareBBEntries
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_2U96, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// Class AIModule.BTDecorator_ConditionalLoop
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// Class AIModule.BTDecorator_ConeCheck
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_DHX9, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_UY2G, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// Class AIModule.BTDecorator_Cooldown
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, cooldownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_GHPJ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// Class AIModule.BTDecorator_DoesPathExist
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_THGM, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_88QZ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// Class AIModule.BTDecorator_ForceSuccess
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// Class AIModule.BTDecorator_IsAtLocation
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_5VC3, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_60KA, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_FI9N, 0x00CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D0);
		}

		// Class AIModule.BTDecorator_IsBBEntryOfClass
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// Class AIModule.BTDecorator_KeepInCone
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_VIGN, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_DMLP, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// Class AIModule.BTDecorator_Loop
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_WN1T, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_AI6G, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// Class AIModule.BTDecorator_ReachedMoveGoal
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// Class AIModule.BTDecorator_SetTagCooldown
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_N5XR, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// Class AIModule.BTDecorator_TagCooldown
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_Z9GE, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// Class AIModule.BTDecorator_TimeLimit
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_R9DA, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// Class AIModule.BTFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// Class AIModule.BTService
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_C8PE, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// Class AIModule.BTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// Class AIModule.BTService_BlueprintBase
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_90NW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_0W1R, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// Class AIModule.BTService_DefaultFocus
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_9K1A, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// Class AIModule.BTService_RunEQS
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_NQR2, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// Class AIModule.BTTaskNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_IK0W, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// Class AIModule.BTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// Class AIModule.BTTask_BlueprintBase
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_ZS24, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_Z40E, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A0);
		}

		// Class AIModule.BTTask_FinishWithResult
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_VIZS, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// Class AIModule.BTTask_GameplayTaskBase
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_FHRX, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// Class AIModule.BTTask_MakeNoise
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_6PB1, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// Class AIModule.BTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_QYZ4, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_6IA7, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// Class AIModule.BTTask_MoveDirectlyToward
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_9W2R, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// Class AIModule.BTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// Class AIModule.BTTask_PlayAnimation
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_5SHF, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_DMBY, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// Class AIModule.BTTask_PlaySound
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// Class AIModule.BTTask_PushPawnAction
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// Class AIModule.BTTask_RotateToFaceBBEntry
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_VS0Q, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// Class AIModule.BTTask_RunBehavior
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// Class AIModule.BTTask_RunBehaviorDynamic
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// Class AIModule.BTTask_RunEQSQuery
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_W1AW, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_1FJI, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_2CJ5, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// Class AIModule.BTTask_SetTagCooldown
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_XJT5, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// Class AIModule.BTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// Class AIModule.BTTask_WaitBlackboardTime
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// Class AIModule.CrowdAgentInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// Class AIModule.PathFollowingComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_5N1D, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_DEL4, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_HU4E, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0298);
		}

		// Class AIModule.CrowdFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_H9OH, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_RWBV, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x02D8);
		}

		// Class AIModule.CrowdManager
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_DPAZ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// Class AIModule.DetourCrowdAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0438);
		}

		// Class AIModule.EnvQuery
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// Class AIModule.EnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// Class AIModule.EnvQueryContext_BlueprintBase
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_NJ7S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// Class AIModule.EnvQueryContext_Item
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// Class AIModule.EnvQueryContext_Querier
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// Class AIModule.EnvQueryDebugHelpers
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// Class AIModule.EnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_AP0A, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// Class AIModule.EnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_DKF7, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// Class AIModule.EnvQueryGenerator_ActorsOfClass
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00C0);
		}

		// Class AIModule.EnvQueryGenerator_BlueprintBase
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_KUB0, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// Class AIModule.EnvQueryGenerator_Composite
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_FPEP, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// Class AIModule.EnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// Class AIModule.EnvQueryGenerator_Cone
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_OR65, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0150);
		}

		// Class AIModule.EnvQueryGenerator_CurrentLocation
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// Class AIModule.EnvQueryGenerator_Donut
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_N4XI, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_FD4Y, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01A8);
		}

		// Class AIModule.EnvQueryGenerator_OnCircle
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_ALFF, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_JHOJ, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_RFIK, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_VPJL, 0x01E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x01E8);
		}

		// Class AIModule.EnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00E8);
		}

		// Class AIModule.EnvQueryGenerator_PathingGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0150);
		}

		// Class AIModule.EnvQueryInstanceBlueprintWrapper
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_6YJ4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_QVTQ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_D1GI, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// Class AIModule.EnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_UNJY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Actor
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Direction
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Point
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// Class AIModule.EnvQueryManager
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_B45O, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_BF52, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_VPSM, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0138);
		}

		// Class AIModule.EnvQueryOption
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// Class AIModule.EnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_3OUP, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_1WQV, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_MSZU, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_VYMP, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_UTLV, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_B8KD, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01C0);
		}

		// Class AIModule.EnvQueryTest_Distance
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_HJY8, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x01D0);
		}

		// Class AIModule.EnvQueryTest_Dot
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_U2RA, 0x0202);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0208);
		}

		// Class AIModule.EnvQueryTest_GameplayTags
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_EKRZ, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0230);
		}

		// Class AIModule.EnvQueryTest_Overlap
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x01E0);
		}

		// Class AIModule.EnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_ZO7V, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0238);
		}

		// Class AIModule.EnvQueryTest_PathfindingBatch
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x0268);
		}

		// Class AIModule.EnvQueryTest_Project
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x01F0);
		}

		// Class AIModule.EnvQueryTest_Random
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01C0);
		}

		// Class AIModule.EnvQueryTest_Trace
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x0288);
		}

		// Class AIModule.EnvQueryTypes
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// Class AIModule.EQSQueryResultSourceInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// Class AIModule.EQSRenderingComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_WF96, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0590);
		}

		// Class AIModule.EQSTestingPawn
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_SX40, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_1VIP, 0x0775);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_WUWC, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_GNOL, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x07D0);
		}

		// Class AIModule.GenericTeamAgentInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// Class AIModule.GridPathAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0438);
		}

		// Class AIModule.GridPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_HURG, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x02C8);
		}

		// Class AIModule.NavFilter_AIControllerDefault
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// Class AIModule.NavLinkProxy
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_I4AG, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_10VG, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0378);
		}

		// Class AIModule.NavLocalGridManager
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_H4HT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// Class AIModule.PathFollowingManager
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// Class AIModule.PawnAction
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_INSA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_H9DR, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// Class AIModule.PawnAction_BlueprintBase
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// Class AIModule.PawnAction_Move
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_0WVU, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// Class AIModule.PawnAction_Repeat
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_HGDV, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// Class AIModule.PawnAction_Sequence
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_3LPZ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_VOX1, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// Class AIModule.PawnAction_Wait
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_MC9X, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// Class AIModule.PawnActionsComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_C15A, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x0128);
		}

		// Class AIModule.PawnSensingComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_GHJB, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x0138);
		}

		// Class AIModule.VisualLoggerExtension
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// WidgetBlueprintGeneratedClass workStationUI.workStationUI_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__workStationUI__workStationUI_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, ringPop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, btnCloseManual, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, btnManChemistry, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, btnManEquipment, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, btnManFunctions, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, btnManModes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, desktopPanel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, eqDetailsPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, equipmentList, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, hoveredDescPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Image_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Image_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Image_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Image_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, Image_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, inventoryDrugList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, listManSwitcher, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, modeWidgetSwitcher, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, panelManual, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, tabDrugList, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, tabEquipmentList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, tabWorkStation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, technicalDetails, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, TextBlock_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, TextBlock_4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, TextBlock_33, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtBigHeading, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtCurCapacity, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtHoveredDescription, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtMaxCapacity, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtMaxWork, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtNoItems, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtPrecision, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtProcessLoss, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, txtTimeFinish, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workingPanel, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_5, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_6, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_7, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_8, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_9, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_10, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_11, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_12, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_13, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_14, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_15, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_16, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_17, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_18, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_19, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, workStationManualListWidget_C_1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, curDrugSelectedIndex, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, curEquipSelectedIndex, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, parentWorkStation, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, curSelectedDrugIndex, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, curSelectedDrugBackpack, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, UnknownData_9GOX, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, curSelectedEqIndex, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, UnknownData_2ZIN, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, tempText, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, tempTextColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, orderQuantityLast, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, UnknownData_Y0XJ, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, salesManager, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, manualOpen, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, UnknownData_VZVS, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationUI_C, activeElementsColor, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UworkStationUI_C, 0x0468);
		}

		// WidgetBlueprintGeneratedClass sleepWaitWidget.sleepWaitWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__sleepWaitWidget__sleepWaitWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, fadeCover, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, btnAddHour, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, btnAddMin, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, btnCancel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, btnSleep, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, btnSubHour, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, btnSubMin, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, cover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, TextBlock_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtBtnText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtCurTime, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtEndHour, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtSleeping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtTimeMultiplier, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtTitle, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, txtWaitTime, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, minToAdd, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, hoursToAdd, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, maxHours, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, UnknownData_4QAJ, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, dayTimeCon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, baseWaitMultiplier, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, couchWaitMultiplier, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, bedWaitMultiplier, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, endWaitMultiplier, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsleepWaitWidget_C, musicLoop, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsleepWaitWidget_C, 0x02C8);
		}

		// BlueprintGeneratedClass gasStationDoorBP.gasStationDoorBP_C
		TEST_METHOD(BlueprintGeneratedClass__gasStationDoorBP__gasStationDoorBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, doorAudio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, entryBox, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, gasStationDoorWing2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, gasStationDoorWing, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, gasStationDoorFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, openPercent_openPercentFloat_D71CAA3C4259A7C7B3058A9E9C544BF4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, openPercent__Direction_D71CAA3C4259A7C7B3058A9E9C544BF4, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, UnknownData_PP8Q, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, openPercent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, playerInRange, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, UnknownData_VXSC, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, timeAutoClose, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, autoCloseCounter, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, doorOpen, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgasStationDoorBP_C, doorActive, 0x0385);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgasStationDoorBP_C, 0x0386);
		}

		// BlueprintGeneratedClass deadDropSeeItLookTrigger.deadDropSeeItLookTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__deadDropSeeItLookTrigger__deadDropSeeItLookTrigger_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropSeeItLookTrigger_C, UnknownData_YUXY, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropSeeItLookTrigger_C, UberGraphFrame, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeadDropSeeItLookTrigger_C, 0x0360);
		}

		// BlueprintGeneratedClass drugStoreUnlocker.drugStoreUnlocker_C
		TEST_METHOD(BlueprintGeneratedClass__drugStoreUnlocker__drugStoreUnlocker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugStoreUnlocker_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugStoreUnlocker_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugStoreUnlocker_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdrugStoreUnlocker_C, 0x0340);
		}

		// BlueprintGeneratedClass settingsSave.settingsSave_C
		TEST_METHOD(BlueprintGeneratedClass__settingsSave__settingsSave_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, savedResolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, savedShadows, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, savedDetails, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, savedTextures, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, savedEffects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, aaMethod, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, aaQuality, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, postProcess, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, motionBlur, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, vSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, audioMusic, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, audioEffects, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, audioDial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, showSubtitles, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, UnknownData_LSLN, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, lang, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, InvertMouse, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, UnknownData_482B, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, savedFOV, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, mouseSensitivity, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, mouseSenseNew, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, displayMode, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, disableNightMusic, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, audioEnableBinaural, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, UnknownData_BCHI, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsSave_C, activeElementsColor, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsettingsSave_C, 0x0138);
		}

		// BlueprintGeneratedClass moneyLaunderDialogue.moneyLaunderDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__moneyLaunderDialogue__moneyLaunderDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmoneyLaunderDialogue_C, UnknownData_B0XD, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmoneyLaunderDialogue_C, UberGraphFrame, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmoneyLaunderDialogue_C, 0x03A0);
		}

		// BlueprintGeneratedClass testDrugWorkStation.testDrugWorkStation_C
		TEST_METHOD(BlueprintGeneratedClass__testDrugWorkStation__testDrugWorkStation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtestDrugWorkStation_C, UnknownData_9N2B, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtestDrugWorkStation_C, ActivateTaskID, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtestDrugWorkStation_C, 0x04CC);
		}

		// BlueprintGeneratedClass moneyPickup.moneyPickup_C
		TEST_METHOD(BlueprintGeneratedClass__moneyPickup__moneyPickup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmoneyPickup_C, UberGraphFrame, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmoneyPickup_C, 0x05B0);
		}

		// BlueprintGeneratedClass garbageBrokenBottle.garbageBrokenBottle_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBrokenBottle__garbageBrokenBottle_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBrokenBottle_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageBucket.garbageBucket_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBucket__garbageBucket_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBucket_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageCloth.garbageCloth_C
		TEST_METHOD(BlueprintGeneratedClass__garbageCloth__garbageCloth_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageCloth_C, 0x05A8);
		}

		// WidgetBlueprintGeneratedClass dialogueResponseWidget.dialogueResponseWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__dialogueResponseWidget__dialogueResponseWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, btnResponse, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, txtResponseText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, parentWidget, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, returnID, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, UnknownData_Y1OR, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdialogueResponseWidget_C, responseData, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdialogueResponseWidget_C, 0x0268);
		}

		// BlueprintGeneratedClass doorsExtMetal01.doorsExtMetal01_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtMetal01__doorsExtMetal01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtMetal01_C, UnknownData_68V7, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtMetal01_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtMetal01_C, 0x0538);
		}

		// BlueprintGeneratedClass doorsExtWood01_PlayerAppartment.doorsExtWood01_PlayerAppartment_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood01_PlayerAppartment__doorsExtWood01_PlayerAppartment_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtWood01_PlayerAppartment_C, UnknownData_KOK0, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtWood01_PlayerAppartment_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood01_PlayerAppartment_C, 0x0538);
		}

		// BlueprintGeneratedClass mainMenuPawn.mainMenuPawn_C
		TEST_METHOD(BlueprintGeneratedClass__mainMenuPawn__mainMenuPawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, muzykaIntro, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, muzyka, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, Camera, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, DefaultSceneRoot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, museicFade_Volume_4FE004F34243DD33E754DA87B9F2928E, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, museicFade__Direction_4FE004F34243DD33E754DA87B9F2928E, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, UnknownData_30ZP, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, museicFade, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, CamZoomLoop_FOV_03686C504DA619056831A7B906A053CD, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, CamZoomLoop__Direction_03686C504DA619056831A7B906A053CD, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, UnknownData_Z80C, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, CamZoomLoop, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, zoomIn_FOV_4655152047B46DE5E88749B9B3D60DF4, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, zoomIn__Direction_4655152047B46DE5E88749B9B3D60DF4, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, UnknownData_G5SN, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, zoomIn, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, mainMenuUI, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, camXoffset, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, camYoffset, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmainMenuPawn_C, MenuMusicTransitionTime, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmainMenuPawn_C, 0x03F4);
		}

		// BlueprintGeneratedClass sitDownPlace.sitDownPlace_C
		TEST_METHOD(BlueprintGeneratedClass__sitDownPlace__sitDownPlace_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, Arrow, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, Box, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, Player, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, camBlendTime, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, UnknownData_6QVI, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, sitDownPawn, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitDownPlace_C, PawnClass, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsitDownPlace_C, 0x0460);
		}

		// BlueprintGeneratedClass hodeoutTunnelEntrance.hodeoutTunnelEntrance_C
		TEST_METHOD(BlueprintGeneratedClass__hodeoutTunnelEntrance__hodeoutTunnelEntrance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AhodeoutTunnelEntrance_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhodeoutTunnelEntrance_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhodeoutTunnelEntrance_C, EntranceIndex, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhodeoutTunnelEntrance_C, 0x043C);
		}

		// BlueprintGeneratedClass weedMoneyTable.weedMoneyTable_C
		TEST_METHOD(BlueprintGeneratedClass__weedMoneyTable__weedMoneyTable_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedMoneyTable_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedMoneyTable_C, safeRef, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedMoneyTable_C, gangManager, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedMoneyTable_C, tableOccupied, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedMoneyTable_C, UnknownData_8G74, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedMoneyTable_C, PlayerRef, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedMoneyTable_C, 0x0450);
		}

		// BlueprintGeneratedClass additiveBakingSoda250.additiveBakingSoda250_C
		TEST_METHOD(BlueprintGeneratedClass__additiveBakingSoda250__additiveBakingSoda250_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AadditiveBakingSoda250_C, 0x05B0);
		}

		// BlueprintGeneratedClass BP_AS_Piperydyna.BP_AS_Piperydyna_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Piperydyna__BP_AS_Piperydyna_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Piperydyna_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Piperydyna_C, 0x03F0);
		}

		// WidgetBlueprintGeneratedClass containerListWidget.containerListWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__containerListWidget__containerListWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, bg, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, btnQuanCancel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, btnQuanOK, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, containerBg, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, containerList, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, contentSizer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, ddWarning, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, green, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, gridBg, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, listSizer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, quantityDialogue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, quantitySlider, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, txtDropDrugs, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, txtDropQuantity, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, txtMoneyMultiplier, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, wrapList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, Player, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, container, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, seller, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, declineSale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, UnknownData_3X5T, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, tradedItems, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, tradedItemIDs, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, TradedItemsMixProportions, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, tradedItemsAmounts, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, tradedItemQuantities, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, tradedItemPrices, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, tradedItemSource, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, vendorSlot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, UnknownData_W1RR, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, newDropOperation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, quantitySliderMax, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, quantitySliderSet, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, selfSourceString, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, clientSlot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, UnknownData_V9JQ, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, ListWidth, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, ListHeight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcontainerListWidget_C, ListMaxHeightScroll, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcontainerListWidget_C, 0x0368);
		}

		// BlueprintGeneratedClass infiniteSpawnPoint.infiniteSpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__infiniteSpawnPoint__infiniteSpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AinfiniteSpawnPoint_C, Billboard, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AinfiniteSpawnPoint_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AinfiniteSpawnPoint_C, 0x0338);
		}

		// BlueprintGeneratedClass statisticsManager.statisticsManager_C
		TEST_METHOD(BlueprintGeneratedClass__statisticsManager__statisticsManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, playerLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, playerExp, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, levelExpFirstLevel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, levelExpRaiseRatio, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, riskFactorMin, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, riskFactorMax, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, riskFactorLevel, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, riskFactorDropRatePS, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, expoFactorMin, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, expoFactorMax, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, expoFactorLevel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, expoFactorDropRatePS, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, reputationFactorRange, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, reputationFactorLevel, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumSales, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumDistribution, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumClientsTotal, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumClientsReturning, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumDealers, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumCaught, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumChased, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumClientsLost, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumClientOD, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, statNumRaids, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, firstLaunch, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, UnknownData_LR60, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, expoLevelDEA_start, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, deaObservationInterval, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, deaObservationCountdown, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, orderLimitRisePerLevel, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, playerSkillPoints, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, playerSkillPointsPerLevel, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillGeneralLevelMax, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelMax, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelLockpick, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelPockets, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelStamina, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelRunner, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelStealth, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelIllusionist, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelSalesman, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, skillLevelQuickLearner, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, UnknownData_N0TE, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, expDisplayQueue, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, reputationZeroingPS, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, hardcoreMode, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, UnknownData_R680, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, displayWarningsTimer, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, displayWarningsTimeout, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, displayWarningTimer2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, deaChanceMultiplier, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoSalesDay, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoSalesAmount, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoSalesNight, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, dayTimeCon, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoEventsDay, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoEventName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoEventNight, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoEventDatabase, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstatisticsManager_C, ExpoFactorMultiplier, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstatisticsManager_C, 0x048C);
		}

		// BlueprintGeneratedClass saleClientMaleBP.saleClientMaleBP_C
		TEST_METHOD(BlueprintGeneratedClass__saleClientMaleBP__saleClientMaleBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleClientMaleBP_C, UnknownData_D5L3, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleClientMaleBP_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsaleClientMaleBP_C, 0x0AE0);
		}

		// WidgetBlueprintGeneratedClass saleAreaManageMarker.saleAreaManageMarker_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__saleAreaManageMarker__saleAreaManageMarker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, unlockPop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, popUp, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, alertIcon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, arrows, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, btnUnlockArea, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, hoverImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, lockIcon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, progressBarBorder, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, respectProgress, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, txtAreaNam, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, areaStringID, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, areaImageID, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, UnknownData_WIPN, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, activeImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, inactiveImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, parentWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, AreaAvailable, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, AreaUnlocked, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, UnknownData_AQG9, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, saleAreaManager, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, requirementsMet, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, UnknownData_WUTU, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManageMarker_C, AreaMeta, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsaleAreaManageMarker_C, 0x0308);
		}

		// BlueprintGeneratedClass spraySpawner.spraySpawner_C
		TEST_METHOD(BlueprintGeneratedClass__spraySpawner__spraySpawner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawner_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawner_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawner_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawner_C, spawnTimer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawner_C, SpawnTimeout, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AspraySpawner_C, maxSpraysOnMap, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AspraySpawner_C, 0x034C);
		}

		// BlueprintGeneratedClass sitingDownPawn.sitingDownPawn_C
		TEST_METHOD(BlueprintGeneratedClass__sitingDownPawn__sitingDownPawn_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, Camera, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, DefaultSceneRoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, IsActive, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, UnknownData_5K8M, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, sitDownPlaceRef, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, canStandUp, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, UnknownData_VVPI, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, overrideHitAmount, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, talkerRef, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, choiceIsUp, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, UnknownData_A72E, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, curChoiceWidget, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, tempYawMin, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, tempPitchMin, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, tempYawMax, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, tempPitchMax, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsitingDownPawn_C, ForceFinishPossible, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsitingDownPawn_C, 0x03E1);
		}

		// AnimBlueprintGeneratedClass eddieFirstDialAnimBP.eddieFirstDialAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__eddieFirstDialAnimBP__eddieFirstDialAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_Root_13A04E634A67E838A1F7D28195C19AF8, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_160311654DB3696B90E24B87EDEB9D03, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_D4013602424847F8EF6EDD83CC4E3F04, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_3402076B493D33EB3041BB91FAE2F9A7, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_E8E1E7684FE66D1AD4ECC8977ED6E1CE, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_E735E70A4780A67C94163DA097A6D2DD, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_89BB018D4002354525AB60A49A224519, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_0842A0324B8F232E5958D29EC7734D39, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_224DF7B24D921F9E4EF81E96C1F057D8, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_TransitionResult_E74FE54F417F6C14BA1B9BACE83B51D1, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_EB17AA5E4D1FC08017605CBE1C2CA960, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_6776DBFF4315E16CBBC010BDCC099263, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_ECBFA42F4FABCB0973FDF89ECD492FCF, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_55A008574E2A3984A3C68D8A6440C216, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_56551BA94598D8A71F6778ABF0CC1C2A, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_F43F84DE4B3A86B380D89885A0E70ABA, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_F33C5FD1428059A704484F8549D2D8FE, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_328ABEBF43CBA1DBD5F57BB32A71A19E, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_662095534E8C6427549B5BBA67E3D01E, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_DABF53274462A9D09DEDDA914F04AB95, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_045DDFED4C0175481E6B62A9E7C111C4, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_228A9C2D462199D330BCD7BBF3610BBB, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_SequencePlayer_10D4B07E48D9F387F396DF8949155CF8, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateResult_797FCE20408536AE9B1B70A29D0935D3, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, AnimGraphNode_StateMachine_CCFB541B489D6B92A3853B8928837265, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, giveJoint, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, afterJoint, 0x0D31);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, tellStory, 0x0D32);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, briefing, 0x0D33);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeddieFirstDialAnimBP_C, Finish, 0x0D34);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UeddieFirstDialAnimBP_C, 0x0D35);
		}

		// WidgetBlueprintGeneratedClass deaRaidCounterWidget.deaRaidCounterWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__deaRaidCounterWidget__deaRaidCounterWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaRaidCounterWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaRaidCounterWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaRaidCounterWidget_C, pulse, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeaRaidCounterWidget_C, txtCountdown, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdeaRaidCounterWidget_C, 0x0228);
		}

		// Class ArchVisCharacter.ArchVisCharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x079C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x07A0);
		}

		// Class ArchVisCharacter.ArchVisCharMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_RFQP, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0770);
		}

		// Class AudioCapture.AudioCaptureComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_ZN9S, 0x05C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0670);
		}

		// BlueprintGeneratedClass InventoryComponent.InventoryComponent_C
		TEST_METHOD(BlueprintGeneratedClass__InventoryComponent__InventoryComponent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemNames, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, itemQuantities, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemCurAmount, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemLocalGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemHeldInGuids, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemPocketIndex, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemSearchProgress, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemVendorFlag, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemMixProportions, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ItemCustomTagName, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ContainerWidth, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ContainerHeight, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, pocketCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, SkipDebug, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, UnknownData_1PYI, 0x01A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, CurBackpackID, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, InventoryStateChanged, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, BackpackChanged, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, CurBackpackVendor, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, UnknownData_MJK6, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, LootPool, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, ValuableMap, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComponent_C, RamaVars, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryComponent_C, 0x0240);
		}

		// BlueprintGeneratedClass decoOldschoolFloorLamp1.decoOldschoolFloorLamp1_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolFloorLamp1__decoOldschoolFloorLamp1_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolFloorLamp1_C, UnknownData_5MAB, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolFloorLamp1_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoOldschoolFloorLamp1_C, PointLight, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolFloorLamp1_C, 0x0458);
		}

		// BlueprintGeneratedClass BP_decoDeskLamp1.BP_decoDeskLamp1_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoDeskLamp1__BP_decoDeskLamp1_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp1_C, UnknownData_DBH8, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp1_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp1_C, SpotLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp1_C, DynLightMat, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp1_C, DynGlassMat, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoDeskLamp1_C, 0x0468);
		}

		// BlueprintGeneratedClass pickupItemBase.pickupItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__pickupItemBase__pickupItemBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, RamaSave_1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, pickupSound, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, Data, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, Quantity, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, dropedByPlayer, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, DespawnOutRadius, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, ToggleDistancePhysics, 0x054E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, UnknownData_1XSG, 0x054F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, PlayerRef, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, AmountOverride, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, MemAmount, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, memQuantity, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, UnknownData_5I06, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApickupItemBase_C, MemMixProportions, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApickupItemBase_C, 0x05A8);
		}

		// BlueprintGeneratedClass dd_wallVentSmall.dd_wallVentSmall_C
		TEST_METHOD(BlueprintGeneratedClass__dd_wallVentSmall__dd_wallVentSmall_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_wallVentSmall_C, UberGraphFrame, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_wallVentSmall_C, StaticMesh, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_wallVentSmall_C, firstDeadDrop, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Add_wallVentSmall_C, 0x0529);
		}

		// BlueprintGeneratedClass weedPlantBP.weedPlantBP_C
		TEST_METHOD(BlueprintGeneratedClass__weedPlantBP__weedPlantBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, weedSphere, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, playerSphere, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, Widget, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, plantModel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, distanceSphere, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, RamaSave, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, Box, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, Arrow, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, Billboard, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, strainName, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, indoor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UnknownData_W06C, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, hydration, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, hydrationAdd, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, hydrationMax, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, fertiliserLevel, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, fertiliserOptimal, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, outdoorModels, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, indoorModels, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, growthTimeTotal, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, growthTimeGrowing, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, growthPercent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, growthUpdateInterval, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, plantScale, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, randZRot, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, initialSetup, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UnknownData_RJSW, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, plantOptionNames, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, plantOptionStrings, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, detailWidget, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, plantHealth, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, plantHealthMax, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, healthDropRate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, isDead, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, IsReady, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UnknownData_X3G8, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, hydrationDropRate, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, hydrationPerUnit, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, waterFoundInventory, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, harvestTaken, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UnknownData_N6AQ, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, endHarvest, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, maxHarvest, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, endHumidity, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, comprimiseDistanceFalloff, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, lightingPercent, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, generalVisibility, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, harvestPercentClamp, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, compromiseTimerRunning, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UnknownData_8PWA, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, strainMaterial, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, curPlantModels, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, rainActorRef, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, rainMaxHydration, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, curSunStrengthMultiplier, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, sunVitalityDropRate, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, UnknownData_M9W4, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, OutMixNames, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedPlantBP_C, OutMixProportions, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedPlantBP_C, 0x05A0);
		}

		// BlueprintGeneratedClass decoOldschoolSofa.decoOldschoolSofa_C
		TEST_METHOD(BlueprintGeneratedClass__decoOldschoolSofa__decoOldschoolSofa_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoOldschoolSofa_C, 0x0446);
		}

		// BlueprintGeneratedClass labFluidMixerBase.labFluidMixerBase_C
		TEST_METHOD(BlueprintGeneratedClass__labFluidMixerBase__labFluidMixerBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlabFluidMixerBase_C, UnknownData_CVC0, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlabFluidMixerBase_C, UberGraphFrame, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlabFluidMixerBase_C, 0x0848);
		}

		// BlueprintGeneratedClass playerCharacterBP.playerCharacterBP_C
		TEST_METHOD(BlueprintGeneratedClass__playerCharacterBP__playerCharacterBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, InventoryComponent, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, PlayerOnlyOV, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, jumpCue, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, halucinogenicPostProcess, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, speedPostProcess, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Camera, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, headBobbing, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, BackpackThrow, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, footstepCue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Capsule, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, confusionPostProcess, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, fpsArms, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, throwpoint, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, tiredBreath, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, tempChaseMusic, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, RamaSave, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Box, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, headBobbTimeline_headRot_0B3856664923141D33A5748806EFB4A2, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, headBobbTimeline_headHorizontal_0B3856664923141D33A5748806EFB4A2, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, headBobbTimeline_headVertical_0B3856664923141D33A5748806EFB4A2, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, headBobbTimeline__Direction_0B3856664923141D33A5748806EFB4A2, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_KVZX, 0x07DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, headBobbTimeline, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_1_camPosition_8AF157FC468A6C10DB76DB9E5A5C3C8E, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_1_tasedCamAngle_8AF157FC468A6C10DB76DB9E5A5C3C8E, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_1__Direction_8AF157FC468A6C10DB76DB9E5A5C3C8E, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_DMZB, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_2, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_0_NewTrack_0_7E1CEE2A42645FECC9C5EB9DFDAB29AE, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_0__Direction_7E1CEE2A42645FECC9C5EB9DFDAB29AE, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_WQ4U, 0x0805);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, Timeline_1, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, taserCamera_camPosition_1E3703BE4EA579145BB8AFAC90459750, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, taserCamera_tasedCamAngle_1E3703BE4EA579145BB8AFAC90459750, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, taserCamera__Direction_1E3703BE4EA579145BB8AFAC90459750, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_RCSU, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, taserCamera, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camFovDialogue_NewTrack_0_0700855641B2F73B563760B1CCB2AEDF, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camFovDialogue__Direction_0700855641B2F73B563760B1CCB2AEDF, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_3B5D, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camFovDialogue, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, CrouchAnim_capsuleHeight_AAFA20F046516DB596355B8B50B2A4C4, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, CrouchAnim__Direction_AAFA20F046516DB596355B8B50B2A4C4, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_YORE, 0x083D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, CrouchAnim, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackMoveMultiplier, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, movementSpeedMultiplier, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, moveSpeedSpecialMultiplier, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, mouseSpeed, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, IsCrouching, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, sneakMode, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_INZ6, 0x085A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, HUD, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hoveredObject, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hoveredObjectMem, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hoveredObstacle, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaMax, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaLevel, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaLow, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, obstacleStaminaDrain, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaDrainPS, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaRegainPS, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, leanRoll, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, leanRollMax, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, leanVertical, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camLeanMax, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, LeanSideways, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaRegainMultiplier, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inventoryFirstTap, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, phoneUp, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inventoryOpen, 0x08B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_0LAM, 0x08B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, InventoryWidget, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, disableWorldInteraction, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_LVBH, 0x08C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pauseMenu, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, dayTimeControler, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, sleepWaitWidget, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curBed, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, waiting, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_LFVC, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketItems, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketItemVendor, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketItemQuantity, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketItemVendorPrice, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketMaxSize, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketMaxWeight, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, pocketCount, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hasBackpack, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_CE2S, 0x093D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpack, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackItems, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackItemQuantity, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackItemVendor, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackItemVendorPrice, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackItemContents, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curBackpackSize, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curBackpackWeight, 0x0ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackMaxSize, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackMaxWeight, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curContainer, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, contactsManager, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, phoneRef, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, questManagerRef, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, callIncoming, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_66H9, 0x0B09);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inventoryKeys, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curHighlightedOption, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, actionOptionsOpen, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_F6KG, 0x0B25);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, ActionList, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, isLockpicking, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_B265, 0x0B39);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, lockpickWidget, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, doorBreachDamage, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, saveScreenOpen, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_1VYQ, 0x0B4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, saveLoadWidget, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, computerOpen, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_AHPZ, 0x0B59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, lineCheckDistance, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, suspicionMultiplier, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, baseMaxWalkSpeed, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, visibilityMultiplier, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, lightVisMultiplier, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hasIllegalItems, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_WAVS, 0x0B71);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, lightsAffecting, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, lightAffectMultipliers, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hideAreaMultiplier, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inWaitArea, 0x0B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_7OAH, 0x0B9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curDialogueInstance, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inDialogue, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_55HL, 0x0BA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, dialogueWidget, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curFocusNPC, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, focusLookRotation, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, focusCamera, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_SURD, 0x0BCD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curSeller, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, isTrading, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camLeanClampRight, 0x0BD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camLeanClampLeft, 0x0BDA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_OZG9, 0x0BDB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, moneyBaseData, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, handlingATM, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, waitingForWithdraw, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_5NKI, 0x0CEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curATM, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, newMessages, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, newCalls, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, newNotifications, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hasDrugs, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_XXRN, 0x0D05);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, runVelocityValue, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chasingPolicemen, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, isFugitive, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_NMJS, 0x0D11);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, fugitiveTimeout, 0x0D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, fugitiveCounter, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, isControled, 0x0D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, beenCaught, 0x0D1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_LTYV, 0x0D1E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, caughtLoadingScreen, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, isSearched, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, jumpingObstacle, 0x0D29);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, logedInBank, 0x0D2A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, blockingCar, 0x0D2B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_2ECC, 0x0D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, illegalFoundPockets, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, illegalFoundBackpack, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chaseMusicCue, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, closestPatrolDistance, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, patrolDistanceTemp, 0x0D5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, patrolDistanceStartStress, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, isChased, 0x0D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_MMVW, 0x0D65);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, streetTeleport, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chasingPolicemenRef, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, atWorkStation, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_DV03, 0x0D81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curWorkStation, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curAppartment, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, keyOverride, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, dragObject, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, popupUp, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, MapOpen, 0x0DB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_J43E, 0x0DBA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, mapWidget, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, nightTimeAlertOn, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_N3HQ, 0x0DC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, allEarnedMoney, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inAppartmentMode, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_3HFF, 0x0DD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, memHitLocation, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hitPhysMat, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, leanAxisVal, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, baseLineCheckDistance, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, appartmentModeLineCheckDistance, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_4CZC, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curAppartmentObjectGizmo, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, appModeWidget, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, memHitNormal, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_MBO1, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, appModeHovered, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, policeHoursCounter, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, musicStressLowClamp, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, musicStressLowClampMinimum, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, musicStressLowClampInitial, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, fadeParameter, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, musicChased, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_DD97, 0x0E39);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, stressFade, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, workStationAvailable, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, appartmentModeAvailable, 0x0E41);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, sleepingWaitingAvailable, 0x0E42);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_X6JL, 0x0E43);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chaseMusicVersions, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chaseMusicIntro, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chaseMusicTempo, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chosenSongID, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_H26B, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chaseMusicIntroLength, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, musicMinChaseLength, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, musicMinChaseTimer, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inventoryFirstOpening, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_MX7N, 0x0E99);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, chaseMusicManager, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, equipmentShopOpen, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, bankIntroduced, 0x0EA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, sleepDialogue, 0x0EAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_16HD, 0x0EAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, defPostProcess, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, mouseAxisPitch, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, mouseAxisYaw, 0x1394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, inWater, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaTired, 0x1399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, handsOccupied, 0x139A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_9431, 0x139B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, handsBackpackRef, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, handsOccupiedMessage, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, sprayGizmo, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackFromVendor, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_GQYT, 0x13C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, backpackSlotVendorPrice, 0x13CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hasSprayPaint, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, disableWalking, 0x13D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_YRL8, 0x13D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, basePocketCount, 0x13D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillStaminaMultiplier, 0x13D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillRunSpeedMultiplier, 0x13DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillLockpickLevel, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillStealthMultiplier, 0x13E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillIllusionistChance, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillSalesPriceMultiplier, 0x13EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, skillSalesOrderSpeedMultiplier, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, staminaMaxBase, 0x13F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_OEVM, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, teleportLocation, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drainingStamina, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, draggedObject, 0x1431);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_SUHY, 0x1432);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, lastPoliceCheckCountdown, 0x1434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, sprayingAvailable, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_XHT7, 0x1439);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, quickUseSlots, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, quickUseIndex, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, quickUseGuids, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, quickUseData, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, controlAlarmWidget, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, initialised, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, disableDemoFunctions, 0x1489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_ZDJA, 0x148A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedData, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedTimeout, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedQuantity, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedAvSpeedMultiplier, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedAvStaminaMultiplier, 0x14C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedAvTimeMultiplier, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedAvFovMultiplier, 0x14CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedAvConfMultiplier, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, blockPause, 0x14D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_HXVA, 0x14D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, duaSpeedTarget, 0x14D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, duaStaminaTarget, 0x14DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, duaTimeTarget, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, duaFovTarget, 0x14E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, duaConfTarget, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, BaseFOV, 0x14EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, passOutScreen, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugUseTimeout, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, ballenaProtection, 0x14FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_71U0, 0x14FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, curComputerRef, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, mouseSensitivity, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, InvertMouse, 0x150C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_XCZQ, 0x150D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, DefaultFOV, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_68FR, 0x1514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, mgValid, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hasOutdoorSeeds, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, hasIndoorSeeds, 0x1529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_MDY7, 0x152A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, weedGizmo, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, weedSeedWidget, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, canJumpObstacles, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_1GBC, 0x1541);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camBobbMultiplier, 0x1544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, bobbZ, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, bobbY, 0x154C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, bobbRoll, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, flashlightBlocker, 0x1554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, tabHeld, 0x1555);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_8456, 0x1556);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugStringMap, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, blockRefreshQuickUse, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, blockQuickUse, 0x15A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_G4G6, 0x15AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedBoostMultiplier, 0x15AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, drugsUsedHalucinationMultiplier, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UpgradePriceTemp, 0x15B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, camFocusFovMultiplier, 0x15B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, underground, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, LastWallPassageType, 0x15BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_6R4P, 0x15BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, CurVilla, 0x15BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, SprintHeldDown, 0x15C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_OQQW, 0x15C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, FallDamageHealth, 0x15CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, FallDmgRegenSpeed, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, UnknownData_IDQ9, 0x15D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplayerCharacterBP_C, FullLoadInitiated, 0x15D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AplayerCharacterBP_C, 0x15E8);
		}

		// BlueprintGeneratedClass streetPersonFemale12BP.streetPersonFemale12BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale12BP__streetPersonFemale12BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale12BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass stream_stink_Yard01.stream_stink_Yard01_C
		TEST_METHOD(BlueprintGeneratedClass__stream_stink_Yard01__stream_stink_Yard01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_stink_Yard01_C, 0x0330);
		}

		// BlueprintGeneratedClass deaSuvBP.deaSuvBP_C
		TEST_METHOD(BlueprintGeneratedClass__deaSuvBP__deaSuvBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaSuvBP_C, Box, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaSuvBP_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaSuvBP_C, Car_SUV, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaSuvBP_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeaSuvBP_C, 0x0348);
		}

		// BlueprintGeneratedClass Factory_01_02.Factory_01_02_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_01_02__Factory_01_02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh41, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh40, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh39, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh38, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh37, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh36, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh35, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh34, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh33, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh32, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh31, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh30, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh29, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh28, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh27, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh26, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh25, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh24, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh23, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh22, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh21, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh20, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh19, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh18, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh17, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh16, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh15, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh14, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh13, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh12, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh11, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh10, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh9, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh8, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh7, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh6, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh5, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh4, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh3, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_02_C, StaticMesh, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_01_02_C, 0x0480);
		}

		// BlueprintGeneratedClass Factory_02_03.Factory_02_03_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_02_03__Factory_02_03_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh23, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh22, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh21, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh20, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh19, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh18, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh17, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh16, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh15, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh14, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh13, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, ParticleSystem, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh12, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh11, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh10, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh9, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh8, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh7, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh6, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh4, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh3, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh1, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_02_03_C, StaticMesh, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_02_03_C, 0x03F8);
		}

		// BlueprintGeneratedClass FactoryIndoor_01_04.FactoryIndoor_01_04_C
		TEST_METHOD(BlueprintGeneratedClass__FactoryIndoor_01_04__FactoryIndoor_01_04_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent075, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent074, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent073, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent072, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent071, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent070, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent069, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent068, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent067, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent066, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent065, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent064, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent063, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent062, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent061, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent060, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent059, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent058, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent057, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent056, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent055, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent054, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent053, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent052, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent051, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent050, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent049, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent048, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent047, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent046, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent045, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent044, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent043, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent042, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent041, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent040, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent039, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent038, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent037, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent036, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent035, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent034, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent033, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent032, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent031, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent030, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent029, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent028, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent027, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent026, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent025, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent024, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent023, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent022, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent021, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent020, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent019, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent018, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent017, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent016, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent015, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent014, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent013, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent012, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent011, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent010, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent09, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent08, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent07, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent06, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent05, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent04, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent03, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent02, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent01, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, StaticMeshComponent0, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_01_04_C, SharedRoot, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactoryIndoor_01_04_C, 0x0590);
		}

		// BlueprintGeneratedClass WoodenBulletinDoubleLarge_BP.WoodenBulletinDoubleLarge_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodenBulletinDoubleLarge_BP__WoodenBulletinDoubleLarge_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillB5, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillB4, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillB3, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillB2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillB1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillA5, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillA4, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillA3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillA2, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FillA1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightB5, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightB4, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightB3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightB2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightB1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightA5, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightA4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightA3, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightA2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LightA1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LampB, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, LampA, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, Billboard, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, DefaultSceneRoot, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, AddLamps, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, TurnOnLights, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, UnknownData_YIFT, 0x03EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FaceMaterial1, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleLarge_BP_C, FaceMaterial2, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodenBulletinDoubleLarge_BP_C, 0x0400);
		}

		// BlueprintGeneratedClass doorsExtWood04.doorsExtWood04_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood04__doorsExtWood04_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood04_C, 0x052A);
		}

		// BlueprintGeneratedClass SectorCWicket.SectorCWicket_C
		TEST_METHOD(BlueprintGeneratedClass__SectorCWicket__SectorCWicket_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorCWicket_C, UberGraphFrame, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorCWicket_C, Box, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASectorCWicket_C, GuardRef, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASectorCWicket_C, 0x0550);
		}

		// BlueprintGeneratedClass weedDeskBlocker.weedDeskBlocker_C
		TEST_METHOD(BlueprintGeneratedClass__weedDeskBlocker__weedDeskBlocker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDeskBlocker_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDeskBlocker_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDeskBlocker_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedDeskBlocker_C, gangManRef, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedDeskBlocker_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass ArrestScreenWidget.ArrestScreenWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ArrestScreenWidget__ArrestScreenWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, ArrestList, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, btnClose, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, Image_3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, SizeBox_32, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, txtBankMoney, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, salesManager, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, Dealers, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, BAILAMT, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrestScreenWidget_C, ParentShady, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrestScreenWidget_C, 0x0258);
		}

		// BlueprintGeneratedClass HighwayBulletinAngledSm_BP.HighwayBulletinAngledSm_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HighwayBulletinAngledSm_BP__HighwayBulletinAngledSm_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, BillboardPanel2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, BillboardPanel1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, BillboardLamps2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, BillboardLamps1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, Catwalks, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, BillboardPower, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, Frame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, PostShort, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, DefaultSceneRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, OffsetCenterPost, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, ExtraTall, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, LightsOn, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, UnknownData_5KGB, 0x0373);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, FaceMaterial1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHighwayBulletinAngledSm_BP_C, FaceMaterial2, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHighwayBulletinAngledSm_BP_C, 0x0388);
		}

		// BlueprintGeneratedClass PoliceBlockadeArea.PoliceBlockadeArea_C
		TEST_METHOD(BlueprintGeneratedClass__PoliceBlockadeArea__PoliceBlockadeArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, Cube, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, Policeman02, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, Policeman01, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, Box, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, policeCar, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, Extent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, spamTimout, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, SpamTimer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, hasBlockade, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, UnknownData_NPRE, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, BlockadeLife, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoliceBlockadeArea_C, CheckpointID, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APoliceBlockadeArea_C, 0x0380);
		}

		// BlueprintGeneratedClass lightningEffectActor.lightningEffectActor_C
		TEST_METHOD(BlueprintGeneratedClass__lightningEffectActor__lightningEffectActor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, DirectionalLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, lightningLight_Intensity_16C2E29744EF974AD9DD15A80BF76C4E, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, lightningLight__Direction_16C2E29744EF974AD9DD15A80BF76C4E, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, UnknownData_88XE, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, lightningLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, baseIntensity, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, stormIntensity, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, thunderMinDelay, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, thunderMaxDelay, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AlightningEffectActor_C, thunderDistanceRatio, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlightningEffectActor_C, 0x0364);
		}

		// BlueprintGeneratedClass BTTask_Bird_GetRandomPoint.BTTask_Bird_GetRandomPoint_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_GetRandomPoint__BTTask_Bird_GetRandomPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_GetRandomPoint_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_GetRandomPoint_C, RandomPointNearMyLocation, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_GetRandomPoint_C, 0x00D0);
		}

		// WidgetBlueprintGeneratedClass virusUploadWidget.virusUploadWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__virusUploadWidget__virusUploadWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UvirusUploadWidget_C, ProgressBar_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UvirusUploadWidget_C, 0x0210);
		}

		// WidgetBlueprintGeneratedClass actionOptionWidget.actionOptionWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__actionOptionWidget__actionOptionWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, bg, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, txtActionName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, isActivated, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, UnknownData_YJ7I, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, activeColor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactionOptionWidget_C, inactiveColor, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UactionOptionWidget_C, 0x0280);
		}

		// BlueprintGeneratedClass sewerMetalGate.sewerMetalGate_C
		TEST_METHOD(BlueprintGeneratedClass__sewerMetalGate__sewerMetalGate_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, UnknownData_1DEI, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, PointLight, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, ElectricalSparksParticles, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, SM_Metal_Door_Lock, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, SM_Metal_Door_Frame, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsewerMetalGate_C, PowerSource, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsewerMetalGate_C, 0x0560);
		}

		// BlueprintGeneratedClass BP_Truck01_Dump.BP_Truck01_Dump_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Truck01_Dump__BP_Truck01_Dump_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, StaticMeshComponent0, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, StaticMeshComponent04, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, StaticMeshComponent01, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, StaticMeshComponent05, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, StaticMeshComponent03, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, StaticMeshComponent02, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Dump_C, SharedRoot, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Truck01_Dump_C, 0x0360);
		}

		// BlueprintGeneratedClass electricBoxContainer.electricBoxContainer_C
		TEST_METHOD(BlueprintGeneratedClass__electricBoxContainer__electricBoxContainer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AelectricBoxContainer_C, 0x04F1);
		}

		// BlueprintGeneratedClass doorsExtMetal03.doorsExtMetal03_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtMetal03__doorsExtMetal03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtMetal03_C, 0x052A);
		}

		// BlueprintGeneratedClass doorsExtWood03.doorsExtWood03_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood03__doorsExtWood03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood03_C, 0x052A);
		}

		// BlueprintGeneratedClass backpackRepr_Medium.backpackRepr_Medium_C
		TEST_METHOD(BlueprintGeneratedClass__backpackRepr_Medium__backpackRepr_Medium_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackRepr_Medium_C, 0x0338);
		}

		// BlueprintGeneratedClass backpackRepr_Small.backpackRepr_Small_C
		TEST_METHOD(BlueprintGeneratedClass__backpackRepr_Small__backpackRepr_Small_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackRepr_Small_C, 0x0338);
		}

		// BlueprintGeneratedClass homeTeleportLocation.homeTeleportLocation_C
		TEST_METHOD(BlueprintGeneratedClass__homeTeleportLocation__homeTeleportLocation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AhomeTeleportLocation_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhomeTeleportLocation_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhomeTeleportLocation_C, 0x0338);
		}

		// WidgetBlueprintGeneratedClass sewageTeleportWidget.sewageTeleportWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__sewageTeleportWidget__sewageTeleportWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsewageTeleportWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsewageTeleportWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsewageTeleportWidget_C, Image_1, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsewageTeleportWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass panEddie.panEddie_C
		TEST_METHOD(BlueprintGeneratedClass__panEddie__panEddie_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, UnknownData_L3PB, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, SkeletalMesh, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, EddieVoice, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, firstMeet, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, UnknownData_DPCA, 0x0AF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, curCashTaskID, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApanEddie_C, tryDisappearBool, 0x0AF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApanEddie_C, 0x0AF9);
		}

		// BlueprintGeneratedClass saveGameSlot.saveGameSlot_C
		TEST_METHOD(BlueprintGeneratedClass__saveGameSlot__saveGameSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, slotOccupied, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, fullFilePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, saveCustomName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, saveDateTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, lastSavedGame, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, UnknownData_AIYJ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, saveDifficulty, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, gangLevel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveGameSlot_C, pitcoinWallet, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsaveGameSlot_C, 0x00A0);
		}

		// BlueprintGeneratedClass dealerCashTransactionDialogue.dealerCashTransactionDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__dealerCashTransactionDialogue__dealerCashTransactionDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerCashTransactionDialogue_C, UnknownData_8FYH, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerCashTransactionDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdealerCashTransactionDialogue_C, randomLine01Text, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdealerCashTransactionDialogue_C, 0x03B0);
		}

		// BlueprintGeneratedClass decoPicture_03.decoPicture_03_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_03__decoPicture_03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_03_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_AS_Amfetamina.BP_AS_Amfetamina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Amfetamina__BP_AS_Amfetamina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Amfetamina_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Amfetamina_C, 0x03F0);
		}

		// WidgetBlueprintGeneratedClass shadyMessageWidget.shadyMessageWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__shadyMessageWidget__shadyMessageWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, avatar, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, Image_3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, Image_4, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, Image_5, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, messageMine, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, messageOther, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, tail, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, txtMessage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyMessageWidget_C, txtMessageMine, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UshadyMessageWidget_C, 0x0260);
		}

		// BlueprintGeneratedClass musicAreaPlaylist.musicAreaPlaylist_C
		TEST_METHOD(BlueprintGeneratedClass__musicAreaPlaylist__musicAreaPlaylist_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, musicVolumeFade_volume_658713694E4D204F544A279381339B8B, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, musicVolumeFade__Direction_658713694E4D204F544A279381339B8B, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, UnknownData_VZ71, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, musicVolumeFade, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, ambientSoundPoints, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, PlaylistID, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, Playlist, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, curPlayerID, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, musicIsPlaying, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, UnknownData_D9DR, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, minMusicVolume, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, maxMusicVolume, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, randVolume, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, first, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, TWOTOWERS, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, fadeActive, 0x038E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, UnknownData_OZ62, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, minMusicVolNight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, maxMusicVolNight, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmusicAreaPlaylist_C, PlaylistDatabase, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmusicAreaPlaylist_C, 0x03A0);
		}

		// BlueprintGeneratedClass BP_TS_TunnelEntrance.BP_TS_TunnelEntrance_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TS_TunnelEntrance__BP_TS_TunnelEntrance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TS_TunnelEntrance_C, Sphere, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TS_TunnelEntrance_C, DefaultSceneRoot, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TS_TunnelEntrance_C, 0x0350);
		}

		// BlueprintGeneratedClass BP_AS_Diamorfina.BP_AS_Diamorfina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Diamorfina__BP_AS_Diamorfina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Diamorfina_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Diamorfina_C, 0x03F0);
		}

		// Class AndroidPermission.AndroidPermissionCallbackProxy
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_DGN5, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// Class AndroidPermission.AndroidPermissionFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// Class CustomMeshComponent.CustomMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_YKWE, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0590);
		}

		// BlueprintGeneratedClass shopInstance.shopInstance_C
		TEST_METHOD(BlueprintGeneratedClass__shopInstance__shopInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, currentInventory, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, currentInventoryQuantity, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, currentInventoryPrices, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, inventoryBase, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, inventoryBaseQuantity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, inventoryBasePrices, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, inventoryBaseQuantityLimit, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, inventoryAvailabilityDay, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, quantityMultiplier, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, resupplyDays, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, dayTimeManagerRef, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, shopIsTrading, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, UnknownData_CGT9, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, newQuantityMultiplier, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, ShopID, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopInstance_C, DisableMap, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopInstance_C, 0x03E9);
		}

		// BlueprintGeneratedClass stream_twoTowers_interiorsRight.stream_twoTowers_interiorsRight_C
		TEST_METHOD(BlueprintGeneratedClass__stream_twoTowers_interiorsRight__stream_twoTowers_interiorsRight_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_twoTowers_interiorsRight_C, 0x0330);
		}

		// BlueprintGeneratedClass testLight.testLight_C
		TEST_METHOD(BlueprintGeneratedClass__testLight__testLight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtestLight_C, lampMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtestLight_C, SpotLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtestLight_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtestLight_C, 0x0340);
		}

		// BlueprintGeneratedClass fenceDocksPartBP.fenceDocksPartBP_C
		TEST_METHOD(BlueprintGeneratedClass__fenceDocksPartBP__fenceDocksPartBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceDocksPartBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceDocksPartBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceDocksPartBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfenceDocksPartBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfenceDocksPartBP_C, 0x033D);
		}

		// BlueprintGeneratedClass ratDeadDrop.ratDeadDrop_C
		TEST_METHOD(BlueprintGeneratedClass__ratDeadDrop__ratDeadDrop_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, UnknownData_TN0B, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, Box, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, holdingEnvelope, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, UnknownData_BPCW, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, psychedelicGangManager, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, MyName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, dropDignRef, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, BoxExtent, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AratDeadDrop_C, dropUniqueIndex, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AratDeadDrop_C, 0x0548);
		}

		// BlueprintGeneratedClass PM_GetGuardLocation.PM_GetGuardLocation_C
		TEST_METHOD(BlueprintGeneratedClass__PM_GetGuardLocation__PM_GetGuardLocation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_GetGuardLocation_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_GetGuardLocation_C, 0x00A8);
		}

		// WidgetBlueprintGeneratedClass raidWindowTeleportWidget.raidWindowTeleportWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__raidWindowTeleportWidget__raidWindowTeleportWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UraidWindowTeleportWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UraidWindowTeleportWidget_C, Fade, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UraidWindowTeleportWidget_C, Image_1, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UraidWindowTeleportWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass BTService_Bird_DisableAvoidance_NearGroundTarget.BTService_Bird_DisableAvoidance_NearGroundTarget_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_DisableAvoidance_NearGroundTarget__BTService_Bird_DisableAvoidance_NearGroundTarget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_DisableAvoidance_NearGroundTarget_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_DisableAvoidance_NearGroundTarget_C, BBKey_DoADownTrace_, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_DisableAvoidance_NearGroundTarget_C, 0x00A8);
		}

		// BlueprintGeneratedClass policeSignBoardBP.policeSignBoardBP_C
		TEST_METHOD(BlueprintGeneratedClass__policeSignBoardBP__policeSignBoardBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceSignBoardBP_C, policeStationSignBoard_SM, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceSignBoardBP_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceSignBoardBP_C, 0x0338);
		}

		// BlueprintGeneratedClass ProceduralSidewalk400.ProceduralSidewalk400_C
		TEST_METHOD(BlueprintGeneratedClass__ProceduralSidewalk400__ProceduralSidewalk400_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk400_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk400_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk400_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralSidewalk400_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralSidewalk400_C, 0x033D);
		}

		// BlueprintGeneratedClass PawnShopOwner.PawnShopOwner_C
		TEST_METHOD(BlueprintGeneratedClass__PawnShopOwner__PawnShopOwner_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawnShopOwner_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass windowEscapeWidget.windowEscapeWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__windowEscapeWidget__windowEscapeWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UwindowEscapeWidget_C, barPop, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UwindowEscapeWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UwindowEscapeWidget_C, progEscape, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UwindowEscapeWidget_C, 0x0220);
		}

		// WidgetBlueprintGeneratedClass neededDrugWidget.neededDrugWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__neededDrugWidget__neededDrugWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UneededDrugWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UneededDrugWidget_C, drugIcon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UneededDrugWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UneededDrugWidget_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UneededDrugWidget_C, txtDrugAmount, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UneededDrugWidget_C, txtDrugName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UneededDrugWidget_C, 0x0238);
		}

		// BlueprintGeneratedClass metalBoxContainer.metalBoxContainer_C
		TEST_METHOD(BlueprintGeneratedClass__metalBoxContainer__metalBoxContainer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmetalBoxContainer_C, 0x082C);
		}

		// BlueprintGeneratedClass ws_trashtable.ws_trashtable_C
		TEST_METHOD(BlueprintGeneratedClass__ws_trashtable__ws_trashtable_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_trashtable_C, 0x04C5);
		}

		// BlueprintGeneratedClass ws_deskIndustrialSmall.ws_deskIndustrialSmall_C
		TEST_METHOD(BlueprintGeneratedClass__ws_deskIndustrialSmall__ws_deskIndustrialSmall_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_deskIndustrialSmall_C, 0x04C5);
		}

		// BlueprintGeneratedClass decoHangingHousePlant5.decoHangingHousePlant5_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant5__decoHangingHousePlant5_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant5_C, 0x0446);
		}

		// BlueprintGeneratedClass decoHangingHousePlant6.decoHangingHousePlant6_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant6__decoHangingHousePlant6_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant6_C, 0x0446);
		}

		// BlueprintGeneratedClass additiveContainerBase.additiveContainerBase_C
		TEST_METHOD(BlueprintGeneratedClass__additiveContainerBase__additiveContainerBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, UberGraphFrame, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, frontArrow, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, labelWidget, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, label, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, canHoldLiquids, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, UnknownData_FDQ2, 0x0801);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, dynamicMaterial, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, lastSelectedLabel, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, labelDisableCancel, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, UnknownData_CASR, 0x0815);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, labelColor, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AadditiveContainerBase_C, maxCapOverride, 0x0828);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AadditiveContainerBase_C, 0x082C);
		}

		// WidgetBlueprintGeneratedClass colorSelectWidget.colorSelectWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__colorSelectWidget__colorSelectWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, btnAccept, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, imgPreview, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, sliderBlue, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, sliderGreen, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, sliderREd, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, txtBtnAccept, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, varRed, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, varBlue, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, varGreen, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, UnknownData_W5U1, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorSelectWidget_C, settingsRef, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcolorSelectWidget_C, 0x0260);
		}

		// WidgetBlueprintGeneratedClass confirmDumpContent.confirmDumpContent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__confirmDumpContent__confirmDumpContent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, btnCancel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, btnConfirm, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, txtConfirmBtnText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, txtDumpText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, countdownTimer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, UnknownData_IJ17, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UconfirmDumpContent_C, EqRef, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UconfirmDumpContent_C, 0x0250);
		}

		// WidgetBlueprintGeneratedClass eqWorkProgressWidget.eqWorkProgressWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__eqWorkProgressWidget__eqWorkProgressWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UeqWorkProgressWidget_C, Enter, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeqWorkProgressWidget_C, progWork, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UeqWorkProgressWidget_C, txtProgressName, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UeqWorkProgressWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass shopJay.shopJay_C
		TEST_METHOD(BlueprintGeneratedClass__shopJay__shopJay_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopJay_C, UnknownData_CHHB, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AshopJay_C, UberGraphFrame, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopJay_C, 0x03F8);
		}

		// BlueprintGeneratedClass weedUnlocked.weedUnlocked_C
		TEST_METHOD(BlueprintGeneratedClass__weedUnlocked__weedUnlocked_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedUnlocked_C, RamaSave, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedUnlocked_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedUnlocked_C, 0x0338);
		}

		// BlueprintGeneratedClass sampleClientSetGoHome.sampleClientSetGoHome_C
		TEST_METHOD(BlueprintGeneratedClass__sampleClientSetGoHome__sampleClientSetGoHome_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientSetGoHome_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsampleClientSetGoHome_C, 0x00A8);
		}

		// BlueprintGeneratedClass gangDropFixer.gangDropFixer_C
		TEST_METHOD(BlueprintGeneratedClass__gangDropFixer__gangDropFixer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDropFixer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDropFixer_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangDropFixer_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgangDropFixer_C, 0x0340);
		}

		// BlueprintGeneratedClass twoTowersLookTrigger.twoTowersLookTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__twoTowersLookTrigger__twoTowersLookTrigger_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersLookTrigger_C, UnknownData_J29V, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtwoTowersLookTrigger_C, UberGraphFrame, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtwoTowersLookTrigger_C, 0x0360);
		}

		// BlueprintGeneratedClass FactoryBartender.FactoryBartender_C
		TEST_METHOD(BlueprintGeneratedClass__FactoryBartender__FactoryBartender_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactoryBartender_C, 0x0AD4);
		}

		// BlueprintGeneratedClass weedStrain_BongBreaker.weedStrain_BongBreaker_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_BongBreaker__weedStrain_BongBreaker_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_BongBreaker_C, 0x05A0);
		}

		// BlueprintGeneratedClass weedStrain_DubaiSativa.weedStrain_DubaiSativa_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_DubaiSativa__weedStrain_DubaiSativa_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_DubaiSativa_C, 0x05A0);
		}

		// BlueprintGeneratedClass MuteArea.MuteArea_C
		TEST_METHOD(BlueprintGeneratedClass__MuteArea__MuteArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMuteArea_C, Box, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMuteArea_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMuteArea_C, Size, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMuteArea_C, 0x0344);
		}

		// BlueprintGeneratedClass ws_shelfSmall.ws_shelfSmall_C
		TEST_METHOD(BlueprintGeneratedClass__ws_shelfSmall__ws_shelfSmall_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_shelfSmall_C, 0x04C5);
		}

		// BlueprintGeneratedClass contOldschoolCommode.contOldschoolCommode_C
		TEST_METHOD(BlueprintGeneratedClass__contOldschoolCommode__contOldschoolCommode_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcontOldschoolCommode_C, 0x04F1);
		}

		// BlueprintGeneratedClass contOldschoolWardrobe.contOldschoolWardrobe_C
		TEST_METHOD(BlueprintGeneratedClass__contOldschoolWardrobe__contOldschoolWardrobe_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcontOldschoolWardrobe_C, 0x04F1);
		}

		// BlueprintGeneratedClass decoModernArmchair.decoModernArmchair_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernArmchair__decoModernArmchair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernArmchair_C, 0x0446);
		}

		// BlueprintGeneratedClass evidenceDocuments.evidenceDocuments_C
		TEST_METHOD(BlueprintGeneratedClass__evidenceDocuments__evidenceDocuments_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AevidenceDocuments_C, 0x05A8);
		}

		// BlueprintGeneratedClass millMortarSimpleBP.millMortarSimpleBP_C
		TEST_METHOD(BlueprintGeneratedClass__millMortarSimpleBP__millMortarSimpleBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmillMortarSimpleBP_C, UberGraphFrame, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmillMortarSimpleBP_C, contents, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmillMortarSimpleBP_C, baseContentScale, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmillMortarSimpleBP_C, 0x07F4);
		}

		// BlueprintGeneratedClass fluidMixerTempLabTray.fluidMixerTempLabTray_C
		TEST_METHOD(BlueprintGeneratedClass__fluidMixerTempLabTray__fluidMixerTempLabTray_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerTempLabTray_C, UberGraphFrame, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerTempLabTray_C, contentMesh, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AfluidMixerTempLabTray_C, contentScale, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AfluidMixerTempLabTray_C, 0x0864);
		}

		// BlueprintGeneratedClass PM_BeginSearch.PM_BeginSearch_C
		TEST_METHOD(BlueprintGeneratedClass__PM_BeginSearch__PM_BeginSearch_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_BeginSearch_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_BeginSearch_C, 0x00A8);
		}

		// BlueprintGeneratedClass BP_AS_Tryptamina.BP_AS_Tryptamina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_Tryptamina__BP_AS_Tryptamina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_Tryptamina_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_Tryptamina_C, 0x03F0);
		}

		// BlueprintGeneratedClass sampleClientFindWanderPoint.sampleClientFindWanderPoint_C
		TEST_METHOD(BlueprintGeneratedClass__sampleClientFindWanderPoint__sampleClientFindWanderPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientFindWanderPoint_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsampleClientFindWanderPoint_C, chosenArea, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsampleClientFindWanderPoint_C, 0x00B0);
		}

		// Class OnlineSubsystemSteam.SteamAuthComponentModuleInterface
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0028);
		}

		// Class OnlineSubsystemSteam.SteamNetConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1978);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_78R2, 0x1979);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1980);
		}

		// Class OnlineSubsystemSteam.SteamNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_669G, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x06E0);
		}

		// Class OnlineSubsystem.NamedInterfaces
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_QOM4, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// Class OnlineSubsystem.TurnBasedMatchInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// Class DatasmithContent.DatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0028);
		}

		// Class DatasmithContent.DatasmithActorTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00C8);
		}

		// Class DatasmithContent.DatasmithAreaLightActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_I0C6, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0348);
		}

		// Class DatasmithContent.DatasmithAreaLightActorTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_2Z8P, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_QH8O, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x0050);
		}

		// Class DatasmithContent.DatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithStaticMeshCADImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithCADImportSceneData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// Class DatasmithContent.DatasmithMDLSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithDeltaGenAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithDeltaGenSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithVREDAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDAssetImportData, UnknownData_MNYJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0030);
		}

		// Class DatasmithContent.DatasmithVREDSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// Class DatasmithContent.DatasmithCineCameraComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_EUEY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// Class DatasmithContent.DatasmithContentBlueprintLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// Class DatasmithContent.DatasmithImportOptions
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_7C61, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TessellationOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_OACH, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0088);
		}

		// Class DatasmithContent.DatasmithLandscapeTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_AOGN, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0038);
		}

		// Class DatasmithContent.DatasmithLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_2QLO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_RCW7, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_BWLN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0060);
		}

		// Class DatasmithContent.DatasmithPointLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_AOVK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0038);
		}

		// Class DatasmithContent.DatasmithScene
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0028);
		}

		// Class DatasmithContent.DatasmithSceneActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0380);
		}

		// Class DatasmithContent.DatasmithSceneComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_KT4M, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_WCNI, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00E0);
		}

		// Class DatasmithContent.DatasmithSkyLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_DSTB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0038);
		}

		// Class DatasmithContent.DatasmithSpotLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0030);
		}

		// Class DatasmithContent.DatasmithStaticMeshComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, UnknownData_XBY4, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0100);
		}

		// Class DatasmithContent.DatasmithStaticMeshTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A0);
		}

		// Class AvfMediaFactory.AvfMediaSettings
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_X6WC, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// Class CableComponent.CableActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0330);
		}

		// Class CableComponent.CableComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bAttachStart, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bAttachEnd, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_4VDZ, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_JUUM, 0x05C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_CBU2, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0600);
		}

		// Class LocationServicesBPLibrary.LocationServices
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// Class LocationServicesBPLibrary.LocationServicesImpl
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// WidgetBlueprintGeneratedClass worldMapUI_Marker.worldMapUI_Marker_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__worldMapUI_Marker__worldMapUI_Marker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, markerRotation, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, icon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, lockIcon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, mainCanvas, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, ProgressBar, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, txtMarkerName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, basePostion, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, isCustom, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, UnknownData_AHYA, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, AreaString, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworldMapUI_Marker_C, NameOnHover, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UworldMapUI_Marker_C, 0x0261);
		}

		// Class Landscape.ControlPointMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x05F0);
		}

		// Class Landscape.LandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_ANTE, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_1T2J, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_K95Q, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_14D5, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Q8QK, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KQJB, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7UT8, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_TAM2, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_9F8C, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_EG7F, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_9J1C, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_9SSD, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x05ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_IW0Q, 0x05EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0640);
		}

		// Class Landscape.Landscape
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0640);
		}

		// Class Landscape.LandscapeComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_DO0Z, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_B54U, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_YZGP, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_OHEZ, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_L7HV, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_TMZC, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0740);
		}

		// Class Landscape.LandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0328);
		}

		// Class Landscape.LandscapeGizmoActiveActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_B6GN, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0378);
		}

		// Class Landscape.LandscapeGizmoRenderComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0560);
		}

		// Class Landscape.LandscapeGrassType
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_CRQ4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_9EPE, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// Class Landscape.LandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_4XPX, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_XXW8, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_B1K1, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0640);
		}

		// Class Landscape.LandscapeInfo
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_I323, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_F54Y, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0200);
		}

		// Class Landscape.LandscapeInfoMap
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_94KH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// Class Landscape.LandscapeLayerInfoObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_ZAQF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// Class Landscape.LandscapeMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_F0LI, 0x01E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x01F0);
		}

		// Class Landscape.LandscapeMeshCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_MUTV, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0650);
		}

		// Class Landscape.LandscapeMeshProxyActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0330);
		}

		// Class Landscape.LandscapeMeshProxyComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_SX7K, 0x0609);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0610);
		}

		// Class Landscape.LandscapeSplinesComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, UnknownData_NVNT, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0590);
		}

		// Class Landscape.LandscapeSplineControlPoint
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_P7HN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_U2FG, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x0098);
		}

		// Class Landscape.LandscapeSplineSegment
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_L3EH, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// Class Landscape.LandscapeStreamingProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_CTOU, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0660);
		}

		// Class Landscape.MaterialExpressionLandscapeGrassOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerBlend
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerCoords
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_3NHD, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_M85G, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerSample
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_2J5L, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerSwitch
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_NMTP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_KORR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_QVE6, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_5CPX, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0090);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerWeight
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_CJB9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_A82T, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0098);
		}

		// Class Landscape.MaterialExpressionLandscapeVisibilityMask
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// WidgetBlueprintGeneratedClass mixConfirmWidget.mixConfirmWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__mixConfirmWidget__mixConfirmWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, Border, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, btnApply, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, btnCancel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, mixContents, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, mixNameInput, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, TextBlock_4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, txtTotalMass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, MixerRef, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, nameLenLimit, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, UnknownData_XM8R, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixConfirmWidget_C, activeElementsColor, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmixConfirmWidget_C, 0x0290);
		}

		// BlueprintGeneratedClass decoTableHousePlant3.decoTableHousePlant3_C
		TEST_METHOD(BlueprintGeneratedClass__decoTableHousePlant3__decoTableHousePlant3_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTableHousePlant3_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoModernOfficeChair.BP_decoModernOfficeChair_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoModernOfficeChair__BP_decoModernOfficeChair_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoModernOfficeChair_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoModernPaddedBed.BP_decoModernPaddedBed_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoModernPaddedBed__BP_decoModernPaddedBed_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoModernPaddedBed_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoScandiSofa.BP_decoScandiSofa_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoScandiSofa__BP_decoScandiSofa_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoScandiSofa_C, 0x0446);
		}

		// BlueprintGeneratedClass streetPersonFemale07BP.streetPersonFemale07BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale07BP__streetPersonFemale07BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale07BP_C, 0x0AD4);
		}

		// BlueprintGeneratedClass Ultra_Dynamic_Sky_BP.Ultra_Dynamic_Sky_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Ultra_Dynamic_Sky_BP__Ultra_Dynamic_Sky_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, moon_plane, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Arrow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Root, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Ultra_Dynamic_Sky_Sphere, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Direction_Light__Sun_, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sky_MID, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Refresh_Settings, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_CP64, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Speed, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Density, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Wisps_Opacity, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Horizon_Base_Color_Curve, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Zenith_Base_Color_Curve, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Light_Color_Curve, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Dark_Color_Curve, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Time_of_Day, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_O0IM, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Color_Curve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Shine_Intensity_Curve, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Saturation, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_FWDA, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Cloudy_Color_Curve, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Exponential_Height_Fog, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Stars_Intensity_Curve, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Phase, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Scale, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Inclination, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Phase, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Automatically_Set_Advanced_Settings_using_Time_of_Day, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_31Q4, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Stars_Visibility, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Intensity, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Position, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Angle, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Horizon_Base_Color, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Zenith_Base_Color, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Light_Color, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Dark_Color, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Color, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Shine_Intensity, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Light_Color, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Day_Length, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_SHSY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Position_Curve, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Night_Length, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Night_Cycle, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Simulate_Cloud_Density_Changes, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_KNRS, 0x0496);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Density_Shift_Frequency__min_, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Density_Shift_Frequency__max_, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Density_target, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Density_Change_Speed, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Opacity, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Overall_Intensity, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Brightness, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Color, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Shine_Variation, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Lighting_Intensity, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_B9OE, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Highlight_Radius_curve, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Highlight_Radius, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, First_Day, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Simulate_Moon_Phase_Changes, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_AYPU, 0x04DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Stars_Intensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Stars_Color, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Orbit_Offset, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Rotation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Radius, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Shadows_MID, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Use_Cloud_Shadows, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_SD8Z, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Shadows_Scale, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Shadows_Intensity, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_I4Z1, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Light, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Manually_Select_Sun_Color, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Automatically_Set_Moon_Light_Rotation, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Automatically_Set_Sun_Light_Rotation, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_91M2, 0x052B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moonlight_Intensity, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Stars_Speed, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Inclination, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Yaw, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Rotation, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Custom_Moon_Texture, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Use_Custom_Moon_Texture, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_UALA, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, SkyLight, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Recapture_Sky_light_periodically, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_CY6G, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sky_Light_recapture_period, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Night_Filter_Curve, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Night_brightness, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Glow_Intensity, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Directional_Intensity_Curve, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Light_Intensity, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Aurora_Intensity, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Aurora_Speed, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Use_Fast_Skylight, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Use_Auroras, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_ZQTV, 0x0586);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Clouds_Base_Texture, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Tiling, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Direction, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, One_Cloud_Layer, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_AQ4U, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Height_1, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Cloud_Height_2, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, color_scheme, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_MID, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Angle, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Sun_Volumetric_Scattering_Intensity, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Moon_Volumetric_Scattering_Intensity, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Aurora_Phase, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Stars_Phase, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_ZCY7, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Readme, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Minimum_Cloud_Density, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, Maximum_Cloud_Density, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, WorldTimeAndConditions, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, cloudDensityTarget, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, sunBaseMaxIntensity, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, moonBaseMaxIntensity, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, curMinCloudIntensity, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, curMinCloudIntensityInterp, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, worldInitiated, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, UnknownData_RQT4, 0x05FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, baseSkyIntensity, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUltra_Dynamic_Sky_BP_C, skyIntensityBoost, 0x0604);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUltra_Dynamic_Sky_BP_C, 0x0608);
		}

		// BlueprintGeneratedClass task_CitizenFindWanderPoint.task_CitizenFindWanderPoint_C
		TEST_METHOD(BlueprintGeneratedClass__task_CitizenFindWanderPoint__task_CitizenFindWanderPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Utask_CitizenFindWanderPoint_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utask_CitizenFindWanderPoint_C, possiblePoints, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Utask_CitizenFindWanderPoint_C, 0x00B8);
		}

		// BlueprintGeneratedClass eddieWalkHome.eddieWalkHome_C
		TEST_METHOD(BlueprintGeneratedClass__eddieWalkHome__eddieWalkHome_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, StaticMesh, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, Audio, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, Timeline_0_U_pose_B34BF62C434297982C7FE3AD341DA30F, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, Timeline_0_A_pose_B34BF62C434297982C7FE3AD341DA30F, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, Timeline_0__Direction_B34BF62C434297982C7FE3AD341DA30F, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, UnknownData_NFD7, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, Timeline_1, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkHome_C, isTalking, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeddieWalkHome_C, 0x0771);
		}

		// BlueprintGeneratedClass decoModernFloorLamp1.decoModernFloorLamp1_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernFloorLamp1__decoModernFloorLamp1_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp1_C, UnknownData_BZEY, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp1_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp1_C, SpotLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp1_C, LightSwitch1, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernFloorLamp1_C, 0x0460);
		}

		// WidgetBlueprintGeneratedClass pauseMenu.pauseMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__pauseMenu__pauseMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, confirmEnter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, Exit, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, Enter, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnCancel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnConfirm, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnExitGame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnLoadGame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnMainMenu, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnResume, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, btnSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, ConfirmPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, dark, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, Image_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, plama, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, txtConfirmDesc, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, txtConfirmTitle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, settingsWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, canUnpause, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, UnknownData_UMOX, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, tooltipError, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpauseMenu_C, ConfirmActionIndex, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpauseMenu_C, 0x02C4);
		}

		// BlueprintGeneratedClass ConfirmPopupInterface.ConfirmPopupInterface_C
		TEST_METHOD(BlueprintGeneratedClass__ConfirmPopupInterface__ConfirmPopupInterface_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfirmPopupInterface_C, 0x0028);
		}

		// WidgetBlueprintGeneratedClass colorButtonWidget.colorButtonWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__colorButtonWidget__colorButtonWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorButtonWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorButtonWidget_C, btnColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorButtonWidget_C, colorImage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorButtonWidget_C, Parent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcolorButtonWidget_C, ColorIndex, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcolorButtonWidget_C, 0x022C);
		}

		// BlueprintGeneratedClass wallCheckpoint.wallCheckpoint_C
		TEST_METHOD(BlueprintGeneratedClass__wallCheckpoint__wallCheckpoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, throwCollider, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, blocker, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, RamaSave, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, barrier02, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, barrier01, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, Box, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, checkPointActive, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, UnknownData_OTI7, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, CheckpointID, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, playerTrespassed, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, UnknownData_F8QH, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, thrownBackpack, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, Loaded, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwallCheckpoint_C, SectorC, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwallCheckpoint_C, 0x0382);
		}

		// BlueprintGeneratedClass checkDistanceToLeash.checkDistanceToLeash_C
		TEST_METHOD(BlueprintGeneratedClass__checkDistanceToLeash__checkDistanceToLeash_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheckDistanceToLeash_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcheckDistanceToLeash_C, 0x00A0);
		}

		// BlueprintGeneratedClass getPointAroundMaster.getPointAroundMaster_C
		TEST_METHOD(BlueprintGeneratedClass__getPointAroundMaster__getPointAroundMaster_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UgetPointAroundMaster_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgetPointAroundMaster_C, 0x00A8);
		}

		// AnimBlueprintGeneratedClass policeDogAnimBP.policeDogAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__policeDogAnimBP__policeDogAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceDogAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceDogAnimBP_C, AnimGraphNode_Root_8BEB96644571C39A56F423BEE245C3B5, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceDogAnimBP_C, AnimGraphNode_BlendSpacePlayer_DF8AB9FA4E3A86C4FA596384F3D55D2E, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpoliceDogAnimBP_C, 0x04D0);
		}

		// BlueprintGeneratedClass PM_CancelChase.PM_CancelChase_C
		TEST_METHOD(BlueprintGeneratedClass__PM_CancelChase__PM_CancelChase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CancelChase_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CancelChase_C, playVoice, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CancelChase_C, stayAlerted, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CancelChase_C, cancelAllChasers, 0x00AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_CancelChase_C, 0x00AB);
		}

		// BlueprintGeneratedClass PM_CantReachPlayer.PM_CantReachPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__PM_CantReachPlayer__PM_CantReachPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_CantReachPlayer_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_CantReachPlayer_C, 0x00A8);
		}

		// Class HTML5Networking.WebSocketConnection
		TEST_METHOD(Class__HTML5Networking__WebSocketConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketConnection, UnknownData_VTKG, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSocketConnection, 0x1928);
		}

		// Class HTML5Networking.WebSocketNetDriver
		TEST_METHOD(Class__HTML5Networking__WebSocketNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketNetDriver, WebSocketPort, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketNetDriver, UnknownData_BVNM, 0x069C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSocketNetDriver, 0x06A8);
		}

		// BlueprintGeneratedClass BP_TDE_Ergolina.BP_TDE_Ergolina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Ergolina__BP_TDE_Ergolina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, lsdPostProcess, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, Out, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, mindBlown_v6, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, shepherd, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, DefaultSceneRoot, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, fadeOut_NewTrack_0_167BFF254E4B7A37A514E9AA3632C212, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, fadeOut__Direction_167BFF254E4B7A37A514E9AA3632C212, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, UnknownData_48TP, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, FadeOut, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, lsdActive, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, peak, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, UnknownData_WDS5, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, PlayerRef, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Ergolina_C, distortionMat, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Ergolina_C, 0x0508);
		}

		// BlueprintGeneratedClass ContainerSafeSmall.ContainerSafeSmall_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerSafeSmall__ContainerSafeSmall_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerSafeSmall_C, 0x04F1);
		}

		// BlueprintGeneratedClass decoBed.decoBed_C
		TEST_METHOD(BlueprintGeneratedClass__decoBed__decoBed_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoBed_C, 0x0446);
		}

		// BlueprintGeneratedClass decoCouch.decoCouch_C
		TEST_METHOD(BlueprintGeneratedClass__decoCouch__decoCouch_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoCouch_C, 0x0446);
		}

		// BlueprintGeneratedClass pillMakerBase.pillMakerBase_C
		TEST_METHOD(BlueprintGeneratedClass__pillMakerBase__pillMakerBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApillMakerBase_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApillMakerBase_C, 0x07D8);
		}

		// BlueprintGeneratedClass BlueprintHelpers.BlueprintHelpers_C
		TEST_METHOD(BlueprintGeneratedClass__BlueprintHelpers__BlueprintHelpers_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintHelpers_C, 0x0028);
		}

		// BlueprintGeneratedClass populationManager.populationManager_C
		TEST_METHOD(BlueprintGeneratedClass__populationManager__populationManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, peopleOnStreetMax, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, peopleOnStreetCurrent, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, dayTimeControlerRef, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, ready, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, UnknownData_TTWW, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, goHomePoints, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, chosenSpawnPoint, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, npcClasses, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, isOnStreets, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, lastSpawnIndex, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, UnknownData_UTP7, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, ActivePoints, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApopulationManager_C, DisableSpawning, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApopulationManager_C, 0x03B1);
		}

		// BlueprintGeneratedClass salesManager.salesManager_C
		TEST_METHOD(BlueprintGeneratedClass__salesManager__salesManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, PlayerRef, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, contactsManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, statisticsManager, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, mainComputerRef, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, initialised, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_DMAZ, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, maxClientsPerLevel, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, curClientCount, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_6HUR, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsAvailable, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsNicknames, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsMale, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsLost, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsOD, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientAwaitingResponse, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsSuspended, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientIsDealer, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientDealerDeclined, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientDealerTookDope, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientDealerCashToPay, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsReputationMin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsReputationMax, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsExpectedQuality, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsAverageOrderInterval, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsOrderCountdown, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsSatisfactionGeneral, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsSatisfactionLastOrder, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsRiskFactor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsAssignedArea, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsSaleCount, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsDrugAddictedTo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsDrugAddictedData, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsAddictionDisplayed, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsLastOrderDrugName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsLastOrderRecievedDrugName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsNewestOrderID, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, curClientsSuspended, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, newClientCountdown, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, newClientIntervalMin, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, newClientIntervalMax, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientRandomNicks, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientAvatars, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, OrderIntervalRandRange, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListClientID, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListDrugOrdered, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListDrugQuantity, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListDrugExpectedPrice, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListTaskID, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListAccepted, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListClosed, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderListDeliveryTime, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, timesClientResigned, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, dealerMinOrderCount, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, dealerMinSatisfaction, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, dealerOfferProbability, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, salesActive, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_BJX7, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, curDrugsAvailable, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, curDrugsAvailableSourceID, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, curDrugsAvailableWeight, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderInvervalMinimum, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, orderIntervalMaximum, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, badReputationMultiplier, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, badReputationDropTempo, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, badRepBadSale, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, badRepLostClient, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, badRepOverdose, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_JW5V, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientAreas, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientAreaQuantities, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsLookData, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientAreaTimeMultiplier, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientSuspendResignCount, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_54A1, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientsResignTimes, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, priceMultiplierDef, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_SDNM, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, saleAreaManager, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, maxClientsPerArea, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, lastAreaSampleSpawnID, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, skillPirceMultiplier, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, skillSaleSpeedMultiplier, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, sampleGuysEnabled, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_UD07, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientNamesMale, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientNamesFemale, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientSurnames, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, lastAvatarID, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, lastNameGenerated, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientStateQueueName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientStateQueueDrug, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, clientStateQueueOD, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, debugLastDrugData, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, nightSaleToggle, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, firstDealerSentOffer, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_FN4O, 0x07E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, earlyGameSaleBoost, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ballenaProtected, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_K9ND, 0x07E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, difficultySaleMultiplier, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, difficulty, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, addictedTaskDone, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_NRR3, 0x07F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, AreaDatabase, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ClientWishlist, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, SampleMaxBoost, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, SampleBoostPerGram, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ClientDealerExp, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ArrestedClients, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ArrestedDayOver, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ArrestedHasBail, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, daytimeManager, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, WeekendOrderIntervalMultiplier, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, UnknownData_H7T4, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ArrestedDisplayPool, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, ArrestedDisplayReleased, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, DealerOrderMultiplier, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsalesManager_C, DealerCashMultiplier, 0x088C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsalesManager_C, 0x0890);
		}

		// BlueprintGeneratedClass worldMapMarker.worldMapMarker_C
		TEST_METHOD(BlueprintGeneratedClass__worldMapMarker__worldMapMarker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, Box2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, RamaSave, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, MarkerName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, markerCategory, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, UnknownData_HHU9, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, MarkerTooltip, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, dealer, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, UnknownData_5Q72, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, relatedTaskID, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, taskRelated, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, UnknownData_KK1I, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, questManager, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, relatedAreaString, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AworldMapMarker_C, waitTimeLeft, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AworldMapMarker_C, 0x03BC);
		}

		// BlueprintGeneratedClass stream_oldTown_farDetails.stream_oldTown_farDetails_C
		TEST_METHOD(BlueprintGeneratedClass__stream_oldTown_farDetails__stream_oldTown_farDetails_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_oldTown_farDetails_C, 0x0330);
		}

		// BlueprintGeneratedClass gunshotsPlayer.gunshotsPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__gunshotsPlayer__gunshotsPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgunshotsPlayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgunshotsPlayer_C, TextRender, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgunshotsPlayer_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgunshotsPlayer_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgunshotsPlayer_C, Sounds, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgunshotsPlayer_C, 0x0358);
		}

		// WidgetBlueprintGeneratedClass playerHUD.playerHUD_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__playerHUD__playerHUD_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, slideTaskList, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, newMessage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, incomingCall, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Exit, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Enter, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, actionOptionsPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, actionPanel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, appartmentOptionsPanel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, callIcon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, compasMarkersHolder, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, compassPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, confusionBlur, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, confusionShadow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, curTaskPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, debugPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, debugSkradankowy, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, dragIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, grabPointer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, holdToDropInfo, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Image_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Image_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Image_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Image_5, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Image_6, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Image_7, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, messageIcon, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, notIconMessages, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, notIconNotifs, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, phonePanel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, Pointer, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, progHealth, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, progStamina, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, quickMessageList, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, statusPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, sterowaniePanel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, TextBlock_5, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, TextBlock_7, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, TextBlock_10, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, TextBlock_13, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtAction, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtActionBtn, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDebugBad, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDebugClientCountdown, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDebugClients, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDebugClientsSuspended, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDebugLastDrugData, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDebugPricesOK, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtDeubgAreaClientsMax, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtFugitive, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtisChased, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtMinNumFilters, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtNewMessageCount, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtNewNotCount, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtNumFilters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtPlayerPos, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtPolicemen, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, txtTaskNum, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, weedInfoPanel, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, lastAdditiveContainer, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, compassLocations, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, staminaEndOpacity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, showTaskList, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, UnknownData_LXKR, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, maxTaskOnList, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, UnknownData_K7LN, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, detailWidget, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, activeElementColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerHUD_C, TargetHealth, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UplayerHUD_C, 0x043C);
		}

		// BlueprintGeneratedClass BP_NPC_Pigeon.BP_NPC_Pigeon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NPC_Pigeon__BP_NPC_Pigeon_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NPC_Pigeon_C, 0x07E4);
		}

		// BlueprintGeneratedClass bridgeNewTopPartBP.bridgeNewTopPartBP_C
		TEST_METHOD(BlueprintGeneratedClass__bridgeNewTopPartBP__bridgeNewTopPartBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AbridgeNewTopPartBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbridgeNewTopPartBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbridgeNewTopPartBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbridgeNewTopPartBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbridgeNewTopPartBP_C, 0x033D);
		}

		// BlueprintGeneratedClass appartmentManager.appartmentManager_C
		TEST_METHOD(BlueprintGeneratedClass__appartmentManager__appartmentManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, music, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentList, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentRented, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentDebt, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentForever, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentTerminated, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentRentedTill, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, viewerActive, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, UnknownData_25W7, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, BlendTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, curViewedAppartment, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, possesLatency, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, viewWidget, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, curViewer, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, switchEnabled, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, confirmOpen, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, confirmReady, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, processingPayment, 0x03D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, flying, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, curStartRenting, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, UnknownData_2IP2, 0x03D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentRentCorporationName, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, appartmentRentPaymentTitle, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, warningCountdown, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, warningInterval, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, computerRef, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, debtTotal, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, lastApartmentCount, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, rentDayInterval, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, firstOneRented, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, UnknownData_AOMP, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AappartmentManager_C, firstRentedApartment, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AappartmentManager_C, 0x0430);
		}

		// WidgetBlueprintGeneratedClass reputationChartWidget.reputationChartWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__reputationChartWidget__reputationChartWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, CanvasPanel_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, priceMarker, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, priceMarkerHolder, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, progLeft, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, progressBarHolder, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, progRight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, priceList, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, priceSum, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, priceHighest, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UreputationChartWidget_C, pricesToHigh, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UreputationChartWidget_C, 0x0261);
		}

		// WidgetBlueprintGeneratedClass drugItemSlot.drugItemSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__drugItemSlot__drugItemSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, bgMain, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, btnEdit, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, btnRemoveElement, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, buttonHolder, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, drugIcon, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, Image_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, txtDrugName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, txtPrice, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, GramPrice, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, UnknownData_QZ7I, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, drugData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, dropWidgetRef, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, Tag, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdrugItemSlot_C, DrugID, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdrugItemSlot_C, 0x0328);
		}

		// BlueprintGeneratedClass garageDoorBase.garageDoorBase_C
		TEST_METHOD(BlueprintGeneratedClass__garageDoorBase__garageDoorBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, Box1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, Box, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, openClose_progress_43A1DF6645BA848D731E128533893824, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, openClose__Direction_43A1DF6645BA848D731E128533893824, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, UnknownData_WOCT, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, openClose, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, garageLocked, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, garageOpen, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, UnknownData_1YZL, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, baseZPos, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, endRot, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, EndPos, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, canLockpick, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, UnknownData_D5K3, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, keyID, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgarageDoorBase_C, collisionSize, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarageDoorBase_C, 0x0474);
		}

		// BlueprintGeneratedClass Bird_Perch_TargetPoint.Bird_Perch_TargetPoint_C
		TEST_METHOD(BlueprintGeneratedClass__Bird_Perch_TargetPoint__Bird_Perch_TargetPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FaceThisWay, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, TargetPoint_1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FlyToPerch_NewTrack_1_AD7C6EEA4408FE1A5D737CA2BA88AB3C, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FlyToPerch__Direction_AD7C6EEA4408FE1A5D737CA2BA88AB3C, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, UnknownData_LTFP, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FlyToPerch, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, UseFaceThisWayArrow_, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, UnknownData_8NEF, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FlyToPerch_Speed, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, Occupied_, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, UnknownData_ZEWP, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FlyFromHere_Perching, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, FlyToHere_Perching, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, CurrentRotation, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, DesiredRotation, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, UnknownData_I9RB, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, BBKey_IsLookingForPerch_, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, BBKey_FlyAway_, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, BBKey_FlyToPerch_, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, BBKey_IsPerched_, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Perch_TargetPoint_C, BBKey_AllPerchesAreFull, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABird_Perch_TargetPoint_C, 0x03C0);
		}

		// BlueprintGeneratedClass Bird_Ground_TargetPoint.Bird_Ground_TargetPoint_C
		TEST_METHOD(BlueprintGeneratedClass__Bird_Ground_TargetPoint__Bird_Ground_TargetPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Ground_TargetPoint_C, Arrow2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Ground_TargetPoint_C, TargetPoint_1, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABird_Ground_TargetPoint_C, 0x0338);
		}

		// BlueprintGeneratedClass Bird_Sky_TargetPoint.Bird_Sky_TargetPoint_C
		TEST_METHOD(BlueprintGeneratedClass__Bird_Sky_TargetPoint__Bird_Sky_TargetPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Sky_TargetPoint_C, Arrow6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Sky_TargetPoint_C, Arrow5, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Sky_TargetPoint_C, Arrow3, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Sky_TargetPoint_C, Arrow1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_Sky_TargetPoint_C, TargetPoint_1, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABird_Sky_TargetPoint_C, 0x0350);
		}

		// WidgetBlueprintGeneratedClass backpackSlotWidget.backpackSlotWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__backpackSlotWidget__backpackSlotWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, backpackIcon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, bg, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, bgDarken, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, curBackpackIcon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, iconGreen, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, iconRed, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, Occupied, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, UnknownData_21K2, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, curBackpackData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbackpackSlotWidget_C, CurBackpackID, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbackpackSlotWidget_C, 0x0358);
		}

		// BlueprintGeneratedClass eqShopTrash.eqShopTrash_C
		TEST_METHOD(BlueprintGeneratedClass__eqShopTrash__eqShopTrash_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeqShopTrash_C, 0x03E9);
		}

		// BlueprintGeneratedClass FrontWidgetInterface.FrontWidgetInterface_C
		TEST_METHOD(BlueprintGeneratedClass__FrontWidgetInterface__FrontWidgetInterface_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrontWidgetInterface_C, 0x0028);
		}

		// BlueprintGeneratedClass PlayerCharacterCamManager.PlayerCharacterCamManager_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerCharacterCamManager__PlayerCharacterCamManager_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCharacterCamManager_C, 0x2470);
		}

		// WidgetBlueprintGeneratedClass SewagePeekHUD.SewagePeekHUD_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SewagePeekHUD__SewagePeekHUD_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, progGetOut, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, ProgressBar_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, TextBlock_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, activeElementColor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USewagePeekHUD_C, Progress, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USewagePeekHUD_C, 0x025C);
		}

		// WidgetBlueprintGeneratedClass phoneNotificationWidget.phoneNotificationWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__phoneNotificationWidget__phoneNotificationWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneNotificationWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneNotificationWidget_C, Image_3, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneNotificationWidget_C, notifyIcon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphoneNotificationWidget_C, txtNorifyText, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UphoneNotificationWidget_C, 0x0228);
		}

		// WidgetBlueprintGeneratedClass tooltipWidget.tooltipWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__tooltipWidget__tooltipWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UtooltipWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtooltipWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtooltipWidget_C, mainHolder, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtooltipWidget_C, txtTootltipDesc, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtooltipWidget_C, 0x0228);
		}

		// BlueprintGeneratedClass areaMusicManager.areaMusicManager_C
		TEST_METHOD(BlueprintGeneratedClass__areaMusicManager__areaMusicManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AareaMusicManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AareaMusicManager_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AareaMusicManager_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AareaMusicManager_C, musicIsActive, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AareaMusicManager_C, 0x0341);
		}

		// WidgetBlueprintGeneratedClass loadingScreen.loadingScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__loadingScreen__loadingScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, loadLoop, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, Enter, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, Black, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, darkBottom, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, darkTop, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, loadingImage, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, redAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, redAnim2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, txtTip, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, loadingImages, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, loadingTips, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UloadingScreen_C, loadingMusic, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UloadingScreen_C, 0x0288);
		}

		// BlueprintGeneratedClass sampleClientBP.sampleClientBP_C
		TEST_METHOD(BlueprintGeneratedClass__sampleClientBP__sampleClientBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsampleClientBP_C, UnknownData_67R7, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsampleClientBP_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsampleClientBP_C, Widget, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsampleClientBP_C, sampleAreaAffected, 0x0AE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsampleClientBP_C, 0x0AF8);
		}

		// Class MediaCompositing.MovieSceneMediaSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_LJM4, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_RUB3, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0110);
		}

		// Class MediaCompositing.MovieSceneMediaTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0068);
		}

		// BlueprintGeneratedClass navArea_Water.navArea_Water_C
		TEST_METHOD(BlueprintGeneratedClass__navArea_Water__navArea_Water_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnavArea_Water_C, 0x0048);
		}

		// BlueprintGeneratedClass navArea_YardOrGreen.navArea_YardOrGreen_C
		TEST_METHOD(BlueprintGeneratedClass__navArea_YardOrGreen__navArea_YardOrGreen_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnavArea_YardOrGreen_C, 0x0048);
		}

		// BlueprintGeneratedClass rainActor.rainActor_C
		TEST_METHOD(BlueprintGeneratedClass__rainActor__rainActor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, rainParticlesIntense, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, rainIntensity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, rainIntensityInterp, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, stormIntensity, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, UnknownData_BCXO, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, FogRef, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, fogRainMaxFactor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, UnknownData_V5H0, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, WorldTimeAndConditions, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, globalFogLevel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, UnknownData_JDLP, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ArainActor_C, PlayerRef, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ArainActor_C, 0x0380);
		}

		// BlueprintGeneratedClass deaFlashBang.deaFlashBang_C
		TEST_METHOD(BlueprintGeneratedClass__deaFlashBang__deaFlashBang_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, flash, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, Sound, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, fadeOut_fadeOut_F8F7E0694655C7CD3FADBA9571137C96, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, fadeOut__Direction_F8F7E0694655C7CD3FADBA9571137C96, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, UnknownData_V60C, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, FadeOut, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaFlashBang_C, baseIntensity, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeaFlashBang_C, 0x035C);
		}

		// BlueprintGeneratedClass deaRaidCarSpawnPoint.deaRaidCarSpawnPoint_C
		TEST_METHOD(BlueprintGeneratedClass__deaRaidCarSpawnPoint__deaRaidCarSpawnPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidCarSpawnPoint_C, Cube, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidCarSpawnPoint_C, Sphere, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidCarSpawnPoint_C, Car_SUV, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeaRaidCarSpawnPoint_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeaRaidCarSpawnPoint_C, 0x0348);
		}

		// BlueprintGeneratedClass backpackRepr_Large.backpackRepr_Large_C
		TEST_METHOD(BlueprintGeneratedClass__backpackRepr_Large__backpackRepr_Large_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackRepr_Large_C, 0x0338);
		}

		// BlueprintGeneratedClass policeArchiveComputerBP.policeArchiveComputerBP_C
		TEST_METHOD(BlueprintGeneratedClass__policeArchiveComputerBP__policeArchiveComputerBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, RamaSave, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, StaticMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, pendriveSM, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, plantingSound, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, plantWidget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, pendrivePlanted, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, UnknownData_T4ZW, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, uploadTime, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, uploadTimer, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, keyHeldDown, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, UnknownData_J9XV, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, initialActionText, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, virusActionText, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, virusUploaded, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, UnknownData_PHF6, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceArchiveComputerBP_C, virusWidget, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceArchiveComputerBP_C, 0x04A8);
		}

		// BlueprintGeneratedClass psychedelicWeedJoe.psychedelicWeedJoe_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicWeedJoe__psychedelicWeedJoe_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicWeedJoe_C, UnknownData_UEFD, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicWeedJoe_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicWeedJoe_C, moneySafeRef, 0x0AE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicWeedJoe_C, 0x0AE8);
		}

		// BlueprintGeneratedClass ActiveBush_Flatland03.ActiveBush_Flatland03_C
		TEST_METHOD(BlueprintGeneratedClass__ActiveBush_Flatland03__ActiveBush_Flatland03_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActiveBush_Flatland03_C, 0x0348);
		}

		// BlueprintGeneratedClass planeManager.planeManager_C
		TEST_METHOD(BlueprintGeneratedClass__planeManager__planeManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneManager_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneManager_C, planeIntervalMin, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneManager_C, planeIntervalMax, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AplaneManager_C, 0x0348);
		}

		// BlueprintGeneratedClass BP_Swings_A.BP_Swings_A_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Swings_A__BP_Swings_A_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Swings_A_C, Swing_RIm_A, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Swings_A_C, Swing_HInges_A, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Swings_A_C, Swing_A, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Swings_A_C, SharedRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Swings_A_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass narratorSubtitlesWidget.narratorSubtitlesWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__narratorSubtitlesWidget__narratorSubtitlesWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UnarratorSubtitlesWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnarratorSubtitlesWidget_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnarratorSubtitlesWidget_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnarratorSubtitlesWidget_C, txtMonologue, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnarratorSubtitlesWidget_C, txtName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnarratorSubtitlesWidget_C, Duration, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnarratorSubtitlesWidget_C, 0x0234);
		}

		// BlueprintGeneratedClass BTTask_Bird_SetMovement_T0_Flying.BTTask_Bird_SetMovement_T0_Flying_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_SetMovement_T0_Flying__BTTask_Bird_SetMovement_T0_Flying_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_AreWeFlying_, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_AreWeWalking_, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_AreWePerched_, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, TimeToLand_, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_IsPerched_, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_IsLookingForPerch_, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_DoADownTrace_, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Flying_C, BBKey_FlyToPerch_, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_SetMovement_T0_Flying_C, 0x01E8);
		}

		// WidgetBlueprintGeneratedClass caughtOnSearchWidget.caughtOnSearchWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__caughtOnSearchWidget__caughtOnSearchWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcaughtOnSearchWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcaughtOnSearchWidget_C, Enter, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcaughtOnSearchWidget_C, txtInfo, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcaughtOnSearchWidget_C, 0x0220);
		}

		// BlueprintGeneratedClass WoodenBulletinDoubleMedium_BP.WoodenBulletinDoubleMedium_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodenBulletinDoubleMedium_BP__WoodenBulletinDoubleMedium_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, LampB, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, LampA, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, AddLamps, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, TurnOnLights, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, UnknownData_MQ9V, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, FaceMaterial1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinDoubleMedium_BP_C, FaceMaterial2, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodenBulletinDoubleMedium_BP_C, 0x0360);
		}

		// BlueprintGeneratedClass BP_Classic_Cupboard.BP_Classic_Cupboard_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Classic_Cupboard__BP_Classic_Cupboard_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Cupboard_C, SM_Classic_Cupboard_Drawer_3, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Cupboard_C, SM_Classic_Cupboard_Drawer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Cupboard_C, SM_Classic_Cupboard_Door_Right, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Cupboard_C, SM_Classic_Cupboard_Door_Left, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Classic_Cupboard_C, StaticMesh, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Classic_Cupboard_C, 0x0350);
		}

		// BlueprintGeneratedClass BP_Gas_Tank_Red.BP_Gas_Tank_Red_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Gas_Tank_Red__BP_Gas_Tank_Red_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Gas_Tank_Red_C, Gas_Tank_Red, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Gas_Tank_Red_C, 0x0330);
		}

		// BlueprintGeneratedClass ws_shelfModernMedium.ws_shelfModernMedium_C
		TEST_METHOD(BlueprintGeneratedClass__ws_shelfModernMedium__ws_shelfModernMedium_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_shelfModernMedium_C, 0x04C5);
		}

		// BlueprintGeneratedClass BP_TDE_Psylocybina.BP_TDE_Psylocybina_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Psylocybina__BP_TDE_Psylocybina_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Psylocybina_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Psylocybina_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Psylocybina_C, 0x04C0);
		}

		// BlueprintGeneratedClass psychedelicMinionNPC.psychedelicMinionNPC_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicMinionNPC__psychedelicMinionNPC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionNPC_C, UnknownData_22F8, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionNPC_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionNPC_C, gangManager, 0x0AE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicMinionNPC_C, 0x0AE8);
		}

		// BlueprintGeneratedClass drugConfusionCamShake.drugConfusionCamShake_C
		TEST_METHOD(BlueprintGeneratedClass__drugConfusionCamShake__drugConfusionCamShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdrugConfusionCamShake_C, 0x0160);
		}

		// WidgetBlueprintGeneratedClass weedSeedSelectWidget.weedSeedSelectWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__weedSeedSelectWidget__weedSeedSelectWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, progPlant, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, progressHolder, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, seedList, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, TextBlock_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, txtPlanting, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, seeds, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, SeedIDs, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, seedQuantity, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, SourceIndex, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, SourceGuid, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, backpack, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, showIndoor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, UnknownData_2ZN2, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, chosenIndex, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, actionHeld, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, UnknownData_RNIE, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, actionCounter, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, actionTime, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, UnknownData_4ELN, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UweedSeedSelectWidget_C, activeElementColor, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UweedSeedSelectWidget_C, 0x02E0);
		}

		// BlueprintGeneratedClass metalWicket02.metalWicket02_C
		TEST_METHOD(BlueprintGeneratedClass__metalWicket02__metalWicket02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AmetalWicket02_C, UnknownData_DWOT, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AmetalWicket02_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AmetalWicket02_C, 0x0538);
		}

		// BlueprintGeneratedClass garage4m01.garage4m01_C
		TEST_METHOD(BlueprintGeneratedClass__garage4m01__garage4m01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarage4m01_C, 0x0474);
		}

		// BlueprintGeneratedClass shopFactoryBartender.shopFactoryBartender_C
		TEST_METHOD(BlueprintGeneratedClass__shopFactoryBartender__shopFactoryBartender_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopFactoryBartender_C, 0x03E9);
		}

		// BlueprintGeneratedClass backpackMediumBP.backpackMediumBP_C
		TEST_METHOD(BlueprintGeneratedClass__backpackMediumBP__backpackMediumBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbackpackMediumBP_C, 0x05F5);
		}

		// BlueprintGeneratedClass weedStrain_AK420.weedStrain_AK420_C
		TEST_METHOD(BlueprintGeneratedClass__weedStrain_AK420__weedStrain_AK420_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedStrain_AK420_C, 0x05A0);
		}

		// WidgetBlueprintGeneratedClass selectedPackageWidget.selectedPackageWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__selectedPackageWidget__selectedPackageWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UselectedPackageWidget_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UselectedPackageWidget_C, 0x0210);
		}

		// BlueprintGeneratedClass fallDmgCamShake.fallDmgCamShake_C
		TEST_METHOD(BlueprintGeneratedClass__fallDmgCamShake__fallDmgCamShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UfallDmgCamShake_C, 0x0160);
		}

		// BlueprintGeneratedClass garbageBox2.garbageBox2_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBox2__garbageBox2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBox2_C, 0x05A8);
		}

		// BlueprintGeneratedClass tempMixerTacka.tempMixerTacka_C
		TEST_METHOD(BlueprintGeneratedClass__tempMixerTacka__tempMixerTacka_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempMixerTacka_C, UnknownData_I7P0, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempMixerTacka_C, UberGraphFrame, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempMixerTacka_C, mixModel, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempMixerTacka_C, mixModelMinScale, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempMixerTacka_C, mixModelMaxScale, 0x0854);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtempMixerTacka_C, 0x0858);
		}

		// WidgetBlueprintGeneratedClass labelEditWidget.labelEditWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__labelEditWidget__labelEditWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, btnCancel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, btnSave, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, colorList, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, colorPreview, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, editTextLabelName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, TextBlock_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, ParentContainer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, colorsAvailable, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, chosenColorIndex, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, nameLenLimit, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlabelEditWidget_C, activeElementsColor, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlabelEditWidget_C, 0x0298);
		}

		// BlueprintGeneratedClass BTService_Bird_Shuffle_SkyTarget_WhenNearCurrent.BTService_Bird_Shuffle_SkyTarget_WhenNearCurrent_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_Shuffle_SkyTarget_WhenNearCurrent__BTService_Bird_Shuffle_SkyTarget_WhenNearCurrent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_Shuffle_SkyTarget_WhenNearCurrent_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_Shuffle_SkyTarget_WhenNearCurrent_C, 0x00A0);
		}

		// AnimBlueprintGeneratedClass patrolPoliceAnimBP.patrolPoliceAnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__patrolPoliceAnimBP__patrolPoliceAnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, AnimGraphNode_Root_DB895B8D40C6106D8ECA8085CEC3503B, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, AnimGraphNode_BlendSpacePlayer_1046287642CA18E6E3A0FFA29E27F59D, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, AnimGraphNode_ModifyBone_84269B814A2ED43FF1D7A68D1287D7F4, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, AnimGraphNode_LocalToComponentSpace_984BD4024AD8C45EF6B659B5DCCA089E, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, AnimGraphNode_ComponentToLocalSpace_0F12084144E6BDBE24B743B9DC0A2D19, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpatrolPoliceAnimBP_C, headRot, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpatrolPoliceAnimBP_C, 0x0694);
		}

		// BlueprintGeneratedClass valWatch.valWatch_C
		TEST_METHOD(BlueprintGeneratedClass__valWatch__valWatch_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AvalWatch_C, 0x05A8);
		}

		// BlueprintGeneratedClass garbageCloth3.garbageCloth3_C
		TEST_METHOD(BlueprintGeneratedClass__garbageCloth3__garbageCloth3_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageCloth3_C, 0x05A8);
		}

		// BlueprintGeneratedClass waterBottleBP.waterBottleBP_C
		TEST_METHOD(BlueprintGeneratedClass__waterBottleBP__waterBottleBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwaterBottleBP_C, UberGraphFrame, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwaterBottleBP_C, 0x05B0);
		}

		// BlueprintGeneratedClass psychedelicMinionDialogue.psychedelicMinionDialogue_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicMinionDialogue__psychedelicMinionDialogue_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, UnknownData_MUGO, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, retrieveEnvelopeLines, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, allowBypass, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, UnknownData_PSN0, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, bypassDialOption, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, noBypassDialOption, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicMinionDialogue_C, gangManRef, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicMinionDialogue_C, 0x05C0);
		}

		// BlueprintGeneratedClass WoodenBulletinBracedSmall_BP.WoodenBulletinBracedSmall_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodenBulletinBracedSmall_BP__WoodenBulletinBracedSmall_BP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, panel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, FillA2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, FillA1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, LightA2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, LightA1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, LampA, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, Billboard, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, AddLamps, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, TurnOnLights, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, UnknownData_0QV2, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoodenBulletinBracedSmall_BP_C, FaceMaterial, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodenBulletinBracedSmall_BP_C, 0x0378);
		}

		// Class PacketHandler.HandlerComponentFactory
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// Class PacketHandler.NetAnalyticsAggregatorConfig
		TEST_METHOD(Class__PacketHandler__NetAnalyticsAggregatorConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// Class OnlineSubsystemUtils.IpConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_NNCF, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1978);
		}

		// Class OnlineSubsystemUtils.IpNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_B6LG, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_9Q5I, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_VQKH, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x06D8);
		}

		// Class OnlineSubsystemUtils.AchievementBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.AchievementQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_0PIY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0060);
		}

		// Class OnlineSubsystemUtils.AchievementWriteCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_7U5L, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0078);
		}

		// Class OnlineSubsystemUtils.ConnectionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_7TTD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0070);
		}

		// Class OnlineSubsystemUtils.CreateSessionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_FI97, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0090);
		}

		// Class OnlineSubsystemUtils.DestroySessionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_PR79, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0070);
		}

		// Class OnlineSubsystemUtils.EndMatchCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_GQZF, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0078);
		}

		// Class OnlineSubsystemUtils.EndTurnCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_10RH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0070);
		}

		// Class OnlineSubsystemUtils.FindSessionsCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_MFUP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0088);
		}

		// Class OnlineSubsystemUtils.FindTurnBasedMatchCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_5CY3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_C5UW, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_HM8I, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_68FV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// Class OnlineSubsystemUtils.JoinSessionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_XAQZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0128);
		}

		// Class OnlineSubsystemUtils.LeaderboardBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.LeaderboardFlushCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_08ZT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// Class OnlineSubsystemUtils.LeaderboardQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_SE5B, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// Class OnlineSubsystemUtils.LogoutCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_NEFL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// Class OnlineSubsystemUtils.OnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_ICM1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_NAIB, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0350);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_WH54, 0x0361);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x03A0);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_A489, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_A4I7, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0408);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0350);
		}

		// Class OnlineSubsystemUtils.OnlineEngineInterfaceImpl
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_CPHC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// Class OnlineSubsystemUtils.OnlinePIESettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_6QU8, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// Class OnlineSubsystemUtils.OnlineSessionClient
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_JEUE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_N5FI, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x0190);
		}

		// Class OnlineSubsystemUtils.PartyBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_1LJI, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_PG44, 0x0423);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0450);
		}

		// Class OnlineSubsystemUtils.PartyBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_13A9, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_Z45Z, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_8NMZ, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x03B8);
		}

		// Class OnlineSubsystemUtils.PartyBeaconState
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_14RZ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_7WWQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// Class OnlineSubsystemUtils.QuitMatchCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_LDFG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0070);
		}

		// Class OnlineSubsystemUtils.ShowLoginUICallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_CBSU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// Class OnlineSubsystemUtils.TestBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x03A0);
		}

		// Class OnlineSubsystemUtils.TestBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0350);
		}

		// Class OnlineSubsystemUtils.TurnBasedBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.VoipListenerSynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_PW87, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x05D0);
		}

		// Class RamaSaveSystem.RamaSaveComponent
		TEST_METHOD(Class__RamaSaveSystem__RamaSaveComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_PersistentActorUniqueID, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_LogPersistentActorGUID, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, UnknownData_UQB1, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_SaveTags, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, ActorStreamingLevel, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_ShouldLoadActorWorldPosition, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_ShouldSaveActor, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, DestroyBeforeLoad, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, UnknownData_NH0E, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_OwningActorVarsToSave, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_ComponentVarsToSave, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_VerboseLog, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_LogAllSavedComponentProperties, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSave_SavePhysicsData, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, UnknownData_OGQB, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSaveEvent_ActorFullyLoaded, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSaveEvent_PreSave, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSaveEvent_PreLoadDestroy, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, RamaSaveEvent_PlayerLoaded, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, LoadedGameVersion, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, UnknownData_36X0, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, OwningActorTransform, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveComponent, UnknownData_047O, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URamaSaveComponent, 0x0200);
		}

		// Class RamaSaveSystem.RamaSaveEngine
		TEST_METHOD(Class__RamaSaveSystem__RamaSaveEngine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, RamaSaveComponents, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, SaveOnlyActorsWithTags, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, AsyncUnits, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, UnknownData_0DXO, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, LoadParams, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, UnknownData_2TYP, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, Load_StreamingLevels, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARamaSaveEngine, UnknownData_JGM2, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARamaSaveEngine, 0x03C0);
		}

		// Class RamaSaveSystem.RamaSaveLibrary
		TEST_METHOD(Class__RamaSaveSystem__RamaSaveLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URamaSaveLibrary, 0x0028);
		}

		// Class RamaSaveSystem.RamaSaveObject
		TEST_METHOD(Class__RamaSaveSystem__RamaSaveObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveObject, GameVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveObject, UnknownData_ZNK1, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URamaSaveObject, 0x0030);
		}

		// Class RamaSaveSystem.RamaSaveSystemSettings
		TEST_METHOD(Class__RamaSaveSystem__RamaSaveSystemSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, GameVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, UnknownData_L8NT, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, RamaSaveEngineBP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, RemappedVariablesAndClasses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, SaveAllPropertiesMarkedAsSaveGame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, AsyncSave, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, UnknownData_IX3H, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, AsyncSaveTickInterval, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, AsyncSaveActorChunkSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, Saving_PerformObjectValidityChecks, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, Loading_GlobalVerboseLogging, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, Loading_GlobalDisablePhysicsLoad, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, LogSavingAndLoadingOfEachStaticDataProperty, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, LogLoadedActorClassPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URamaSaveSystemSettings, UnknownData_XFJ0, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URamaSaveSystemSettings, 0x0070);
		}

		// Class RamaSaveSystem.RamaSaveUtility
		TEST_METHOD(Class__RamaSaveSystem__RamaSaveUtility)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URamaSaveUtility, 0x0028);
		}

		// Class GeometryCacheTracks.MovieSceneGeometryCacheSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0108);
		}

		// Class GeometryCacheTracks.MovieSceneGeometryCacheTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0068);
		}

		// WidgetBlueprintGeneratedClass saveLoadWidget.saveLoadWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__saveLoadWidget__saveLoadWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, btnAddSlot, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, btnClose, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, btnConfirmCancel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, btnConfirmOK, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, ConfirmPanel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, Image_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, Image_4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, inputSaveName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, scrolledList, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, SlotListing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, TextBlock_5, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, txtConfirmDesc, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, txtConfirmTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, txtNoLoad, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, txtSaveLoadDesc, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, txtSaveLoadTitle, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, SaveGame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, UnknownData_ZXC5, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, saveObject, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, clickedSlotID, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, UnknownData_MFZK, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, loadingScreen, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, loadFromMenu, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, UnknownData_GGTX, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, saveStation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, activeElementsColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaveLoadWidget_C, MaxSaveSlots, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsaveLoadWidget_C, 0x02FC);
		}

		// WidgetBlueprintGeneratedClass AppManageList.AppManageList_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__AppManageList__AppManageList_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, eqList, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, furnitureList, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, TextBlock_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, TextBlock_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, txtPrice, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, EmptyText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, StoredIndexes, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, ListContentChanged, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, StoredIndexesQuan, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, SaleList, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, ShipList, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, UnknownData_BBSA, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, AppartmentRef, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, txtPrice_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, PlayerCanAfford, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, UnknownData_X8EH, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageList_C, MemPayload, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppManageList_C, 0x02B0);
		}

		// BlueprintGeneratedClass gangManager.gangManager_C
		TEST_METHOD(BlueprintGeneratedClass__gangManager__gangManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, RamaSave, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, keijiUnlocked, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, ballenaUnlocked, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, keijiVisited, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, ballenaVisited, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, UnknownData_ATDB, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, keijiManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, ballenaManager, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, dayTimeCon, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, curOrderPackageSize, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, curOrderPackageQuantity, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, curOrderPackageQuality, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, nextOrderCountdown, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, awaitingOrder, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, UnknownData_FU1O, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, curOrderDrugID, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, curOrderDeliveryDay, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, UnknownData_U6YQ, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, selectedDrop, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, curOrderTaskID, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, dropTestPositive, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, UnknownData_7G0Z, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, orderFinaliseTaskID, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, gangOrderIntervalMin, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, gangOrderIntervalMax, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, keijiPricePerGram, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, ballenaPricePerGram, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, gangSatisfaction, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, blockNewOrder, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, UnknownData_YIVN, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, gangSatisfactionMax, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgangManager_C, gangLevel, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgangManager_C, 0x03BC);
		}

		// WidgetBlueprintGeneratedClass AppManageShippmentListItem.AppManageShippmentListItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__AppManageShippmentListItem__AppManageShippmentListItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, ApIcon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, btnChose, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, txtApName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, txtArea, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, AppartmentDatabase, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, NewVar_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, appModeWidget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, ShipAppartment, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, ToolTip, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageShippmentListItem_C, AppNam, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppManageShippmentListItem_C, 0x0288);
		}

		// WidgetBlueprintGeneratedClass cheatManagerWidget.cheatManagerWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__cheatManagerWidget__cheatManagerWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnCarWynajmu, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnHardcoreMode, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnLaundered, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnLaunderPool, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnProfileStart, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnSctivateSave, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnSpamBlockades, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnSpawnBlockade, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnUnlockBallena, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, btnUnlockKeiji, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_6, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_7, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_8, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_9, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_10, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_11, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_14, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_15, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_16, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_17, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_18, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Button_19, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, Image_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, txtTimeMult, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, allFurniture, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, allEquipment, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, weedEquipment, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, FurnitureExclude, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, DayTime, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcheatManagerWidget_C, PoliceNow, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcheatManagerWidget_C, 0x0341);
		}

		// WidgetBlueprintGeneratedClass AppManageListItem.AppManageListItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__AppManageListItem__AppManageListItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, TextBlock_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, TextBlock_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, Data, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, Index, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, UnknownData_QFQ0, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, SourceList, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppManageListItem_C, Quantity, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppManageListItem_C, 0x029C);
		}

		// WidgetBlueprintGeneratedClass settingsWidget.settingsWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__settingsWidget__settingsWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnAudio, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnCancel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnChangeColor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnControls, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnDiffCasual, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnDiffHard, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnDiffNormal, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnGame, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnGraphics, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputAction, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputCrouch, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputForward, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputJump, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputLeanLeft, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputLeanRight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputMap, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputMoveBack, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputMoveLeft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputMoverRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputSprint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnInputWait, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, btnSaveSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, chckAudioBinaural, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, chckNightMusic, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, chckSubtitles, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, checkInvertMouse, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, colorBind, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, colorSelectWidget, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, diffBtnHolder, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, difficultyLine, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, gameComboLanguage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboAAMethod, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboAAQuality, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboDetails, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboDisplayMode, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboEffects, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboMotionBlur, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboPostProcess, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboResolution, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboShadows, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboTextures, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphComboVsync, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, HorizontalBox_3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, Image_1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, Image_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, Image_3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, imgHudActiveColor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, keySelector, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, settingTabs, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, sliderDialVol, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, sliderEffectVol, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, sliderFov, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, sliderMusicVol, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, sliderSensitivity, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtFovVal, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputAction, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputCrouch, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputJump, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputLeanLeft, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputLeanRight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputMap, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputMoveBack, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputMoveForward, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputMoveLeft, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputSprint, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtInputWait, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, txtnputMoveRight, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, inactiveTabOpc, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, resolutionsPopulated, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UnknownData_V3SG, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, pauseMenu, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, chosenTabColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, inactiveTabColor, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, ChosenDifficulty, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, audioChanged, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, graphicsChanged, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, resolutionChanged, 0x045B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, gameChanged, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, controlsChanged, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UnknownData_F7LZ, 0x045E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, audioDialogueLines, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, audioDialogueID, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, defDifficulty, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UnknownData_QSPZ, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, defMusic, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, defDialogues, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, defSoundFX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, defSubtitles, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, officialVersion, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UnknownData_RWJ7, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, DefaultFOV, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, fovRange, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, awaitingInput, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UnknownData_C1AF, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, InputActionName, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, awaitedIsAxis, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, UnknownData_H66W, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, awaitedAxisScale, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsettingsWidget_C, curSettingsColor, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsettingsWidget_C, 0x04D0);
		}

		// BlueprintGeneratedClass deadDropFixer.deadDropFixer_C
		TEST_METHOD(BlueprintGeneratedClass__deadDropFixer__deadDropFixer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropFixer_C, Box, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropFixer_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdeadDropFixer_C, Extent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdeadDropFixer_C, 0x0344);
		}

		// BlueprintGeneratedClass PM_FindWayHome.PM_FindWayHome_C
		TEST_METHOD(BlueprintGeneratedClass__PM_FindWayHome__PM_FindWayHome_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_FindWayHome_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_FindWayHome_C, 0x00A8);
		}

		// BlueprintGeneratedClass psychedelicDoorNPC.psychedelicDoorNPC_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicDoorNPC__psychedelicDoorNPC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicDoorNPC_C, UnknownData_TWV2, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicDoorNPC_C, UberGraphFrame, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicDoorNPC_C, psychDoorRef, 0x0AE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicDoorNPC_C, 0x0AE8);
		}

		// WidgetBlueprintGeneratedClass skillLevelWidget.skillLevelWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__skillLevelWidget__skillLevelWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, skillUpgrade, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, btnUpgrade, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, CanvasPanel_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, progLevel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, txtButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, txtNex, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, txtNextLevelCost, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, txtSkillNam, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, SkillName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, SkillDescription, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, isSegmentSkill, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, UnknownData_SD65, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, SkillID, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, skillLevel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, skillMaxLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, baseCostPoints, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, costPoints, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, skillUpgradeAmount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, UnknownData_CIC1, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskillLevelWidget_C, activeElementsColor, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UskillLevelWidget_C, 0x02C8);
		}

		// BlueprintGeneratedClass policeManager.policeManager_C
		TEST_METHOD(BlueprintGeneratedClass__policeManager__policeManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, spawnChecker, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, RamaSave, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, patrolLeads, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, unassignedAreas, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, allPatrolAreas, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, patrolRequestInProgress, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, UnknownData_00HC, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, requestQuery, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, playerLastKnownLocation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, playerLastKnownDirection, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, radioWaveFiles, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, curRadioWave, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, maxBackupCallDistance, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, minPatrolsTotal, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, maxPatrolsTotal, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, minPatrolsPoliceHours, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, maxPatrolsCurrent, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, unlockPatrolSpawning, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, UnknownData_90WA, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, spawnIDLastNum, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, spawnDogPatrols, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, UnknownData_D28Z, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, spawnInterval, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, playerMinDistance, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, UnknownData_DAHW, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, penaltyQueueReasons, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, penaltyQueueAmounts, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, penaltyQueueDrugs, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, drugsFound, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, UnknownData_TO72, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, foundGramsTotal, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, penaltyDisplayQueueReasons, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, penaltyDisplayQueueAmounts, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, drugQuanPenaltyNam, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, lastLeashID, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceManager_C, CheatPoliceBlinded, 0x046C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceManager_C, 0x046D);
		}

		// BlueprintGeneratedClass qaHashKey.qaHashKey_C
		TEST_METHOD(BlueprintGeneratedClass__qaHashKey__qaHashKey_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UqaHashKey_C, UberGraphFrame, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UqaHashKey_C, hashString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UqaHashKey_C, 0x0040);
		}

		// BlueprintGeneratedClass tempInfiniteDrugSource.tempInfiniteDrugSource_C
		TEST_METHOD(BlueprintGeneratedClass__tempInfiniteDrugSource__tempInfiniteDrugSource_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempInfiniteDrugSource_C, UnknownData_3MOG, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempInfiniteDrugSource_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtempInfiniteDrugSource_C, DataTable, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtempInfiniteDrugSource_C, 0x0508);
		}

		// Class MRMesh.MeshReconstructorBase
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// Class MRMesh.MRMeshComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_UVS6, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_0E39, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x05A0);
		}

		// BlueprintGeneratedClass baseMap.baseMap_C
		TEST_METHOD(BlueprintGeneratedClass__baseMap__baseMap_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseMap_C, UberGraphFrame, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbaseMap_C, 0x0338);
		}

		// BlueprintGeneratedClass containerBase.containerBase_C
		TEST_METHOD(BlueprintGeneratedClass__containerBase__containerBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, InventoryComponent, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, RamaSave_1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, Items, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, itemQuantity, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, itemContents, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, itemsSearchProgress, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, openSound, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, closeSound, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, IsOpen, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, UnknownData_FXHD, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, itemMaxSize, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, itemMaxWeight, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, curItemSize, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, curItemWeight, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, containerRefID, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, respawned, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, SlowLooting, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, UnknownData_UNSS, 0x04AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, LootingSound, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, AcceptedCategories, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, DisableDrop, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, UnknownData_B86L, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, DeclinedCategories, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, ContainerGuid, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainerBase_C, isCashSafe, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcontainerBase_C, 0x04F1);
		}

		// BlueprintGeneratedClass garbageBox.garbageBox_C
		TEST_METHOD(BlueprintGeneratedClass__garbageBox__garbageBox_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgarbageBox_C, 0x05A8);
		}

		// BlueprintGeneratedClass hangingCabinetLargeBP.hangingCabinetLargeBP_C
		TEST_METHOD(BlueprintGeneratedClass__hangingCabinetLargeBP__hangingCabinetLargeBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhangingCabinetLargeBP_C, 0x04F1);
		}

		// BlueprintGeneratedClass decoModernBed.decoModernBed_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernBed__decoModernBed_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernBed_C, 0x0446);
		}

		// BlueprintGeneratedClass labDryerBig.labDryerBig_C
		TEST_METHOD(BlueprintGeneratedClass__labDryerBig__labDryerBig_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlabDryerBig_C, 0x07DC);
		}

		// BlueprintGeneratedClass pillMakerSmallBP.pillMakerSmallBP_C
		TEST_METHOD(BlueprintGeneratedClass__pillMakerSmallBP__pillMakerSmallBP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApillMakerSmallBP_C, 0x07D8);
		}

		// BlueprintGeneratedClass ContainerSafeLarge.ContainerSafeLarge_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerSafeLarge__ContainerSafeLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerSafeLarge_C, 0x04F1);
		}

		// BlueprintGeneratedClass decoPicture_02.decoPicture_02_C
		TEST_METHOD(BlueprintGeneratedClass__decoPicture_02__decoPicture_02_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoPicture_02_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_AS_THCSativa.BP_AS_THCSativa_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AS_THCSativa__BP_AS_THCSativa_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AS_THCSativa_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AS_THCSativa_C, 0x03F0);
		}

		// BlueprintGeneratedClass BP_TDE_Alkaloid.BP_TDE_Alkaloid_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TDE_Alkaloid__BP_TDE_Alkaloid_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Alkaloid_C, UberGraphFrame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TDE_Alkaloid_C, DefaultSceneRoot, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TDE_Alkaloid_C, 0x04C0);
		}

		// WidgetBlueprintGeneratedClass saleAreaManagementWidget.saleAreaManagementWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__saleAreaManagementWidget__saleAreaManagementWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, btnChangeSpray, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_4, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_5, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_7, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_8, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_9, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_10, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_11, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_12, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_13, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_14, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_15, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_16, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_17, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_18, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_19, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_20, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, Image_21, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, mainMap, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_6, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_14, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_15, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_16, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_17, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_18, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_19, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_20, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_21, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_22, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_23, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_24, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsaleAreaManagementWidget_C, saleAreaManageMarker_C_1, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsaleAreaManagementWidget_C, 0x0360);
		}

		// WidgetBlueprintGeneratedClass shadyCommContactWidget.shadyCommContactWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__shadyCommContactWidget__shadyCommContactWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, arrestCover, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, avatar, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, blackRibon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, dealerLevelPanel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, expProgress, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, TextBlock_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, txtAreaNam, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, txtDealerLevel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, txtNewMessages, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, txtUsername, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, unreadMarker, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, userBgActive, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, UserID, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, active, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, UnknownData_VWWE, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, parentRef, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactWidget_C, IsArrested, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UshadyCommContactWidget_C, 0x0281);
		}

		// BlueprintGeneratedClass doorBase.doorBase_C
		TEST_METHOD(BlueprintGeneratedClass__doorBase__doorBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOverlapTester, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorFrameMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorAudio, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, RamaSave, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, overlapBlocker, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOverlap, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorArea, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorWingModel, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, Timeline_0_pos_05B10EA04CC23697A48C67BA150080AD, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, Timeline_0_angle_05B10EA04CC23697A48C67BA150080AD, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, Timeline_0__Direction_05B10EA04CC23697A48C67BA150080AD, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_SE0K, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, Timeline_1, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOpening_pos_33D0B1B746672166CA9386900762D045, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOpening_angle_33D0B1B746672166CA9386900762D045, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOpening__Direction_33D0B1B746672166CA9386900762D045, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_GXQR, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOpening, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorWingPosition, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, autoClose, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_CISZ, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, autoCloseDelay, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorIsOpen, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorMoving, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_IVG1, 0x04B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorDirectionMultiplier, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorClosing, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_IOQP, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOverlapSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorLocked, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_C1WF, 0x04CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, keyID, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, canBreach, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, canLockpick, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_5JOP, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, lockpickDifficulty, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorBreachHealth, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorBreachHealthCurrent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_NADX, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, frameMesh, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, frameMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, newLockpickDifficulty, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, replaceDuplicates, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, UnknownData_PPM6, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, foundDuplicates, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorOpenSound, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorCloseSound, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, doorForceSound, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, resetLockpick, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorBase_C, neverLock, 0x0529);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorBase_C, 0x052A);
		}

		// Class Foliage.FoliageInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_N3Z5, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x0790);
		}

		// Class Foliage.FoliageStatistics
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// Class Foliage.FoliageType
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DJFU, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_5HZ7, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0L4Q, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TNU9, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0KMG, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E6J6, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WN85, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YUZ7, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NGCL, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TGW4, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E2MX, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_K94N, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_B8KS, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_R87N, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_C0OG, 0x034E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0350);
		}

		// Class Foliage.FoliageType_InstancedStaticMesh
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0370);
		}

		// Class Foliage.InstancedFoliageActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_E1CK, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0378);
		}

		// Class Foliage.InteractiveFoliageActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_P1B9, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0398);
		}

		// Class Foliage.InteractiveFoliageComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x05F0);
		}

		// Class Foliage.ProceduralFoliageBlockingVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0368);
		}

		// Class Foliage.ProceduralFoliageComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_FEAO, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x0118);
		}

		// Class Foliage.ProceduralFoliageSpawner
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_3YXR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, bNeedsSimulation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_JZFC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0070);
		}

		// Class Foliage.ProceduralFoliageTile
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_BBOM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_LS5S, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// Class Foliage.ProceduralFoliageVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0368);
		}

		// BlueprintGeneratedClass decorativeFurniture.decorativeFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__decorativeFurniture__decorativeFurniture_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecorativeFurniture_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecorativeFurniture_C, Box, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecorativeFurniture_C, RamaSave, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecorativeFurniture_C, timeBoostVal, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecorativeFurniture_C, respawned, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecorativeFurniture_C, ToggledOn, 0x0445);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecorativeFurniture_C, 0x0446);
		}

		// BlueprintGeneratedClass decoHangingHousePlant2.decoHangingHousePlant2_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant2__decoHangingHousePlant2_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant2_C, 0x0446);
		}

		// BlueprintGeneratedClass drugWorkStation.drugWorkStation_C
		TEST_METHOD(BlueprintGeneratedClass__drugWorkStation__drugWorkStation_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, eqOverlapp, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, RamaSave, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, drugStationUI, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, equipmentMode, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, drugPlaceMode, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, UnknownData_ULDW, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, lineTracePoint, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, drugPackageGizmo, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, lineTraceVector, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, canPlaceHere, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, hitIsWorkStation, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, hitIsFloor, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, UnknownData_QXAA, 0x046F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, equipmentGizmo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, parentAppartment, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, focusedStation, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, gizmoRotateSpeed, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, defGizmoRotation, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, curSelectedSubstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, hasSelectedSubstance, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, UnknownData_E35U, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, actionKeyName, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, objectsOnStation, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdrugWorkStation_C, respawned, 0x04C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdrugWorkStation_C, 0x04C5);
		}

		// BlueprintGeneratedClass streamMapLoader.streamMapLoader_C
		TEST_METHOD(BlueprintGeneratedClass__streamMapLoader__streamMapLoader_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, TextRender, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, defSize, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, UnknownData_VUTJ, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, streamLevelName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreamMapLoader_C, disable, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreamMapLoader_C, 0x0359);
		}

		// BlueprintGeneratedClass psychedelicGangManager.psychedelicGangManager_C
		TEST_METHOD(BlueprintGeneratedClass__psychedelicGangManager__psychedelicGangManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, gangIsUnlocked, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_WUJH, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, gangPricePerGramWeed, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, gangQuestAccomplishedLevel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, gangIsTrusted, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_P7MY, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, deliveredNotesCount, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_WX1A, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, doorDialogueRef, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, gangDoorRef, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, contactGuyIndex, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_RH2U, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, envelopeData, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, envelopeInDrop, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_Q9F9, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, nextDropInterval, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, nextDropCountdown, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, curMemDropIndex, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, archiveDoorRef, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, archiveWicketRef, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, flashDriveSpawnRef, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, flashPickedUp, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_NG4Q, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, curEnvelopeTaskID, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, checkDetailsTaskID, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, virusTaskID, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, documentsTaskID, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, virusWasUploaded, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, playerInformedAboutGang, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_KUPC, 0x04BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, timesAskedAround, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, UnknownData_XH8M, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, usedDropList, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, ratDropsLeft, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApsychedelicGangManager_C, flashRefs, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApsychedelicGangManager_C, 0x04F8);
		}

		// BlueprintGeneratedClass baseNPC.baseNPC_C
		TEST_METHOD(BlueprintGeneratedClass__baseNPC__baseNPC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, Influence, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, RamaSave, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SM_LeftHand, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SM_RightHand, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SK_Head, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SK_Hair, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SK_Eyeglasses, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, Glove, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SK_Chest, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, SK_Hat, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, curDialogue, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, characterName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, characterSurname, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, characterFullName, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, initialRotationLook, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, needsDrugs, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_XMIP, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsDemanded, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsDemandedID, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsDemandedQuantity, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsExpectedPrices, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, npcInventory, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, npcInventoryQuantities, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, npcInventoryPrices, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, shopOwner, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_CHVW, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, shopReference, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, eqShopReference, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, curTaskID, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, OrderId, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, isAgent, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, isDealer, 0x0889);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_BVT2, 0x088A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsUsed, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsUsedPriceMax, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsUsedAddicion, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsUsedOrderMin, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugsUsedOrderMax, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, saleMarker, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugReceived, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugReceivedQuantity, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_48PK, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, drugExpected, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, deliveryTimeCounter, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, deliveryTimeResign, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, clientRiskFactor, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, clientExpectationLevel, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, HatEquipped, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, GlovesEquipped, 0x0A61);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, Refresh, 0x0A62);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_4VMB, 0x0A63);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, curRotationRate, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, lastZRot, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, goingHome, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_SHR3, 0x0A75);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, lastChosenHomePoint, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, reachHomeLimit, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, saleSuccessfull, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, isStreetPerson, 0x0A89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, StandStill, 0x0A8A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, inDialogue, 0x0A8B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, HeadRotMem, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, clientLooks, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, hasLooksSet, 0x0AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, cashDelivery, 0x0AAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, UnknownData_BXPY, 0x0AAE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, baseReputationDeliveryTime, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, firstArea, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, isMale, 0x0AB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, tutorialClient, 0x0AB6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, notFar, 0x0AB7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, salesManager, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, deliveryResignAdd, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, waitTimeWeatherMultiplier, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, rainWaitInfluenceMax, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, stormWaitInfluenceMax, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbaseNPC_C, waitMultiplierMax, 0x0AD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbaseNPC_C, 0x0AD4);
		}

		// BlueprintGeneratedClass DmgTypeBP_Environmental.DmgTypeBP_Environmental_C
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// BlueprintGeneratedClass stream_twoTowers_farDetail.stream_twoTowers_farDetail_C
		TEST_METHOD(BlueprintGeneratedClass__stream_twoTowers_farDetail__stream_twoTowers_farDetail_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_twoTowers_farDetail_C, 0x0330);
		}

		// BlueprintGeneratedClass stream_oldMarket_furnitureStore.stream_oldMarket_furnitureStore_C
		TEST_METHOD(BlueprintGeneratedClass__stream_oldMarket_furnitureStore__stream_oldMarket_furnitureStore_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Astream_oldMarket_furnitureStore_C, 0x0330);
		}

		// BlueprintGeneratedClass saleAreaManager.saleAreaManager_C
		TEST_METHOD(BlueprintGeneratedClass__saleAreaManager__saleAreaManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaStrings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaDisplayName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaExposure, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaExposureAdd, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaClampExposure, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaUnlocked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaAvailable, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaUnlockLevel, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaNumSpraySymbols, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaApartmentBoost, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaUnlockArea, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaUnlockExposureMin, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaClientsMax, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, SaleAreaDealersMax, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaRespMultiplier, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, exposureMaxLevel, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, exposureDropPerSecond, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, exposureClampPerSymbol, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, exposureDropMultiplier, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, areaManagingActive, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, UnknownData_SCK0, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, areasUnlocked, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, respRaiseDisplayList, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, respRaiseDisplayStrings, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaRespectBoost, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaRespectDropBoost, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaExpBoost, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaClientMaxBoost, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaOrderBoost, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaClientAverage, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsaleAreaManager_C, saleAreaDisplayedAvailable, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsaleAreaManager_C, 0x04E0);
		}

		// BlueprintGeneratedClass FactoryGateDoor.FactoryGateDoor_C
		TEST_METHOD(BlueprintGeneratedClass__FactoryGateDoor__FactoryGateDoor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryGateDoor_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryGateDoor_C, Box, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryGateDoor_C, SM_DoorC, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryGateDoor_C, Arrow, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryGateDoor_C, telPoint, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryGateDoor_C, OtherDoor, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactoryGateDoor_C, 0x0458);
		}

		// BlueprintGeneratedClass Factory_01_03.Factory_01_03_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_01_03__Factory_01_03_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh127, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh126, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh125, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh124, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh123, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh122, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh121, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh120, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh119, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh118, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh117, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh116, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh115, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh114, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh113, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh112, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh111, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh110, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh109, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh108, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh107, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh106, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh105, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh104, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh103, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh102, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh101, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh100, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh99, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh98, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh97, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh96, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh95, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh94, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh93, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh92, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh91, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh90, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh89, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh88, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh87, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh86, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh85, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh84, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh83, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh82, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh81, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh80, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh79, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh78, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh77, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh76, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh75, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh74, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh73, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh72, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh71, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh70, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh69, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh68, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh67, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh66, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh65, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh64, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh63, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh62, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh61, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh60, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh59, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh58, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh57, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh56, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh55, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh54, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh53, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh52, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh51, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh50, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh49, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh48, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh47, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh46, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh45, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh44, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh43, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh42, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh41, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh40, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh39, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh38, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh37, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh36, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh35, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh34, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh33, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh32, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh31, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh30, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh29, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh28, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh27, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh26, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh25, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh24, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh23, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh22, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh21, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh20, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh19, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh18, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh17, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh16, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh15, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh14, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh13, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh12, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh11, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh10, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh9, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh8, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh7, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh6, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh5, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh4, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh3, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh2, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh1, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_01_03_C, StaticMesh, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_01_03_C, 0x0730);
		}

		// WidgetBlueprintGeneratedClass policeHoursCounterWidget.policeHoursCounterWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__policeHoursCounterWidget__policeHoursCounterWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, policeHoursEnd, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, policeHoursStart, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, Enter, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, TextBlock_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, txtHeader, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, txtPoliceHours, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, txtTimer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, dayTimeCon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, policeHour, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, policeHours, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, UnknownData_WGZ0, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceHoursCounterWidget_C, policeHourLift, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpoliceHoursCounterWidget_C, 0x025C);
		}

		// BlueprintGeneratedClass Factory_04_01_closed.Factory_04_01_closed_C
		TEST_METHOD(BlueprintGeneratedClass__Factory_04_01_closed__Factory_04_01_closed_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh143, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh142, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh141, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh140, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh139, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh138, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh137, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh136, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh135, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh134, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh133, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh132, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh131, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh130, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh129, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh128, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh127, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh126, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh125, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh124, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh123, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh122, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh121, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh120, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh119, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh118, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh117, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh116, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh115, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh114, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh113, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh112, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh111, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh110, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh109, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh108, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh107, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh106, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh105, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh104, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh103, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh102, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh101, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh100, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh99, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh98, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh97, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, Scene, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh96, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh95, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh93, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh91, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh90, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh89, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh88, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh87, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh86, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh85, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh84, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh83, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh82, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh81, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh80, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh79, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh78, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh77, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh76, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh75, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh74, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh73, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh72, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh71, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh70, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh69, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh68, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh67, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh66, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh65, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh64, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh63, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh62, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh61, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh60, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh59, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh58, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh57, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh56, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh55, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh54, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh53, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh52, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh51, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh47, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh45, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh43, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh42, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh41, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh40, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh39, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh38, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh37, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh36, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh35, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh34, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh33, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh32, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh31, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh30, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh29, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh28, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh27, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh26, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh25, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh24, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh23, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh22, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh21, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh20, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh19, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh18, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh17, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh16, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh15, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh14, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh13, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh12, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh11, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh10, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh9, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh8, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh7, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh6, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh5, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh4, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh3, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh2, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh1, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactory_04_01_closed_C, StaticMesh, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactory_04_01_closed_C, 0x0778);
		}

		// BlueprintGeneratedClass FactoryIndoor_02_01.FactoryIndoor_02_01_C
		TEST_METHOD(BlueprintGeneratedClass__FactoryIndoor_02_01__FactoryIndoor_02_01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh47, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh46, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh45, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh44, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh43, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh42, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh41, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh40, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh39, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh38, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh37, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh36, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh35, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh34, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh33, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh32, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh31, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh30, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh29, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh28, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh27, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh26, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh25, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh24, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh23, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh22, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh21, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh20, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh19, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh18, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh17, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh16, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh15, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh14, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh13, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh12, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh11, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh10, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh9, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh8, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh7, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh6, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh5, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh4, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh3, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMesh, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent084, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, ParticleSystemComponent0, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent083, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent082, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent081, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent079, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent078, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent077, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent076, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent075, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent074, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent073, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent068, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent067, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent066, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent065, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent064, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent063, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent062, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent061, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent060, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent059, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent058, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent057, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent056, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent055, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent054, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent053, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent052, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent051, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent050, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent049, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent048, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent047, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent045, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent044, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent043, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent042, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent041, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent040, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent039, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent038, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent037, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent035, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent034, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent033, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent032, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent031, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent030, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent029, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent028, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent027, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent026, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent025, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent024, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent023, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent022, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent021, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent020, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent019, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent018, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent017, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent016, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent015, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent014, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent013, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent012, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent011, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent010, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent09, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent08, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent07, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent06, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent05, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent04, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent03, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent02, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent01, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, StaticMeshComponent0, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFactoryIndoor_02_01_C, SharedRoot, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFactoryIndoor_02_01_C, 0x0728);
		}

		// WidgetBlueprintGeneratedClass workStationSubstanceAddWidget.workStationSubstanceAddWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__workStationSubstanceAddWidget__workStationSubstanceAddWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, enterAnim, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, btnAdd, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, btnCancel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, spinBoxOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, TextBlock_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, TextBlock_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, txtTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, Substance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, Equipment, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, selectedQuantity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, UnknownData_6FH4, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, substanceNameMem, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, eqIsMixer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, UnknownData_KSRM, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, substanceToAdd, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, SubstanceToAddMixProp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, tempFloat, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, NewVar_1, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, tempString, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, tempInt, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, tempInt2, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, NewVar_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, NewVar_3, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, chujCiWDupe, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, UnknownData_FKR8, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UworkStationSubstanceAddWidget_C, activeElementsColor, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UworkStationSubstanceAddWidget_C, 0x03D8);
		}

		// BlueprintGeneratedClass npcPharmacist.npcPharmacist_C
		TEST_METHOD(BlueprintGeneratedClass__npcPharmacist__npcPharmacist_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AnpcPharmacist_C, UnknownData_GGLF, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AnpcPharmacist_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnpcPharmacist_C, 0x0AE0);
		}

		// BlueprintGeneratedClass trainTrackSpline.trainTrackSpline_C
		TEST_METHOD(BlueprintGeneratedClass__trainTrackSpline__trainTrackSpline_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainTrackSpline_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainTrackSpline_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtrainTrackSpline_C, 0x0338);
		}

		// BlueprintGeneratedClass gateRefreshManager.gateRefreshManager_C
		TEST_METHOD(BlueprintGeneratedClass__gateRefreshManager__gateRefreshManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, timeHourMorningReset, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, timeHourEveningReset, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, resetProbability, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, playerLocation, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, allDoors, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AgateRefreshManager_C, playerMinDistance, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AgateRefreshManager_C, 0x0364);
		}

		// BlueprintGeneratedClass BP_NPC_Crow.BP_NPC_Crow_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NPC_Crow__BP_NPC_Crow_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NPC_Crow_C, 0x07E4);
		}

		// AnimBlueprintGeneratedClass Seagull_AnimationBlueprint.Seagull_AnimationBlueprint_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Seagull_AnimationBlueprint__Seagull_AnimationBlueprint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_Root_43C3796E4F6C720A0D48718B81E8D449, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_E70F621F48CC434FD5A948ACA62827F9, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_5BDDAE6A40B3752BFFE422AE0CD642C7, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_DD2124D5451E8FEF69E6C0B2DA571F4E, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_7E2D553E48B3CAF2704DFFBA43A4B67E, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_E4F4723F4662E410E0BB9DB10104210B, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_E412BDCB404144188E65ECA3ED87398C, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_373D43DC449FC143837D25A62F5F6F31, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_FA6E0766455A11F6BA6D54B6CB0D812F, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_D195B1FF4E4E726BBFEBF5BA1DF7A0F8, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_0312F45046AD8C0C3BA17BB31C935E73, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_843E7F5447AE44349A896F99E3376E09, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_D3951D6B4F3948CA09635ABA693A5B09, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_TransitionResult_89E340014CAB49713E19C6A16ACCB63C, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_81AF364A48A9BD8042F359ACFE73342B, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_91CA87FB48F51E6C6F493B9BBFE02F70, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_5491A60C47D1EC67B8426E860D6ADEA6, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_B92AF0D5480CE2A36AC6859321BA7FB6, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_0F6853E247409F17B081418625AD5437, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_35BE5C9241993779911D4C8DD2D8B1A6, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_CB0DEE46491E834CCEA6A892B55894FE, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_BlendListByInt_85473F0A4FD880EC4878C4AE83C6B14A, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_715A0E8F4C21D0C7728DA2AC621A39F0, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_BlendListByInt_71FB2BCD4A4A1EFB00CB0FA6B4059A32, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_0B9617A24966503DC4A0D6A3AF6A8DD9, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_F111CBC3469DB8416691CD8391050117, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_164CC0A8475B50D4CF440AA5242390D6, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_5FFB6BF94BB2C8C3AD4DB59BA9F38840, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_D0B2F74D4D0ECB2D5200E39C89CE2A53, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_F3A87D104CF10F7E0F7FF7A3C4CDE8BA, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_BlendListByInt_262551824691B2B57EC8E9B9B4EBA883, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_20E1266D44ED5BB48D9391BE2D1E68B9, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_291B709B477331FEA8B845B105BD8D39, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_F43DA23648CD3D077FA31D9937720C5E, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_A493079445CF4A8F8FDEB4A272F089C4, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_D7569EED45D8D0BE8B060087B8CFC0FA, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_E882AE1040C1AEA29DC6CFBCC90E17C6, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_D066F6FE41184EEFD6881E82D49A0A39, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_SequencePlayer_A0F1248B43E7021CFCFA478076E88897, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_BlendListByBool_DBF078EB4B43B00BC1BE73B3F13854CB, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_D78527D144D13D352703869EF209D199, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_BlendSpacePlayer_28C72F17487329A00C12029C49E3D372, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_7A1AAB0E4E0F3BC56DC70D99F1576C49, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_BlendSpacePlayer_1F31BB4A48775FC8BE03D286BA1FBC46, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateResult_9C50BFF54EDEFC3DB758B0BD54CA1B7C, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AnimGraphNode_StateMachine_94949B0245EB8ADF1B2BA3925C3E996F, 0x19E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, Direction, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, Flying_Speed, 0x1AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, Walking_Speed, 0x1AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AreWeFlying_, 0x1ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AreWeWalking_, 0x1ACD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, IsInAir_, 0x1ACE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, FlapFast_, 0x1ACF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, DistanceToGround, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, PlayIdleLoop_, 0x1AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, UnknownData_B0I3, 0x1AD5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, RandomIdleAnimation, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, PlayTakeOffAnimation_, 0x1ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, AreWePerched_, 0x1ADD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, LandOnPerch_, 0x1ADE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, UnknownData_L7HE, 0x1ADF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, BBKey_AreWeFlying_, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, BBKey_AreWePerched_, 0x1AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, BBKey_AreWeWalking_, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, BBKey_DistanceToTheGround, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, BBKey_FlapFast_, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, FlyToPerch_, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, UnknownData_VCN9, 0x1B09);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeagull_AnimationBlueprint_C, BBKey_FlyToPerch_, 0x1B10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeagull_AnimationBlueprint_C, 0x1B18);
		}

		// BlueprintGeneratedClass BTTask_Bird_JumpAway.BTTask_Bird_JumpAway_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_JumpAway__BTTask_Bird_JumpAway_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_JumpAway_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_JumpAway_C, 0x00A8);
		}

		// AnimBlueprintGeneratedClass Crow_AnimBlueprint.Crow_AnimBlueprint_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Crow_AnimBlueprint__Crow_AnimBlueprint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_Root_8F0D02EA456F849A47FEA6B305F9D73D, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_641CD3DF4F254514645562BC523DB6A4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_C945845A4B875F7325A6D984FD0B5252, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_74393ACE4FD295AE2DD520B18BBB5636, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_FE8993D647DC38E942060C8299AC737B, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_A82DBF91434212BFF04A02A4482D8301, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_9D9B9D614DB8168B1CAD3D8763A93038, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_4E5AD16B48AFB48A969BC69B0E7EEB0D, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_49723B884FAEF951605893BDD9892229, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_2286937548DE68F55388A3AC02C2969A, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_A99FE15A4CFC0F3D1C3D37BC96E8D82F, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_C593C8CB4255F8A7C03514BD2C9CE749, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_D7D3B33047D542753F3CF188051AE1C7, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_FB1EAAE7421F6495D37BA3BEA1053A5A, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_TransitionResult_CE006F25474E0F4C36AE49BE2D940CEF, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_1BE51BF344831A76A0E5BFA32807A45B, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_61B8816F40EF7A99C6FA1AB86B0C01AE, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_9A4E33C34533FCD36EFE5BA9CDCC3ACD, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_84E0E7834D38983120C6D59A74BC5B03, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_39FA56F348CFA6B33E4A97A414B4692C, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_27F57DE24566AD0F43C40194DD72BF60, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_C8212901433FC649697855B63662DEFC, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_01BDC7DE4B0B6078873E27BDD21F7BF9, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_301B9094427BF7BF7BE5D8B0C21F40DC, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_16535E5F496B8269DC9E818D7EF30FC2, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_BlendListByInt_4538200D48041B6AC28C66A93C62DF57, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_BlendListByInt_BC230F4A45AB3E80C2329E81220C3563, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_4750676240BC9E899D10B294EA8BE051, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_F71C8A254609A92007DB859392EBF7D8, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_A333D56A4BF87A034601AEA90C100975, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_537891204F7C45FD291D6DBA911B4941, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_D4AD251641E13BC4935696AE7F47B2F5, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_1442EE584892D6AB7AE3DCAB065DF092, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_684F00B747BC44D24836DF83EF213A0E, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_889CF55D4D8142163BB5EFA448F522C4, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_3960CB1D4A92FC2848DBC98BD0868AE4, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_AAB6A36B4E1DF7A3D086EB973B349E76, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_BlendListByInt_35571321436D7BBF90F2F9B4F43F74C6, 0x1498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_56321F0C4C104077834A5B958A7F5966, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_EF12856946780B3110BF438F72F91CBC, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_6288CF414C0D9824EA7A0796A10EA0B2, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_BlendListByBool_9FF97C1745008E1C300A1F9960D90602, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_4126E4A44D14CC9D7CBD718406F32C7D, 0x17B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_SequencePlayer_8EC466454212F9B5C989E4BBBF6E90F1, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_551970A143C2CA7D09FB79A640F4A00B, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_7C5EBA9643FB8B965A1257B37944E0FC, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateResult_20764777451AEB88D2BA87A7A1D29D7B, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AnimGraphNode_StateMachine_AA283DF64DD0CB7E8F96A2B684CD16DA, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, FlyUp_, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, FlyUpFast_, 0x1B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, UnknownData_17TY, 0x1B22);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, Direction, 0x1B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, Flying_Speed, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, Walking_Speed, 0x1B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, FlyToPerch_, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AreWeFlying_, 0x1B31);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AreWeWalking_, 0x1B32);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, IsInAir_, 0x1B33);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, FlapFast_, 0x1B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, UnknownData_7PKQ, 0x1B35);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, DistanceToGround, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, PlayIdleLoop_, 0x1B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, UnknownData_XVFO, 0x1B3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, RandomIdleAnimation, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, PlayTakeOffAnimation_, 0x1B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, AreWePerched_, 0x1B45);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, LandOnPerch_, 0x1B46);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, UnknownData_VJ0F, 0x1B47);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, BBKey_AreWeFlying_, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, BBKey_AreWePerched_, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, BBKey_AreWeWalking_, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, BBKey_DistanceToTheGround, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, BBKey_FlapFast_, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrow_AnimBlueprint_C, BBKey_FlyToPerch_, 0x1B70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrow_AnimBlueprint_C, 0x1B78);
		}

		// BlueprintGeneratedClass NewLightBase.NewLightBase_C
		TEST_METHOD(BlueprintGeneratedClass__NewLightBase__NewLightBase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, Arrow, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, Sphere, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, PowerSource, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, Disabled, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, TurnedOn, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, CastShadows, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, UnknownData_ZOBD, 0x0353);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, dayTimeCon, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, PlayerRef, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, minDistanceAffectVisibility, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, IndexToRemove, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, topCalcDistance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, MinDelay, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewLightBase_C, MaxDelay, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANewLightBase_C, 0x037C);
		}

		// BlueprintGeneratedClass BTService_Bird_FlyToARandomSkyTarget.BTService_Bird_FlyToARandomSkyTarget_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_FlyToARandomSkyTarget__BTService_Bird_FlyToARandomSkyTarget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, CurrentYawSpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, CurrentPitchSpeed, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, CurrentRollSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, TurnSpeed, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, FlyingForwardSpeed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, UnknownData_0Z90, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, BBKey_Pitch_Adjustment, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_FlyToARandomSkyTarget_C, BbKey_FlyingSpeed, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_FlyToARandomSkyTarget_C, 0x00C8);
		}

		// BlueprintGeneratedClass BTService_Bird_IsThePerch_Occupied.BTService_Bird_IsThePerch_Occupied_C
		TEST_METHOD(BlueprintGeneratedClass__BTService_Bird_IsThePerch_Occupied__BTService_Bird_IsThePerch_Occupied_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_IsThePerch_Occupied_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_IsThePerch_Occupied_C, BKey_AllPerchesAreFull, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_IsThePerch_Occupied_C, BBKey_IsLookingForPerch_, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Bird_IsThePerch_Occupied_C, BBKey_FlyAway_, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Bird_IsThePerch_Occupied_C, 0x00B8);
		}

		// BlueprintGeneratedClass waterArea.waterArea_C
		TEST_METHOD(BlueprintGeneratedClass__waterArea__waterArea_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AwaterArea_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwaterArea_C, Billboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwaterArea_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwaterArea_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AwaterArea_C, areaSize, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AwaterArea_C, 0x0354);
		}

		// BlueprintGeneratedClass BTTask_Bird_SetMovement_T0_Perched.BTTask_Bird_SetMovement_T0_Perched_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_SetMovement_T0_Perched__BTTask_Bird_SetMovement_T0_Perched_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Perched_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Perched_C, BBKey_AreWeFlying_, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Perched_C, BBKey_AreWeWalking_, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Perched_C, BBKey_AreWePerched_, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Perched_C, BBKey_IsLookingForPerch_, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_SetMovement_T0_Perched_C, BBKey_FlyToPerch_, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_SetMovement_T0_Perched_C, 0x0170);
		}

		// BlueprintGeneratedClass planeTargetPoint.planeTargetPoint_C
		TEST_METHOD(BlueprintGeneratedClass__planeTargetPoint__planeTargetPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneTargetPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneTargetPoint_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AplaneTargetPoint_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AplaneTargetPoint_C, 0x0340);
		}

		// BlueprintGeneratedClass BTTask_Bird_ZeroOutPitchAndRoll.BTTask_Bird_ZeroOutPitchAndRoll_C
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Bird_ZeroOutPitchAndRoll__BTTask_Bird_ZeroOutPitchAndRoll_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Bird_ZeroOutPitchAndRoll_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Bird_ZeroOutPitchAndRoll_C, 0x00A8);
		}

		// BlueprintGeneratedClass Bird_AI_Controller.Bird_AI_Controller_C
		TEST_METHOD(BlueprintGeneratedClass__Bird_AI_Controller__Bird_AI_Controller_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, AIPerception, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, Enemy, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BlackboardKey_CanSeeEnemy_, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BlackboardKey_Enemy, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BlackboardKey_DoIFearTheEnemy_, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BbKey_EnemySpotted_, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BbKey_ChaseTheEnemy_, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, EnemyArray, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, LastSeenIndex, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, EnemyEvaluationFreq, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, EnemyDistanceCurve, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, CurrentHighestEnemyTarget, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, UnknownData_2A8R, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, EnemyTarget, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, MaxHealth, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, EnemyExpirationTime, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, Bird_Sky_Targets, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, Bird_Ground_Target, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, Bird_Perch_Target, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BbKey_GroundSpeed, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BbKey_FlyingSpeed, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_DoADownTrace_, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_DownTraceDistance, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_VerticleThrustAmount, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_StayInSky_, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_AreWeWalking_, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_AreWePerched_, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_AreWeFlying_, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_FlyToPerch_, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_CanThisBirdPerch_, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABird_AI_Controller_C, BBKey_CanThisBirdFly_, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABird_AI_Controller_C, 0x0540);
		}

		// Class SoundVisualizations.SoundVisualizationStatics
		TEST_METHOD(Class__SoundVisualizations__SoundVisualizationStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundVisualizationStatics, 0x0028);
		}

		// Class ImgMediaFactory.ImgMediaSettings
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_KK6E, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_25LZ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0060);
		}

		// Class UdpMessaging.UdpMessagingSettings
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_9RU6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_SYDU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_JWU7, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// Class Overlay.Overlays
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// Class Overlay.BasicOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// Class Overlay.LocalizedOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// BlueprintGeneratedClass policeTeleportLocation2.policeTeleportLocation2_C
		TEST_METHOD(BlueprintGeneratedClass__policeTeleportLocation2__policeTeleportLocation2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceTeleportLocation2_C, Arrow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ApoliceTeleportLocation2_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ApoliceTeleportLocation2_C, 0x0338);
		}

		// BlueprintGeneratedClass decoTrashPlant.decoTrashPlant_C
		TEST_METHOD(BlueprintGeneratedClass__decoTrashPlant__decoTrashPlant_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoTrashPlant_C, 0x0446);
		}

		// BlueprintGeneratedClass ws_oldschoolRoundTable.ws_oldschoolRoundTable_C
		TEST_METHOD(BlueprintGeneratedClass__ws_oldschoolRoundTable__ws_oldschoolRoundTable_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_oldschoolRoundTable_C, 0x04C5);
		}

		// BlueprintGeneratedClass ballenaCigarBP.ballenaCigarBP_C
		TEST_METHOD(BlueprintGeneratedClass__ballenaCigarBP__ballenaCigarBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaCigarBP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaCigarBP_C, ParticleSystem, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaCigarBP_C, blantEddie, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AballenaCigarBP_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AballenaCigarBP_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass launderingWidget.launderingWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__launderingWidget__launderingWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, btnAdd, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, btnCancel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, Button_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, spinBoxOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlaunderingWidget_C, allPlayerMoney, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlaunderingWidget_C, 0x0244);
		}

		// WidgetBlueprintGeneratedClass druPriceListingItem.druPriceListingItem_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__druPriceListingItem__druPriceListingItem_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, unlockPop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, bgNew, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, btnDisableEnable, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, btnPriceLower, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, btnUnlockDrug, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, drugIcon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, salePriceBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtDrugName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtNew, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtNotSale, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtPriceBuy, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtPricesale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtPurchasePrice, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtSaleDisabled, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtSalePrice, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, txtSellThis, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, Index, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, UnknownData_CEYA, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, mainComputerRef, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdruPriceListingItem_C, thisDrugEnabled, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdruPriceListingItem_C, 0x02A9);
		}

		// WidgetBlueprintGeneratedClass orderDeleteBin.orderDeleteBin_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__orderDeleteBin__orderDeleteBin_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDeleteBin_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDeleteBin_C, bgImage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDeleteBin_C, binIcon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UorderDeleteBin_C, orderDropOverlay, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UorderDeleteBin_C, 0x0228);
		}

		// BlueprintGeneratedClass clientLooksDatabaseBP.clientLooksDatabaseBP_C
		TEST_METHOD(BlueprintGeneratedClass__clientLooksDatabaseBP__clientLooksDatabaseBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, Billboard, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaMainBodies, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaHeads, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaHair, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaArms, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaGlasses, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaHats, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientMaBodyMats, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeMainBodies, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeHeads, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeHair, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeArms, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeGlasses, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeHats, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, ClientFeBodyMat, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AclientLooksDatabaseBP_C, curClientLevel, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AclientLooksDatabaseBP_C, 0x041C);
		}

		// BlueprintGeneratedClass npcJay.npcJay_C
		TEST_METHOD(BlueprintGeneratedClass__npcJay__npcJay_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AnpcJay_C, 0x0AD4);
		}

		// Class MoviePlayer.MoviePlayerSettings
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_I3CG, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// Class LinearTimecode.LinearTimecodeComponent
		TEST_METHOD(Class__LinearTimecode__LinearTimecodeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, MediaPlayer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, DropTimecode, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, UnknownData_5BOM, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, OnTimecodeChange, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, UnknownData_5QMX, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinearTimecodeComponent, 0x02A0);
		}

		// Class LinearTimecode.DropTimecodeToStringConversion
		TEST_METHOD(Class__LinearTimecode__DropTimecodeToStringConversion)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropTimecodeToStringConversion, 0x0028);
		}

		// BlueprintGeneratedClass PM_CheckpointGuard.PM_CheckpointGuard_C
		TEST_METHOD(BlueprintGeneratedClass__PM_CheckpointGuard__PM_CheckpointGuard_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, UnknownData_OCQ8, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, UberGraphFrame, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, CheckpointID, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, UnknownData_JHS9, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, checkpointRef, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, controlingPlayer, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, UnknownData_9V6L, 0x0889);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, controlTimer, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, controlTime, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, controlBreakDistance, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, controlWidget, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, defLocationSet, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, UnknownData_GX2H, 0x08A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, defLocationVector, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, suicide, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, UnknownData_DP60, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APM_CheckpointGuard_C, BlockadeRef, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APM_CheckpointGuard_C, 0x08C0);
		}

		// BlueprintGeneratedClass decoModernFloorLamp2.decoModernFloorLamp2_C
		TEST_METHOD(BlueprintGeneratedClass__decoModernFloorLamp2__decoModernFloorLamp2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp2_C, UnknownData_WK4U, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp2_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp2_C, PointLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdecoModernFloorLamp2_C, LightSwitch1, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoModernFloorLamp2_C, 0x0460);
		}

		// BlueprintGeneratedClass BP_Wires.BP_Wires_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Wires__BP_Wires_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wires_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wires_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Wires_C, 0x0338);
		}

		// BlueprintGeneratedClass navArea_Street.navArea_Street_C
		TEST_METHOD(BlueprintGeneratedClass__navArea_Street__navArea_Street_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnavArea_Street_C, 0x0048);
		}

		// BlueprintGeneratedClass streetPersonFemale04BP.streetPersonFemale04BP_C
		TEST_METHOD(BlueprintGeneratedClass__streetPersonFemale04BP__streetPersonFemale04BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetPersonFemale04BP_C, 0x0AD4);
		}

		// WidgetBlueprintGeneratedClass policeControlingWidget.policeControlingWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__policeControlingWidget__policeControlingWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceControlingWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceControlingWidget_C, miganie, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceControlingWidget_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UpoliceControlingWidget_C, TextBlock_1, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UpoliceControlingWidget_C, 0x0228);
		}

		// WidgetBlueprintGeneratedClass newTaskWidget.newTaskWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__newTaskWidget__newTaskWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewTaskWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewTaskWidget_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewTaskWidget_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewTaskWidget_C, txtTaskDesc, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewTaskWidget_C, txtTaskTitle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UnewTaskWidget_C, DelayTime, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UnewTaskWidget_C, 0x0234);
		}

		// BlueprintGeneratedClass doorsExtWoodPsychedelicHideout.doorsExtWoodPsychedelicHideout_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWoodPsychedelicHideout__doorsExtWoodPsychedelicHideout_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtWoodPsychedelicHideout_C, UnknownData_UJH6, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AdoorsExtWoodPsychedelicHideout_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWoodPsychedelicHideout_C, 0x0538);
		}

		// BlueprintGeneratedClass dd_trashBinConcrete.dd_trashBinConcrete_C
		TEST_METHOD(BlueprintGeneratedClass__dd_trashBinConcrete__dd_trashBinConcrete_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_trashBinConcrete_C, StaticMesh, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Add_trashBinConcrete_C, 0x0520);
		}

		// BlueprintGeneratedClass dd_trashCan.dd_trashCan_C
		TEST_METHOD(BlueprintGeneratedClass__dd_trashCan__dd_trashCan_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Add_trashCan_C, StaticMesh, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Add_trashCan_C, 0x0520);
		}

		// BlueprintGeneratedClass InteractiveTrashBin.InteractiveTrashBin_C
		TEST_METHOD(BlueprintGeneratedClass__InteractiveTrashBin__InteractiveTrashBin_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveTrashBin_C, UnknownData_PC4S, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveTrashBin_C, UberGraphFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveTrashBin_C, dayTimeCon, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveTrashBin_C, StealChance, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveTrashBin_C, 0x050C);
		}

		// WidgetBlueprintGeneratedClass spinBoxOverride.spinBoxOverride_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__spinBoxOverride__spinBoxOverride_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, EditableTextBox_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, colorVisible, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, colorInvisible, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, curValue, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, Typing, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, fullGrams, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, UnknownData_AI8B, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, MaxValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, UnknownData_Y4O1, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UspinBoxOverride_C, activeElementsColor, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UspinBoxOverride_C, 0x02A0);
		}

		// BlueprintGeneratedClass splineRoad400Sidewalks.splineRoad400Sidewalks_C
		TEST_METHOD(BlueprintGeneratedClass__splineRoad400Sidewalks__splineRoad400Sidewalks_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplineRoad400Sidewalks_C, Spline, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsplineRoad400Sidewalks_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsplineRoad400Sidewalks_C, 0x0338);
		}

		// BlueprintGeneratedClass smugglerShopSectorC.smugglerShopSectorC_C
		TEST_METHOD(BlueprintGeneratedClass__smugglerShopSectorC__smugglerShopSectorC_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerShopSectorC_C, UnknownData_HUVZ, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerShopSectorC_C, UberGraphFrame, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmugglerShopSectorC_C, 0x0AE0);
		}

		// WidgetBlueprintGeneratedClass gangReputationWidget.gangReputationWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__gangReputationWidget__gangReputationWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, levelPop, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, progRespect, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, progRespectBG, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, txtAmount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, txtLevelCurrent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, txtLevelNext, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, txtTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, endPercent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgangReputationWidget_C, respTotal, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgangReputationWidget_C, 0x0260);
		}

		// BlueprintGeneratedClass eddieWalkPoint.eddieWalkPoint_C
		TEST_METHOD(BlueprintGeneratedClass__eddieWalkPoint__eddieWalkPoint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkPoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkPoint_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkPoint_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AeddieWalkPoint_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AeddieWalkPoint_C, 0x0348);
		}

		// BlueprintGeneratedClass trainController.trainController_C
		TEST_METHOD(BlueprintGeneratedClass__trainController__trainController_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, TrainPath, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, RamaSave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, timeTrainInterval, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, active, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, UnknownData_DLES, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, minTrainSegments, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, maxTrainSegments, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, curSpawnedLead, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, lastParent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, numOneStyle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, randModelNum, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtrainController_C, trainModels, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtrainController_C, 0x0380);
		}

		// BlueprintGeneratedClass dogoPathFilter.dogoPathFilter_C
		TEST_METHOD(BlueprintGeneratedClass__dogoPathFilter__dogoPathFilter_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdogoPathFilter_C, 0x0048);
		}

		// WidgetBlueprintGeneratedClass expEarnedPopup.expEarnedPopup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__expEarnedPopup__expEarnedPopup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpEarnedPopup_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpEarnedPopup_C, Exit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpEarnedPopup_C, Enter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpEarnedPopup_C, txtExpAmount, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UexpEarnedPopup_C, 0x0228);
		}

		// BlueprintGeneratedClass streetLight.streetLight_C
		TEST_METHOD(BlueprintGeneratedClass__streetLight__streetLight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetLight_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetLight_C, lanternLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetLight_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetLight_C, startHour, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetLight_C, EndHour, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AstreetLight_C, Working, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstreetLight_C, 0x0349);
		}

		// BlueprintGeneratedClass BP_Truck01_Timber.BP_Truck01_Timber_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Truck01_Timber__BP_Truck01_Timber_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Timber_C, StaticMeshComponent01, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Timber_C, StaticMeshComponent0, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Truck01_Timber_C, SharedRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Truck01_Timber_C, 0x0340);
		}

		// BlueprintGeneratedClass parkFencePartBP.parkFencePartBP_C
		TEST_METHOD(BlueprintGeneratedClass__parkFencePartBP__parkFencePartBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AparkFencePartBP_C, InstancedStaticMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AparkFencePartBP_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AparkFencePartBP_C, LengthSegments, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AparkFencePartBP_C, FlipDirection, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AparkFencePartBP_C, 0x033D);
		}

		// BlueprintGeneratedClass SecurityGuardSectorC.SecurityGuardSectorC_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityGuardSectorC__SecurityGuardSectorC_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityGuardSectorC_C, 0x0AD4);
		}

		// BlueprintGeneratedClass shopSmugglers.shopSmugglers_C
		TEST_METHOD(BlueprintGeneratedClass__shopSmugglers__shopSmugglers_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AshopSmugglers_C, 0x03E9);
		}

		// BlueprintGeneratedClass smugglerLaundryDialogueInstance.smugglerLaundryDialogueInstance_C
		TEST_METHOD(BlueprintGeneratedClass__smugglerLaundryDialogueInstance__smugglerLaundryDialogueInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerLaundryDialogueInstance_C, UnknownData_HWAE, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerLaundryDialogueInstance_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerLaundryDialogueInstance_C, SmugglingBox, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsmugglerLaundryDialogueInstance_C, SmuggleCost, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsmugglerLaundryDialogueInstance_C, 0x03AC);
		}

		// BlueprintGeneratedClass BP_HumanoidActor.BP_HumanoidActor_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HumanoidActor__BP_HumanoidActor_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanoidActor_C, RamaSave, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanoidActor_C, DefaultSceneRoot, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HumanoidActor_C, 0x04B0);
		}

		// BlueprintGeneratedClass blockEntranceLight.blockEntranceLight_C
		TEST_METHOD(BlueprintGeneratedClass__blockEntranceLight__blockEntranceLight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AblockEntranceLight_C, UnknownData_JEP3, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AblockEntranceLight_C, UberGraphFrame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AblockEntranceLight_C, StaticMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AblockEntranceLight_C, PointLight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AblockEntranceLight_C, lightModel, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AblockEntranceLight_C, 0x0398);
		}

		// BlueprintGeneratedClass BP_decoDeskLamp2.BP_decoDeskLamp2_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoDeskLamp2__BP_decoDeskLamp2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp2_C, UnknownData_FDYK, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp2_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp2_C, PointLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp2_C, DynLightMat, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoDeskLamp2_C, DynGlassMat, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoDeskLamp2_C, 0x0468);
		}

		// BlueprintGeneratedClass ws_shelfModernLarge.ws_shelfModernLarge_C
		TEST_METHOD(BlueprintGeneratedClass__ws_shelfModernLarge__ws_shelfModernLarge_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aws_shelfModernLarge_C, 0x04C5);
		}

		// BlueprintGeneratedClass decoHangingHousePlant3.decoHangingHousePlant3_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant3__decoHangingHousePlant3_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant3_C, 0x0446);
		}

		// BlueprintGeneratedClass decoHangingHousePlant4.decoHangingHousePlant4_C
		TEST_METHOD(BlueprintGeneratedClass__decoHangingHousePlant4__decoHangingHousePlant4_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdecoHangingHousePlant4_C, 0x0446);
		}

		// BlueprintGeneratedClass BP_decoScandiFloorLamp.BP_decoScandiFloorLamp_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoScandiFloorLamp__BP_decoScandiFloorLamp_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoScandiFloorLamp_C, UnknownData_AEUN, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoScandiFloorLamp_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoScandiFloorLamp_C, PointLight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_decoScandiFloorLamp_C, LightSwitch, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoScandiFloorLamp_C, 0x0460);
		}

		// BlueprintGeneratedClass BP_decoScandiTVStand.BP_decoScandiTVStand_C
		TEST_METHOD(BlueprintGeneratedClass__BP_decoScandiTVStand__BP_decoScandiTVStand_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_decoScandiTVStand_C, 0x0446);
		}

		// BlueprintGeneratedClass weedProductionBowl.weedProductionBowl_C
		TEST_METHOD(BlueprintGeneratedClass__weedProductionBowl__weedProductionBowl_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionBowl_C, Sphere, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionBowl_C, plantPoint, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AweedProductionBowl_C, RamaSave, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AweedProductionBowl_C, 0x0440);
		}

		// BlueprintGeneratedClass PM_PlaySearchSound.PM_PlaySearchSound_C
		TEST_METHOD(BlueprintGeneratedClass__PM_PlaySearchSound__PM_PlaySearchSound_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPM_PlaySearchSound_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPM_PlaySearchSound_C, 0x00A8);
		}

		// AnimBlueprintGeneratedClass CitizenFemale01_AnimBP.CitizenFemale01_AnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__CitizenFemale01_AnimBP__CitizenFemale01_AnimBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, AnimGraphNode_Root_8E9237A84CC5EC8BCFBC359AD1CB9FD3, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, AnimGraphNode_BlendSpacePlayer_F663B0E046A5F94F8E6D74A860E0F994, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, AnimGraphNode_StateResult_0953F94642D458406F19F5B2A4168E74, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, AnimGraphNode_StateMachine_B19AAE83411C1C889C977988EAE5C1F0, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, Speed, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, UnknownData_NUPB, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenFemale01_AnimBP_C, Owner, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCitizenFemale01_AnimBP_C, 0x0600);
		}

		// BlueprintGeneratedClass PlayerInfluenceRadius.PlayerInfluenceRadius_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerInfluenceRadius__PlayerInfluenceRadius_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerInfluenceRadius_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerInfluenceRadius_C, ShortCollider, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerInfluenceRadius_C, LongCollider, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerInfluenceRadius_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerInfluenceRadius_C, LongRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerInfluenceRadius_C, ShortRadius, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerInfluenceRadius_C, 0x0350);
		}

		// BlueprintGeneratedClass sebiksController.sebiksController_C
		TEST_METHOD(BlueprintGeneratedClass__sebiksController__sebiksController_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksController_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksController_C, SK_ma_body_average, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksController_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksController_C, minPlayerDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksController_C, sebiksRespawnTimeout, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsebiksController_C, sebiksRespawnInterval, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsebiksController_C, 0x034C);
		}

		// Class TimeManagement.FixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// Class TimeManagement.TimeManagementBlueprintLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// Class TimeManagement.TimeSynchronizationSource
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_3W42, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// WidgetBlueprintGeneratedClass mixListWidget.mixListWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__mixListWidget__mixListWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixListWidget_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixListWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixListWidget_C, txtSubstanceName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixListWidget_C, txtSubstanceQuantity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmixListWidget_C, activeElementsColor, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmixListWidget_C, 0x0250);
		}

		// BlueprintGeneratedClass doorsExtWood01.doorsExtWood01_C
		TEST_METHOD(BlueprintGeneratedClass__doorsExtWood01__doorsExtWood01_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AdoorsExtWood01_C, 0x052A);
		}

		// WidgetBlueprintGeneratedClass shadyCommContactGroupTitle.shadyCommContactGroupTitle_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__shadyCommContactGroupTitle__shadyCommContactGroupTitle_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactGroupTitle_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactGroupTitle_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UshadyCommContactGroupTitle_C, txtHeading, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UshadyCommContactGroupTitle_C, 0x0220);
		}

		// BlueprintGeneratedClass breachCamShake.breachCamShake_C
		TEST_METHOD(BlueprintGeneratedClass__breachCamShake__breachCamShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbreachCamShake_C, 0x0160);
		}

		// AnimBlueprintGeneratedClass CitizenMale03_animBP.CitizenMale03_animBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__CitizenMale03_animBP__CitizenMale03_animBP_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_Root_6DCFACE146E42539FDC6EAA200598235, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_TransitionResult_AE542AA94B7B457D5751EDB52EC232F9, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_TransitionResult_800789BC469BA5C983354C9A7881531A, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_TransitionResult_71BEB6F646831C3C4EB2E396EF02B1DA, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_TransitionResult_55B0C9EE493AF45A9A1EBD9C6A7C3B11, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_SequencePlayer_7D08DB15480714E9BAA27F9CD7341898, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_StateResult_7EC5457E4D6F450931FAE4A4E0AFE69A, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_SequencePlayer_8EA785274ADDC8B18BBDB39D32E7B78D, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_StateResult_51F6FF4543CB1A919C85CF82001CC090, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_BlendSpacePlayer_4443FE4A4BC18FEB7F81BD834C88C1E2, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_StateResult_8A30B6B847E012C6B71182A3807A8B9E, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, AnimGraphNode_StateMachine_237D71224AB499B3A59BF983A0846508, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, RotRate, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, Speed, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, Velocity, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, UnknownData_TSTT, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCitizenMale03_animBP_C, Owner, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCitizenMale03_animBP_C, 0x08E8);
		}

		// ScriptStruct MovieScene.MovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// ScriptStruct MovieScene.MovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_EORJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_2U90, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// ScriptStruct MovieScene.MovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_6XGY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// ScriptStruct MovieScene.OptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// ScriptStruct MovieScene.MovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_8OVM, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_Z3B6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// ScriptStruct MovieScene.SectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_H9SM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_FW0E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0038);
		}

		// ScriptStruct MovieScene.MovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_5E51, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_MO0R, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_R4MX, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldSegmentPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, EvaluationIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_DQ47, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_BT7N, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_M7MW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_YD7H, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00A8);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_LQ8G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_QBIM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// ScriptStruct MovieScene.MovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_A8SZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_9COH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_2OIV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_K38X, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// ScriptStruct MovieScene.MovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRandomStartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_HV2N, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRestoreState, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableMovementInput, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableLookAtInput, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHidePlayer, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHideHud, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableCameraCuts, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bPauseAtEnd, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_YP0E, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, InstanceData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, BindingOverrides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_QLPM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0040);
		}

		// ScriptStruct MovieScene.MovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_S38A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_O5D1, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0300);
		}

		// ScriptStruct MovieScene.MovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_PE6B, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_WMJF, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_FLGQ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// ScriptStruct MovieScene.MovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// ScriptStruct MovieScene.MovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// ScriptStruct MovieScene.MovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_Z9RQ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// ScriptStruct MovieScene.MovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_ER1N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_QKLK, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSection, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// ScriptStruct MovieScene.MovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00E0);
		}

		// ScriptStruct MovieScene.MovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_APU0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneBoolChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_FSBJ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_TUF6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// ScriptStruct MovieScene.MovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_53F3, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_WG4D, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// ScriptStruct MovieScene.MovieSceneKeyHandleMap
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_WU7K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_NBUD, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// ScriptStruct MovieScene.MovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_CD48, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_NVB2, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// ScriptStruct MovieScene.MovieSceneFloatChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_NTPH, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_VAOW, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// ScriptStruct MovieScene.MovieSceneIntegerChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_CK9G, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_NGTX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// ScriptStruct MovieScene.MovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_5C3J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneKeyTimeStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_ZWTF, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// ScriptStruct MovieScene.MovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// ScriptStruct MovieScene.MovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// ScriptStruct MovieScene.SectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_EPB0, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_H4S7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// ScriptStruct MovieScene.TestMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// ScriptStruct ImageWriteQueue.ImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_1HKT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_QSSN, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0018);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_F2Y0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_NL4J, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00A0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_UZP2, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_RQRZ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_XDRH, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0008);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_13VV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.EventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_F6BX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_TGLC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.ScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// ScriptStruct MovieSceneTracks.VectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// ScriptStruct MovieSceneTracks.ColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParticleChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_LFML, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_OB6N, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00C8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneStringChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_9TJ2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DAttachSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_V057, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DPathSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_6YPX, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_P9QP, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DTransformKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_4JHW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DScaleKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_M1P1, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DRotationKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_N7CW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DLocationKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_OO2U, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_F9QV, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_5966, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneComponentTransformSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneAudioSectionTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplateData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, Sound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioStartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_Y8AO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, SectionStartTimeSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioPitchMultiplierCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioVolumeCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, RowIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, bOverrideAttenuation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_0UW3, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AttenuationSettings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnQueueSubtitles, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioFinished, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioPlaybackPercent, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplateData, 0x0198);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneAudioSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x01B8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_406O, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_EV8E, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraCutSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_0XBS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_978J, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneColorKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_LTFX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneColorSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_9ME9, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_RKGN, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventRepeaterTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0040);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventTriggerTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventFunctions, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneFadeSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_BMRT, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneLevelVisibilitySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_O5Y7, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0050);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0058);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_GV8A, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0058);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0050);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParticleSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEulerTransformPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneTransformPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_0ITN, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneStringPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_29XD, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneBytePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneFloatPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_B0OJ, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00D0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x00F0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSlomoSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSpawnSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_DSP2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVector4KeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_MB6R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_UW0G, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVector2DKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVisibilitySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// ScriptStruct ClothingSystemRuntime.ClothConstraintSetup
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConstraintSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup, 0x0010);
		}

		// ScriptStruct ClothingSystemRuntime.ClothConfig
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_ARX8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_CT3H, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig, 0x00D4);
		}

		// ScriptStruct ClothingSystemRuntime.ClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothVertBoneData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x0034);
		}

		// ScriptStruct ClothingSystemRuntime.ClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothPhysicalMeshData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00A8);
		}

		// ScriptStruct ClothingSystemRuntime.ClothLODData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothLODData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, CollisionData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, UnknownData_C05E, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODData, 0x00F8);
		}

		// ScriptStruct ClothingSystemRuntime.ClothParameterMask_PhysMesh
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothParameterMask_PhysMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_7UKE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_3VM4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_WNID, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_PhysMesh, 0x0030);
		}

		// ScriptStruct NavigationSystem.SupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_DPHR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// ScriptStruct NavigationSystem.NavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// ScriptStruct NavigationSystem.NavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_4WQ0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_HDL4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_0WYW, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// ScriptStruct NavigationSystem.NavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_5DAX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// ScriptStruct AudioMixer.SubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_Z8JH, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_WEVA, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0028);
		}

		// ScriptStruct AudioMixer.SubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_65QZ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// ScriptStruct AudioMixer.SubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// ScriptStruct AudioMixer.SubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// UserDefinedStruct NewItemStructure.NewItemStructure
		TEST_METHOD(UserDefinedStruct__NewItemStructure__NewItemStructure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, Name_2_FF6B1B3640DC8500F30969AD1A856723, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, Description_4_35628C2940A2D525609C95B5117627A9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, Icon_7_9183F95946ADBF277F39248EA95CF966, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, Size_11_DA41073149E4068109A8AB8E696904F9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, Weight_13_021ECC0A46EA3F14A02418AA4DB9743B, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, ActorClass_16_F5DFA0B44AED17EA1ACCD6BAA11A44E6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, Category_20_4D582CF747C56D9FA5FEB3BB8E3352EF, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, CanStack_23_F3E61B4F4566F31AF4248FAAF5A8CA86, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, UnknownData_40RX, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, StackMaxSize_26_8F7C50134A1C333C95AC528E9B2D8226, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, DefaultAmount_28_92DC36D146C4C881302ADB822BE4DA16, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, MaxAmount_30_A9F0786545866BB36EC0868C59DA7E92, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, InventoryWidth_37_5E59630A4044F97CFED95FA62B62189A, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewItemStructure, InventoryHeight_38_5A2E3AD34332DF72F2131484DBF09FB0, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewItemStructure, 0x0060);
		}

		// ScriptStruct AnimationCore.Axis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_OFHS, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// ScriptStruct AnimationCore.ConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_A5N2, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// ScriptStruct AnimationCore.ConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_Q6IX, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// ScriptStruct AnimationCore.FilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// ScriptStruct AnimationCore.ConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_5ICQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_KJMS, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// ScriptStruct AnimationCore.AimConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_QCB2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// ScriptStruct AnimationCore.TransformConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_Y0LP, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// ScriptStruct AnimationCore.ConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// ScriptStruct AnimationCore.TransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_ZYZS, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_UNR3, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// ScriptStruct AnimationCore.ConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_AHC7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_HQBH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// ScriptStruct AnimationCore.TransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// ScriptStruct AnimationCore.EulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// ScriptStruct AnimationCore.NodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// ScriptStruct AnimationCore.NodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// ScriptStruct AnimationCore.NodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// ScriptStruct AnimationCore.NodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_R0LV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_IBGL, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_QVGG, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00F0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_A1N8, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_1JUR, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSampleDataCache, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x0128);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_AimOffsetLookAt
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, bIsLODEnabled, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_CRJI, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_7E3U, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketBoneReference, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_5Y8Z, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketLocalTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketBoneReference, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_FRUU, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketLocalTransform, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x0210);
		}

		// ScriptStruct AnimGraphRuntime.AnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_5M2S, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_M1JG, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularXAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularYAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularZAngle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_JQX5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, bLinearFullyLocked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_Q7Z6, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x005C);
		}

		// ScriptStruct AnimGraphRuntime.AnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, UnknownData_344N, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0050);
		}

		// ScriptStruct AnimGraphRuntime.AnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_1GP1, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0030);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_AnimDynamics
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_FWC5, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bChain, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_896Y, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseGravityOverride, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bLinearSpring, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bAngularSpring, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_ET3C, 0x0173);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bEnableWind, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bWindWasEnabled, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_U1EQ, 0x017E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideLinearDamping, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_4HXQ, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularDamping, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_968S, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularBias, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_QSQ1, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoEval, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_UZ0U, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUsePlanarLimit, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_QLQN, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseSphericalLimits, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_4HKU, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_YWF8, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_ML4G, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x03A0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ApplyAdditive
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, ActualAlpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_Y18N, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00F0);
		}

		// ScriptStruct AnimGraphRuntime.AngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0030);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ApplyLimits
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x0110);
		}

		// ScriptStruct AnimGraphRuntime.BlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_CVQG, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0038);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendBoneByChannel
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_NQQY, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_VJD0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, InternalBlendAlpha, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, bBIsRelevant, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_LHZ9, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, ValidBoneEntries, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0090);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_DY23, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, Blends, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, RemainingBlendTimes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, LastActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_85ZJ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, PerBoneSampleData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_BYU8, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_9GEG, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x00C8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByBool
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_37YH, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00D0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByEnum
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_P96F, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00E0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByInt
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_1V83, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00D0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_LAYT, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x0130);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BoneDrivenController
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_SBZD, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, bUseRange, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_Z6HV, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_CZTQ, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_HB4M, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_GB17, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_FGT2, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0168);
		}

		// ScriptStruct AnimGraphRuntime.SocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_JT4B, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.BoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_9AST, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CCDIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_469G, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_8C7I, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x01B0);
		}

		// ScriptStruct AnimGraphRuntime.Constraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_7ZDF, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x0028);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Constraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_D7L0, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0138);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CopyBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_WGFJ, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x0128);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CopyBoneDelta
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x0130);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CopyPoseFromMesh
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_OXJG, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x00E8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CurveSource
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_WMUS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0060);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Fabrik
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_O9SQ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformBone, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_NZQ9, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, bEnableDebugDraw, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_FUVO, 0x01E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x01F0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_HandIKRetargeting
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_N414, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0168);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_LayeredBoneBlend
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bHasRelevantPoses, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_2RV7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00D8);
		}

		// ScriptStruct AnimGraphRuntime.AnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_OXVV, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_DW37, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.AnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_BYCV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00B0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_LegIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsData, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_LJZS, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x0120);
		}

		// ScriptStruct AnimGraphRuntime.IKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_MLEP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.IKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_P0LX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_LookAt
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtSocket, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_FTHE, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtAxis, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_23FL, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookAtAxis, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUpAxis, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_5IV8, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookUpAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_NDVI, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_ZB6O, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x0220);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_MakeDynamicAdditive
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_K2A1, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0058);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ModifyBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_SZAG, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0138);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ModifyCurve
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_OZKA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, LastCurveValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_OS3F, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0080);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_MultiWayBlend
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_6BOK, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_JQP9, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0070);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ObserveBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_6RXX, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0130);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_S3E4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0090);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseBlendNode
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_U9LN, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00B0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseByName
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_JUYV, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x00A0);
		}

		// ScriptStruct AnimGraphRuntime.RBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_Q89Q, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x0010);
		}

		// ScriptStruct AnimGraphRuntime.PoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// ScriptStruct AnimGraphRuntime.PoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_Y84R, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_4CIJ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00A8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseDriver
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, bOnlyDriveSelectedBones, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_7EOR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_O7T3, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, TwistAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, Type, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_ROOT, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RadialScaling, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_ZLQP, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0160);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseSnapshot
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_W81S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_WUCD, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x00B0);
		}

		// ScriptStruct AnimGraphRuntime.RandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_B590, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0058);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RandomPlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_7CFR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_I969, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0090);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_MeshSpaceRefPose
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0030);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RefPose
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_FBI5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0038);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ResetRoot
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_I9WX, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x0100);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RigidBody
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bEnableWorldGeometry, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_KNMT, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_3O5A, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_J3EY, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bOverrideWorldGravity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_GNER, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bTransferBoneVelocities, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bFreezeIncomingPoseOnStart, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bComponentSpaceSimulation, 0x0162);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_PMVL, 0x0163);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0570);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Root)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RotateRootBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, ActualPitch, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, ActualYaw, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_1DV5, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00C0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RotationMultiplier
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_EBPV, 0x0126);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x0128);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bIsLODEnabled, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_BOYY, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, ActualAlpha, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_7XPK, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x01E0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ScaleChainLength
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_FWLT, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_5NRT, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ActualAlpha, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, bBoneIndicesCached, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_HZ90, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x00B0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_RCSB, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bReinitialized, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_VFIS, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0070);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Slot
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_B8OZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0068);
		}

		// ScriptStruct AnimGraphRuntime.SplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, UnknownData_K0L8, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0020);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SplineIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_4K4N, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_BS17, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_WQ56, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneSpline, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, OriginalSplineLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_KCD2, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneReferences, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneLengths, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedOffsetRotations, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0290);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SpringBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bLimitDisplacement, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_I8E5, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bNoZSpring, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateX, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateY, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateZ, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateX, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateY, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateZ, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_2DX6, 0x0123);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0158);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_StateResult
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.RotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Trail
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_0MM1, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnwindingSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_GZ7B, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0280);
		}

		// ScriptStruct AnimGraphRuntime.ReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0028);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_TwistCorrectiveNode
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_U9AN, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_RTXL, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0178);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_TwoBoneIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_Q7PA, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StretchLimits, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_B1JX, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_UGDL, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorSpaceBoneName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_MNMH, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_07Z2, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetSpaceBoneName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_KV2G, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bAllowTwist, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_T5BA, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bNoTwist, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_0X52, 0x0235);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x0240);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_TwoWayBlend
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_M6H1, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAlphaBoolEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_4MEN, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, InternalBlendAlpha, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAIsRelevant, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bBIsRelevant, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bResetChildOnActivation, 0x00F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_IIC8, 0x00F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00F8);
		}

		// ScriptStruct AnimGraphRuntime.AnimSequencerInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_C19D, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0790);
		}

		// ScriptStruct AnimGraphRuntime.RBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// ScriptStruct AnimGraphRuntime.RBFTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_A90D, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x0088);
		}

		// ScriptStruct ActorSequence.ActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_EIJV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_4VAF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// ScriptStruct ActorSequence.ActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// ScriptStruct ActorSequence.ActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// ScriptStruct GameplayTasks.GameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_NUPS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// UserDefinedStruct ExpoEventData.ExpoEventData
		TEST_METHOD(UserDefinedStruct__ExpoEventData__ExpoEventData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpoEventData, ExpoEventName_2_45F02C6A45E4E19B2BB7A788FEF9AB9D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpoEventData, Notatka_11_F6A8AA2441800AACF9DE92AA00D0D8F9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpoEventData, ExpoEventValue_5_5F7210A44F6B0C4C78C417BC81500B56, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpoEventData, ExpoEventMedianePoints_8_10F9279F4013B26DC935E6AB51AB93D9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpoEventData, 0x0030);
		}

		// UserDefinedStruct LootPoolData.LootPoolData
		TEST_METHOD(UserDefinedStruct__LootPoolData__LootPoolData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolData, Notatka_6_591F3B8A4E5942AA95AA70A5B7B4FF79, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolData, LootPool_7_6EEA015C48BACB9A74FE679DA052CABF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootPoolData, 0x0020);
		}

		// UserDefinedStruct DialogueStructure.DialogueStructure
		TEST_METHOD(UserDefinedStruct__DialogueStructure__DialogueStructure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, Notatka_19_CCEAD5BF474DDCEBFEF96391B3E2E084, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, FirstDialogueID_2_261964124D8104B14697A8B35698C812, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, StartDialogueID_5_8B98C51C4238AF262D423094A7B3367E, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, TradeReturnID_6_1AFFF475480B64086B37C1AF92B9B31A, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, UnknownData_CV2I, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, DialogueLines_10_37BA5A7C4A205C5EBF4C61A26AAC8DF6, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueStructure, BlockEscapeExit_17_8A01B2DF428343376613048FD546FC51, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueStructure, 0x0031);
		}

		// ScriptStruct GameplayTags.GameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// ScriptStruct GameplayTags.GameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_TVAB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// ScriptStruct GameplayTags.GameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_M8BD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// ScriptStruct GameplayTags.RestrictedGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_VQLD, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// ScriptStruct GameplayTags.GameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// ScriptStruct GameplayTags.RestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_BUIC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// ScriptStruct GameplayTags.GameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_X7BV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// ScriptStruct GameplayTags.GameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_Y9MU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// ScriptStruct SlateCore.Geometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_41NG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// ScriptStruct SlateCore.Margin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// ScriptStruct SlateCore.SlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_ZDYJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// ScriptStruct SlateCore.SlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_9EBC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_0Q2B, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_2LRZ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// ScriptStruct SlateCore.InputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_M5MZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// ScriptStruct SlateCore.PointerEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_JBT7, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// ScriptStruct SlateCore.CharacterEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_KEN7, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// ScriptStruct SlateCore.KeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_F6T4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// ScriptStruct SlateCore.NavigationEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_X6G5, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// ScriptStruct SlateCore.AnalogInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_SPNG, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// ScriptStruct SlateCore.FontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_7X8V, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_13GT, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0028);
		}

		// ScriptStruct SlateCore.SlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_ZY3E, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_4ZSR, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// ScriptStruct SlateCore.SlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_FIAZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// ScriptStruct SlateCore.TableRowStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x06B8);
		}

		// ScriptStruct SlateCore.SlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_ICTJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// ScriptStruct SlateCore.ButtonStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// ScriptStruct SlateCore.ComboButtonStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03A0);
		}

		// ScriptStruct SlateCore.ComboBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03D8);
		}

		// ScriptStruct SlateCore.EditableTextStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// ScriptStruct SlateCore.ScrollBarStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// ScriptStruct SlateCore.EditableTextBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// ScriptStruct SlateCore.TextBlockStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x01E8);
		}

		// ScriptStruct SlateCore.SpinBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// ScriptStruct SlateCore.FontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_5ZHQ, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// ScriptStruct SlateCore.TypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// ScriptStruct SlateCore.Typeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// ScriptStruct SlateCore.CompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_3Z8U, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// ScriptStruct SlateCore.CompositeSubFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// ScriptStruct SlateCore.CompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// ScriptStruct SlateCore.MotionEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_IOGU, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// ScriptStruct SlateCore.CaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_OWI1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// ScriptStruct SlateCore.FocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_2G0E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// ScriptStruct SlateCore.WindowStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0F50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x0FD8);
		}

		// ScriptStruct SlateCore.ScrollBorderStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// ScriptStruct SlateCore.ScrollBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// ScriptStruct SlateCore.DockTabStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_0INE, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// ScriptStruct SlateCore.TableColumnHeaderStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// ScriptStruct SlateCore.SplitterStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// ScriptStruct SlateCore.HeaderRowStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// ScriptStruct SlateCore.InlineTextImageStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_GCKB, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// ScriptStruct SlateCore.SliderStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_3FAK, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// ScriptStruct SlateCore.VolumeControlStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// ScriptStruct SlateCore.SearchBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_9I9V, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// ScriptStruct SlateCore.ExpandableAreaStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_6WU3, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// ScriptStruct SlateCore.ProgressBarStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// ScriptStruct SlateCore.InlineEditableTextBlockStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x09E8);
		}

		// ScriptStruct SlateCore.HyperlinkStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0478);
		}

		// ScriptStruct SlateCore.CheckBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_WCQ4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// ScriptStruct Slate.VirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// ScriptStruct Slate.InputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_LHIY, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// ScriptStruct Slate.Anchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// ScriptStruct MeshDescription.ElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// ScriptStruct MeshDescription.PolygonGroupID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// ScriptStruct MeshDescription.PolygonID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// ScriptStruct MeshDescription.VertexID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// ScriptStruct MeshDescription.EdgeID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// ScriptStruct MeshDescription.VertexInstanceID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// ScriptStruct MeshDescription.MeshTriangle
		TEST_METHOD(ScriptStruct__MeshDescription__MeshTriangle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriangle, 0x000C);
		}

		// ScriptStruct MaterialShaderQualitySettings.MaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0008);
		}

		// ScriptStruct Serialization.StructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_7H35, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_83VY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_GEFZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// ScriptStruct Serialization.StructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, UnknownData_9OEQ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, Bitfield, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0008);
		}

		// ScriptStruct Serialization.StructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPtr, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x0010);
		}

		// ScriptStruct Serialization.StructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_ULNC, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_I8YU, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0060);
		}

		// ScriptStruct Serialization.StructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_3YSP, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0040);
		}

		// ScriptStruct Serialization.StructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x00F0);
		}

		// ScriptStruct Serialization.StructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x01D8);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_7A33, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0018);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0030);
		}

		// ScriptStruct BuildPatchServices.SHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// ScriptStruct BuildPatchServices.ChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// ScriptStruct BuildPatchServices.FileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_S5J7, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_A0O9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_WU4M, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// ScriptStruct BuildPatchServices.ChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_156Q, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_R0K0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// ScriptStruct BuildPatchServices.CustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// ScriptStruct PropertyPath.PropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_OVP3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Field, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0020);
		}

		// ScriptStruct PropertyPath.CachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_VQ0Z, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_ZJ6B, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// UserDefinedStruct dialogueResponseData.dialogueResponseData
		TEST_METHOD(UserDefinedStruct__dialogueResponseData__dialogueResponseData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, ResponseText_2_3DC4585B4FB4F1C79DACFAA7F3A5BBD7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, ResponseNextID_5_B03F1ECB41D0DA0A004B2094CBDB92BE, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, ExitsDialogue_8_F9D0948C4212613C0EB7A99AE04781AB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, EntersSale_10_5F69660840FE1C4711AEEE9A575B671C, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, UnknownData_H9YQ, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, questEventName_14_5EE56CC74B5A697A833062903B51783A, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, runQuestOnEnd_17_865977E34D8EC2A2492838B4D89C5623, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueResponseData, LocalFunction_19_E42951F74D03145CE7173680C32D5F10, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FdialogueResponseData, 0x0032);
		}

		// ScriptStruct Engine.UniqueNetIdRepl
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_5NXH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// ScriptStruct Engine.TickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_BG2N, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_8K9B, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_FL20, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_7B85, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0050);
		}

		// ScriptStruct Engine.ActorTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_MNGB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0058);
		}

		// ScriptStruct Engine.RepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// ScriptStruct Engine.Vector_NetQuantize100
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// ScriptStruct Engine.RepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_KG72, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// ScriptStruct Engine.Vector_NetQuantize
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// ScriptStruct Engine.Vector_NetQuantizeNormal
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// ScriptStruct Engine.HitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_QG05, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// ScriptStruct Engine.ActorComponentTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_2ECH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0058);
		}

		// ScriptStruct Engine.SimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// ScriptStruct Engine.ExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, UnknownData_DUEH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x0010);
		}

		// ScriptStruct Engine.BasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_UX55, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// ScriptStruct Engine.RootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// ScriptStruct Engine.Vector_NetQuantize10
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// ScriptStruct Engine.RootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_SHPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_Q57I, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x00F8);
		}

		// ScriptStruct Engine.RootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_G76T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_IGOL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// ScriptStruct Engine.RepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_JKIS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_2QZW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_DKER, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0158);
		}

		// ScriptStruct Engine.SimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_B4HS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x0160);
		}

		// ScriptStruct Engine.LightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// ScriptStruct Engine.CollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// ScriptStruct Engine.ResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_NYZF, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x0010);
		}

		// ScriptStruct Engine.CollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// ScriptStruct Engine.WalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_W7B9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_5LVC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// ScriptStruct Engine.BodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_6JMV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_14E7, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_IHPA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_C0QL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_UAB5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_SULR, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_NCOZ, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0150);
		}

		// ScriptStruct Engine.PrimitiveComponentPostPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentPostPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentPostPhysicsTickFunction, UnknownData_ZADM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentPostPhysicsTickFunction, 0x0058);
		}

		// ScriptStruct Engine.SplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0060);
		}

		// ScriptStruct Engine.SplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_GVEW, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// ScriptStruct Engine.AudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_FRO6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_GYT5, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// ScriptStruct Engine.KeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_RF3V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0050);
		}

		// ScriptStruct Engine.IndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_36TE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0058);
		}

		// ScriptStruct Engine.RichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_4YA3, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// ScriptStruct Engine.RichCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PreInfinityExtrap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PostInfinityExtrap, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, UnknownData_QE4K, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, DefaultValue, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0070);
		}

		// ScriptStruct Engine.RuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0078);
		}

		// ScriptStruct Engine.BaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_818M, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_8MI5, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_SUCG, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00A0);
		}

		// ScriptStruct Engine.SoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// ScriptStruct Engine.SoundAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_AGU0, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x02A8);
		}

		// ScriptStruct Engine.MovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// ScriptStruct Engine.NavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_HO71, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_9NX3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// ScriptStruct Engine.FindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_3JMI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_0S8T, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// ScriptStruct Engine.NavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// ScriptStruct Engine.CharacterMovementComponentPostPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_LTT2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0058);
		}

		// ScriptStruct Engine.SkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_FUY7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0020);
		}

		// ScriptStruct Engine.SkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x0028);
		}

		// ScriptStruct Engine.SingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_RRN7, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_2NFL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// ScriptStruct Engine.PoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_X2JM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// ScriptStruct Engine.AnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_98FE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// ScriptStruct Engine.AnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// ScriptStruct Engine.AnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_NALA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// ScriptStruct Engine.AnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_52GG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_LB05, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// ScriptStruct Engine.AnimNotifyEvent
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_43IE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_QX7T, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_8RDF, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_JJAU, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00A8);
		}

		// ScriptStruct Engine.MarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, UnknownData_UQLL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0018);
		}

		// ScriptStruct Engine.PaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_OUPU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_PQ6S, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0030);
		}

		// ScriptStruct Engine.StaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_L4IO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, PaintedVertices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_ODT1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x00A8);
		}

		// ScriptStruct Engine.StreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// ScriptStruct Engine.LightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_7NMD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// ScriptStruct Engine.InstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// ScriptStruct Engine.InstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_XKBQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// ScriptStruct Engine.GeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// ScriptStruct Engine.LightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_0SH3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_HG1Q, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0014);
		}

		// ScriptStruct Engine.MaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// ScriptStruct Engine.MaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_ITIQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// ScriptStruct Engine.ScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, UnknownData_AKJU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0028);
		}

		// ScriptStruct Engine.VectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// ScriptStruct Engine.TextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// ScriptStruct Engine.FontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_UNQI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_OpacityMaskClipValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_BlendMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_ShadingModel, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_DitheredLODTransition, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_CastDynamicShadowAsMasked, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_TwoSided, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_RCLQ, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_VC8N, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_HSY0, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0014);
		}

		// ScriptStruct Engine.StaticSwitchParameter
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, bOverride, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_ALB8, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_3LJ1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// ScriptStruct Engine.StaticComponentMaskParameter
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, bOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, UnknownData_CUKJ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// ScriptStruct Engine.StaticTerrainLayerWeightParameter
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_FG82, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_BNI7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x0030);
		}

		// ScriptStruct Engine.MaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// ScriptStruct Engine.StaticMaterialLayersParameter
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, bOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_JWEY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_9Y6Z, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// ScriptStruct Engine.StaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_SNYQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// ScriptStruct Engine.BlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bIsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_H5UU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_P5VN, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0050);
		}

		// ScriptStruct Engine.WeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_YCGH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// ScriptStruct Engine.WeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// ScriptStruct Engine.PostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMethod, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_BEEX, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_XGNA, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMaxBokehSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBokehShape, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldColorThreshold, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSizeThreshold, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_PX3J, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x04E0);
		}

		// ScriptStruct Engine.MinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_H3IU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_FNJZ, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_4H2R, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_O0MJ, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x0530);
		}

		// ScriptStruct Engine.SoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_Q9IO, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_XC24, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0010);
		}

		// ScriptStruct Engine.SoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_KVGQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x0010);
		}

		// ScriptStruct Engine.SoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_NBMV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x0010);
		}

		// ScriptStruct Engine.SubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_S6XF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// ScriptStruct Engine.LocalizedSubtitle
		TEST_METHOD(ScriptStruct__Engine__LocalizedSubtitle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, LanguageExt, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, Subtitles, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, UnknownData_L448, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSubtitle, 0x0028);
		}

		// ScriptStruct Engine.InterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_FUV7, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// ScriptStruct Engine.BoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_H3BH, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0018);
		}

		// ScriptStruct Engine.PerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, UnknownData_ZNVF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0020);
		}

		// ScriptStruct Engine.BlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// ScriptStruct Engine.EditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// ScriptStruct Engine.BlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_04UV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// ScriptStruct Engine.AnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// ScriptStruct Engine.BakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_LIO9, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// ScriptStruct Engine.BakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_JD2L, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_NSRO, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0048);
		}

		// ScriptStruct Engine.AnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// ScriptStruct Engine.AnimationTransitionBetweenStates
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_1WT2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_9V0E, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// ScriptStruct Engine.BakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_GDEV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// ScriptStruct Engine.SmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_8IL6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x0010);
		}

		// ScriptStruct Engine.AnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, UnknownData_L4NR, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0020);
		}

		// ScriptStruct Engine.FloatCurve
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0090);
		}

		// ScriptStruct Engine.RawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// ScriptStruct Engine.AnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_5UN1, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// ScriptStruct Engine.AnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// ScriptStruct Engine.AlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_6OQS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_3V3F, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0038);
		}

		// ScriptStruct Engine.AnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, UnknownData_5T7X, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x0010);
		}

		// ScriptStruct Engine.MarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_YRTU, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// ScriptStruct Engine.CompositeSection
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_W1M0, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// ScriptStruct Engine.SlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// ScriptStruct Engine.BranchingPoint
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// ScriptStruct Engine.BranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_WJ2E, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// ScriptStruct Engine.TimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// ScriptStruct Engine.TimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_FVJH, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// ScriptStruct Engine.TrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// ScriptStruct Engine.AnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// ScriptStruct Engine.DirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// ScriptStruct Engine.PrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_4LJZ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_3QF0, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x0010);
		}

		// ScriptStruct Engine.PrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_YMTU, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_B562, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// ScriptStruct Engine.PrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x0020);
		}

		// ScriptStruct Engine.AssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// ScriptStruct Engine.AssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// ScriptStruct Engine.AtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// ScriptStruct Engine.AudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_LXO2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// ScriptStruct Engine.ReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_NV1Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_1P6Q, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// ScriptStruct Engine.InteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_788W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// ScriptStruct Engine.EditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_V0TP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// ScriptStruct Engine.FilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// ScriptStruct Engine.ImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// ScriptStruct Engine.EditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// ScriptStruct Engine.BuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// ScriptStruct Engine.BuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// ScriptStruct Engine.BuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// ScriptStruct Engine.BuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// ScriptStruct Engine.MaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// ScriptStruct Engine.ParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// ScriptStruct Engine.BlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// ScriptStruct Engine.ExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// ScriptStruct Engine.EditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_TVDC, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// ScriptStruct Engine.LaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// ScriptStruct Engine.BoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_UYRY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// ScriptStruct Engine.VirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// ScriptStruct Engine.SmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_RPO7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// ScriptStruct Engine.AnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// ScriptStruct Engine.BlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, UnknownData_DM9I, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0020);
		}

		// ScriptStruct Engine.KShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_I2LD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_KWY0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_6WAL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_F38N, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// ScriptStruct Engine.KSphereElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// ScriptStruct Engine.KBoxElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_9O12, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// ScriptStruct Engine.KSphylElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// ScriptStruct Engine.KConvexElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_BADX, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_IGJ8, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00A0);
		}

		// ScriptStruct Engine.KTaperedCapsuleElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_QEZI, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// ScriptStruct Engine.KAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_7EME, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// ScriptStruct Engine.BranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, UnknownData_KYLN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x0010);
		}

		// ScriptStruct Engine.InputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// ScriptStruct Engine.BuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_J1QB, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_T8OS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0028);
		}

		// ScriptStruct Engine.FOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_Q72A, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// ScriptStruct Engine.ROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// ScriptStruct Engine.VOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// ScriptStruct Engine.CanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// ScriptStruct Engine.ActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_JV36, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// ScriptStruct Engine.ViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_Q79Q, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_6C6T, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_15YU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0010);
		}

		// ScriptStruct Engine.LatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// ScriptStruct Engine.UpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_G66H, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// ScriptStruct Engine.DelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// ScriptStruct Engine.CollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_VU71, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, HelpMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_KTF0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0060);
		}

		// ScriptStruct Engine.CustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_935Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_6EE7, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0018);
		}

		// ScriptStruct Engine.CustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// ScriptStruct Engine.Redirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// ScriptStruct Engine.BlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// ScriptStruct Engine.StatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// ScriptStruct Engine.StatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_9X20, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// ScriptStruct Engine.GameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// ScriptStruct Engine.ClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_EVER, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x0040);
		}

		// ScriptStruct Engine.PluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// ScriptStruct Engine.StructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// ScriptStruct Engine.DropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// ScriptStruct Engine.NetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// ScriptStruct Engine.DebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_LK5M, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// ScriptStruct Engine.CullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// ScriptStruct Engine.NamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, UnknownData_UPTL, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x0010);
		}

		// ScriptStruct Engine.TableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_ZXPJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// ScriptStruct Engine.DebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_DTSC, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_D3K9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_F25G, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// ScriptStruct Engine.RollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_9LH5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_SXT2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_IW1X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00A0);
		}

		// ScriptStruct Engine.TextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_6G1K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_KBWM, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_YN7Z, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_XTE1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0050);
		}

		// ScriptStruct Engine.DialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// ScriptStruct Engine.DialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// ScriptStruct Engine.LightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_PD26, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// ScriptStruct Engine.LightmassDirectionalLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// ScriptStruct Engine.EdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_H26K, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x0020);
		}

		// ScriptStruct Engine.EdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_2K6Y, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0060);
		}

		// ScriptStruct Engine.FontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_VOTT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// ScriptStruct Engine.FontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_H5RE, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_F0BK, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_1LQ5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_UKY8, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_9MG9, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_D2VZ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_E4ZM, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// ScriptStruct Engine.ForceFeedbackAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00A0);
		}

		// ScriptStruct Engine.ForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_O8IM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0080);
		}

		// ScriptStruct Engine.PredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_ZEPS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_30MC, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_RD0F, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_0EKW, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// ScriptStruct Engine.PredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// ScriptStruct Engine.PredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_1Y80, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// ScriptStruct Engine.HapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x00F0);
		}

		// ScriptStruct Engine.HLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_C4TX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// ScriptStruct Engine.ImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_8NB4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_VGHE, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// ScriptStruct Engine.ComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// ScriptStruct Engine.ComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0080);
		}

		// ScriptStruct Engine.BlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_92BK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// ScriptStruct Engine.BlueprintInputActionDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_C1WE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_SL69, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0020);
		}

		// ScriptStruct Engine.BlueprintInputAxisDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, UnknownData_JUDZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0018);
		}

		// ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_HPY1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// ScriptStruct Engine.CachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_GTDF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// ScriptStruct Engine.BlueprintInputKeyDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_RU2M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_5FN2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// ScriptStruct Engine.InputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_KQDN, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// ScriptStruct Engine.InputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// ScriptStruct Engine.InputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_T3S0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// ScriptStruct Engine.InputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_PFDQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// ScriptStruct Engine.BlueprintInputTouchDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_EKR7, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// ScriptStruct Engine.CurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_KC5Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// ScriptStruct Engine.CurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// ScriptStruct Engine.InterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_1L88, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// ScriptStruct Engine.AnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_AAR5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_ABOR, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// ScriptStruct Engine.BoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_EDRY, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// ScriptStruct Engine.DirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, UnknownData_Y8JY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0018);
		}

		// ScriptStruct Engine.EventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, UnknownData_IS4A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x0010);
		}

		// ScriptStruct Engine.PrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_4Q8Y, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// ScriptStruct Engine.InterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, UnknownData_EJV6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x0010);
		}

		// ScriptStruct Engine.InterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// ScriptStruct Engine.ParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// ScriptStruct Engine.SoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_UJTE, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// ScriptStruct Engine.ToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_PK66, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// ScriptStruct Engine.VisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_HKUC, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// ScriptStruct Engine.VectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_S877, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// ScriptStruct Engine.FloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_2R0M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// ScriptStruct Engine.DrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_FGIH, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// ScriptStruct Engine.UserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_9CCS, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// ScriptStruct Engine.GenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// ScriptStruct Engine.CollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// ScriptStruct Engine.TimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// ScriptStruct Engine.DebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_SB1Q, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// ScriptStruct Engine.FormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_2NTY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_2532, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// ScriptStruct Engine.LayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_5H69, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_0W37, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0028);
		}

		// ScriptStruct Engine.LevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_TXX5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_WR35, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0080);
		}

		// ScriptStruct Engine.PSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_A3LY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// ScriptStruct Engine.PSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_K4XZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// ScriptStruct Engine.WorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_11OZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// ScriptStruct Engine.LightmassPointLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// ScriptStruct Engine.MaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, UnknownData_PW18, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x0010);
		}

		// ScriptStruct Engine.ScalarMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x0010);
		}

		// ScriptStruct Engine.VectorMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x0010);
		}

		// ScriptStruct Engine.ColorMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x0010);
		}

		// ScriptStruct Engine.MaterialAttributesInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, UnknownData_8UEA, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0018);
		}

		// ScriptStruct Engine.MaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// ScriptStruct Engine.MaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// ScriptStruct Engine.MaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_SX05, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_NWHY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// ScriptStruct Engine.CustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_HKCS, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x0020);
		}

		// ScriptStruct Engine.CollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// ScriptStruct Engine.CollectionScalarParameter
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, UnknownData_ZNAJ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x0020);
		}

		// ScriptStruct Engine.CollectionVectorParameter
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// ScriptStruct Engine.InterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// ScriptStruct Engine.CameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// ScriptStruct Engine.PurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// ScriptStruct Engine.NavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_P7Y8, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// ScriptStruct Engine.NavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_L420, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_SN10, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_4BUV, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_FWFX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0038);
		}

		// ScriptStruct Engine.NavigationLink
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0050);
		}

		// ScriptStruct Engine.NavigationSegmentLink
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0068);
		}

		// ScriptStruct Engine.NodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_S1F0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// ScriptStruct Engine.DistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_BV90, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_7JQG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0028);
		}

		// ScriptStruct Engine.RawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0028);
		}

		// ScriptStruct Engine.RawDistributionVector
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0050);
		}

		// ScriptStruct Engine.RawDistributionFloat
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0038);
		}

		// ScriptStruct Engine.BeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_LNVL, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// ScriptStruct Engine.ParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_FPTZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// ScriptStruct Engine.ParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_I2WL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_P0CG, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// ScriptStruct Engine.LocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, UnknownData_OSUR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0018);
		}

		// ScriptStruct Engine.OrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_B8PU, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// ScriptStruct Engine.EmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_1GNW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_GO38, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_KEWG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0050);
		}

		// ScriptStruct Engine.ParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_65QC, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_KAL8, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// ScriptStruct Engine.FloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0028);
		}

		// ScriptStruct Engine.GPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_9176, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_08SU, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_3A5D, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_KVUO, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_3DLI, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_8Q6G, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x02C0);
		}

		// ScriptStruct Engine.GPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_Q6UR, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_JKOO, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_N2GU, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// ScriptStruct Engine.ParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_ZNBN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// ScriptStruct Engine.LODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// ScriptStruct Engine.NamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// ScriptStruct Engine.ParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_CESI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_659E, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// ScriptStruct Engine.PhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_WM8U, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_WVCX, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0028);
		}

		// ScriptStruct Engine.TireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_J4BD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// ScriptStruct Engine.PhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x0030);
		}

		// ScriptStruct Engine.ConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// ScriptStruct Engine.ConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_1N7P, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// ScriptStruct Engine.LinearConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_N4G0, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// ScriptStruct Engine.ConeConstraint
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_7VYF, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// ScriptStruct Engine.TwistConstraint
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_CSCJ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// ScriptStruct Engine.ConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_2FC3, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// ScriptStruct Engine.LinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_UOML, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// ScriptStruct Engine.AngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_L3RF, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// ScriptStruct Engine.ConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_5VC9, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// ScriptStruct Engine.ConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_1CC3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_FG3F, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_1LA1, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// ScriptStruct Engine.PhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, UnknownData_ZX3K, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0110);
		}

		// ScriptStruct Engine.RigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// ScriptStruct Engine.PhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_031X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x0010);
		}

		// ScriptStruct Engine.BroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_3IQT, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0024);
		}

		// ScriptStruct Engine.EngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_BDFJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// ScriptStruct Engine.CameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_2004, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x0540);
		}

		// ScriptStruct Engine.TViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_15HT, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_TBW5, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0550);
		}

		// ScriptStruct Engine.KeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_SS6Q, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// ScriptStruct Engine.PoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// ScriptStruct Engine.PoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// ScriptStruct Engine.PreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// ScriptStruct Engine.CollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// ScriptStruct Engine.RigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_TQRU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_FX8W, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0018);
		}

		// ScriptStruct Engine.TransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// ScriptStruct Engine.TransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// ScriptStruct Engine.Node
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_HVQ2, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// ScriptStruct Engine.BPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// ScriptStruct Engine.MeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_GAVG, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// ScriptStruct Engine.SkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_7K3A, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// ScriptStruct Engine.BoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_Q3FI, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// ScriptStruct Engine.PerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// ScriptStruct Engine.SkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_3XEF, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x0020);
		}

		// ScriptStruct Engine.SkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_VNY6, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x0068);
		}

		// ScriptStruct Engine.PerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_QTIT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x0010);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_BXD5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_MCVL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_FXUW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// ScriptStruct Engine.BoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_WJJJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x0010);
		}

		// ScriptStruct Engine.SkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_VL85, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0040);
		}

		// ScriptStruct Engine.SoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_43O7, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_UB6C, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_2JT7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x002C);
		}

		// ScriptStruct Engine.PassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// ScriptStruct Engine.SourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_SEGH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// ScriptStruct Engine.SoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_KW1T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_W28A, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// ScriptStruct Engine.AudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_PB7W, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0038);
		}

		// ScriptStruct Engine.SoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_MPZN, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0018);
		}

		// ScriptStruct Engine.DialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// ScriptStruct Engine.DistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// ScriptStruct Engine.ModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_GQ12, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// ScriptStruct Engine.SplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// ScriptStruct Engine.StaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_4SZI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// ScriptStruct Engine.SubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x0050);
		}

		// ScriptStruct Engine.TimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, UnknownData_ZJJI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0018);
		}

		// ScriptStruct Engine.TimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_LWY0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// ScriptStruct Engine.TimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_OEHO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// ScriptStruct Engine.TimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_ACCT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// ScriptStruct Engine.Timeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_CCVW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_QPR1, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionProperty, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// ScriptStruct Engine.TTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_P4NV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0010);
		}

		// ScriptStruct Engine.TTEventTrack
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0018);
		}

		// ScriptStruct Engine.TTFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0018);
		}

		// ScriptStruct Engine.TTVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0018);
		}

		// ScriptStruct Engine.TTLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0018);
		}

		// ScriptStruct Engine.TouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// ScriptStruct Engine.HardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// ScriptStruct Engine.VirtualTextureLayer
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureLayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bCompressed, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bHasAlpha, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, CompressionSettings, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureLayer, 0x0004);
		}

		// ScriptStruct Engine.VoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// ScriptStruct Engine.MaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_4H0Z, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bNormalMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bMetallicMap, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_AA6Y, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bRoughnessMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_NGWL, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bSpecularMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_K5MB, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bEmissiveMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMap, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_T31A, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMaskMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_MISJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bAmbientOcclusionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_OCNB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_SAG6, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x008C);
		}

		// ScriptStruct Engine.MeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_RVSI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportNormalMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportMetallicMap, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportRoughnessMap, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportSpecularMap, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCalculateCorrectLODModel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_XW1B, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bOverrideTransferDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_3XKJ, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseHardAngleThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_V2J1, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_IOQ6, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bComputeLightMapResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bRecalculateNormals, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bBakeVertexData, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseLandscapeCulling, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowAdjacency, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowDistanceField, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bReuseMeshLightmapUVs, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCreateCollision, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowVertexColors, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bGenerateLightmapUVs, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_PNQB, 0x00D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00D4);
		}

		// ScriptStruct Engine.MeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bGenerateLightMapUV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_UN0Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bComputedLightMapResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bImportVertexColors, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bPivotPointAtZero, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergePhysicsData, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeMaterials, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_MORP, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bBakeVertexDataToMesh, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseVertexDataForBakingMaterial, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseTextureBinning, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bReuseMeshLightmapUVs, 0x009F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeEquivalentMaterials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_L57I, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bCalculateCorrectLODModel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_17UV, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, ExportSpecificLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseLandscapeCulling, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bIncludeImposters, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bAllowDistanceField, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportNormalMap, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportMetallicMap, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportRoughnessMap, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportSpecularMap, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_IFD3, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MergedMaterialAtlasResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_A85X, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00CC);
		}

		// ScriptStruct Engine.HierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_NM5N, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bUseOverrideDrawDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bSimplifyMesh, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_4U0H, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bOnlyGenerateClustersForVolumes, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bReusePreviousLevelClusters, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_EUKQ, 0x01BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x01C0);
		}

		// ScriptStruct Engine.LightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_G0AQ, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_A9F5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_L81P, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x0054);
		}

		// ScriptStruct Engine.NetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// ScriptStruct Engine.VectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0028);
		}

		// ScriptStruct Engine.Vector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0028);
		}

		// ScriptStruct Engine.FloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// ScriptStruct Engine.VectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// ScriptStruct Engine.ExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// ScriptStruct Engine.Vector2MaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x0010);
		}

		// ScriptStruct Engine.BranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_8DCC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// ScriptStruct Engine.PlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_S8A4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_HBIM, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// ScriptStruct Engine.PlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_1E8S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// ScriptStruct Engine.ExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_XGP7, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_B4KL, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_S0EI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0068);
		}

		// ScriptStruct Engine.ExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_5CZH, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_0H96, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, EvaluateGraphExposedInputs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0030);
		}

		// ScriptStruct Engine.InputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// ScriptStruct Engine.InputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInitialized, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpolatedResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// ScriptStruct Engine.InputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_GW9J, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0050);
		}

		// ScriptStruct Engine.InputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// ScriptStruct Engine.PoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_VJK9, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// ScriptStruct Engine.ComponentSpacePoseLink
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// ScriptStruct Engine.AnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_7DQF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0570);
		}

		// ScriptStruct Engine.KeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_0GYY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// ScriptStruct Engine.AnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_JGIC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_AYD5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_JU6S, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0058);
		}

		// ScriptStruct Engine.BlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_60AF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_NKOX, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// ScriptStruct Engine.BlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_I1DY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0090);
		}

		// ScriptStruct Engine.PoseLink
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// ScriptStruct Engine.PerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// ScriptStruct Engine.AnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_LIZN, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x0010);
		}

		// ScriptStruct Engine.AnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_ZQLC, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x0010);
		}

		// ScriptStruct Engine.AnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_SBNC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0078);
		}

		// ScriptStruct Engine.AnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_6PQH, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// ScriptStruct Engine.AnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_S4IK, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_G1PM, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// ScriptStruct Engine.ComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// ScriptStruct Engine.LocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// ScriptStruct Engine.NamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_UZZH, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// ScriptStruct Engine.NamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, UnknownData_G8K3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x0010);
		}

		// ScriptStruct Engine.NamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, UnknownData_P331, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0018);
		}

		// ScriptStruct Engine.NamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, UnknownData_8CTB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x0010);
		}

		// ScriptStruct Engine.AnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// ScriptStruct Engine.AnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_JOBE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// ScriptStruct Engine.AnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_T7KT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// ScriptStruct Engine.StateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_8238, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// ScriptStruct Engine.RootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// ScriptStruct Engine.VectorCurve
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0170);
		}

		// ScriptStruct Engine.TransformCurve
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x0470);
		}

		// ScriptStruct Engine.SlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_KZWO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_HP3D, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// ScriptStruct Engine.A2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// ScriptStruct Engine.A2CSPose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_1G40, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// ScriptStruct Engine.QueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_Q7JJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_QAGZ, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// ScriptStruct Engine.AnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_LV0X, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_4G3G, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_LBN0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_E93A, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_HLO4, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_XFFA, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, ActualAlpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_HS0H, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x0068);
		}

		// ScriptStruct Engine.AnimNode_SaveCachedPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, GlobalWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_HH5G, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00D8);
		}

		// ScriptStruct Engine.AnimNode_SequencePlayer
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_RC8F, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x00A0);
		}

		// ScriptStruct Engine.AnimNode_StateMachine
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_DH95, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, CurrentState, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, ElapsedTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_SJ2X, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00E0);
		}

		// ScriptStruct Engine.AnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_1RT7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// ScriptStruct Engine.AnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_VBTP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_D9IA, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// ScriptStruct Engine.AnimNode_SubInput
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInput, UnknownData_1ZB5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInput, 0x0068);
		}

		// ScriptStruct Engine.AnimNode_SubInstance
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, Tag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceToRun, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SubInstanceProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SourcePropertyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, DestPropertyNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, UnknownData_ZQDK, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInstance, 0x00C8);
		}

		// ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_5Z8N, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_7K9B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, CacheFramesRemaining, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_MPH0, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0078);
		}

		// ScriptStruct Engine.AnimNode_TransitionResult
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_0FUW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0048);
		}

		// ScriptStruct Engine.AnimNode_UseCachedPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0048);
		}

		// ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0040);
		}

		// ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0040);
		}

		// ScriptStruct Engine.CompressedSegment
		TEST_METHOD(ScriptStruct__Engine__CompressedSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedSegment, UnknownData_VHQE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedSegment, 0x0010);
		}

		// ScriptStruct Engine.CompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// ScriptStruct Engine.CurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// ScriptStruct Engine.ScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// ScriptStruct Engine.RotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// ScriptStruct Engine.TranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// ScriptStruct Engine.RawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// ScriptStruct Engine.AnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// ScriptStruct Engine.AnimSingleNodeInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_TRKO, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x06F0);
		}

		// ScriptStruct Engine.AnimNode_SingleNode
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_LPXE, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0050);
		}

		// ScriptStruct Engine.AnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_3YDM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// ScriptStruct Engine.AnimationState
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// ScriptStruct Engine.AnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_F0ZB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// ScriptStruct Engine.PerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// ScriptStruct Engine.AssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_M5QQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// ScriptStruct Engine.NavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_3WWA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// ScriptStruct Engine.GridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// ScriptStruct Engine.BPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// ScriptStruct Engine.EditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_KRC6, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// ScriptStruct Engine.BPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// ScriptStruct Engine.BPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_A9IT, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D8);
		}

		// ScriptStruct Engine.BlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_5HUR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// ScriptStruct Engine.CompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_L9V4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// ScriptStruct Engine.EventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_0EI6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// ScriptStruct Engine.BlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_MK25, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// ScriptStruct Engine.PointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_72DE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// ScriptStruct Engine.DebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_NUPW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// ScriptStruct Engine.NodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_RO1V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// ScriptStruct Engine.BookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_11XP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// ScriptStruct Engine.BookmarkJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// ScriptStruct Engine.Bookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_QY3D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// ScriptStruct Engine.CachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_ZLKE, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0028);
		}

		// ScriptStruct Engine.CachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_3ZTF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x0020);
		}

		// ScriptStruct Engine.CachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_B473, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// ScriptStruct Engine.CachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_EH11, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x0020);
		}

		// ScriptStruct Engine.CachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_KZIF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// ScriptStruct Engine.DummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_VE2N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// ScriptStruct Engine.CanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// ScriptStruct Engine.WrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// ScriptStruct Engine.TextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// ScriptStruct Engine.AutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_LX2Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_CBTZ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// ScriptStruct Engine.RuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x01C8);
		}

		// ScriptStruct Engine.CurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// ScriptStruct Engine.DataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// ScriptStruct Engine.DataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// ScriptStruct Engine.LevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_QM6E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// ScriptStruct Engine.GraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// ScriptStruct Engine.EdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// ScriptStruct Engine.EdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_WLOE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// ScriptStruct Engine.EdGraphSchemaAction_NewNode
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// ScriptStruct Engine.ScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_JBY9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// ScriptStruct Engine.URL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_Q972, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_UTS5, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0070);
		}

		// ScriptStruct Engine.FullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_8W3K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// ScriptStruct Engine.LevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_EBUS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// ScriptStruct Engine.NamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_AEP1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// ScriptStruct Engine.WorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_GBTY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_JCYN, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_360G, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_KMAQ, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0298);
		}

		// ScriptStruct Engine.ExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_JNBV, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// ScriptStruct Engine.TickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_MJTG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// ScriptStruct Engine.DepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_B9PC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// ScriptStruct Engine.FontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_A2TN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// ScriptStruct Engine.ComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_0FUL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0018);
		}

		// ScriptStruct Engine.DamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_DXO8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// ScriptStruct Engine.RadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// ScriptStruct Engine.RadialDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// ScriptStruct Engine.PointDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// ScriptStruct Engine.MeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_RN72, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_8OR6, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// ScriptStruct Engine.POV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// ScriptStruct Engine.AnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_IOF8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_8MM4, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_MVIR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// ScriptStruct Engine.AnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, UnknownData_NAVQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x0010);
		}

		// ScriptStruct Engine.AnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// ScriptStruct Engine.MTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// ScriptStruct Engine.OverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_IXVX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_3LXY, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// ScriptStruct Engine.SwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_8KDG, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// ScriptStruct Engine.LightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_GDYR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_2DFR, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// ScriptStruct Engine.BasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// ScriptStruct Engine.FractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// ScriptStruct Engine.RigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_9YKM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// ScriptStruct Engine.CollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// ScriptStruct Engine.RigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_IFBS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_KXDS, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// ScriptStruct Engine.ActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_A5M0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// ScriptStruct Engine.ClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// ScriptStruct Engine.ClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// ScriptStruct Engine.IntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// ScriptStruct Engine.IntegralCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_AX77, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0070);
		}

		// ScriptStruct Engine.InterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// ScriptStruct Engine.CameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// ScriptStruct Engine.SubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_Z3HT, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// ScriptStruct Engine.SupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_THSK, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// ScriptStruct Engine.LatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_I3Z7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x00A0);
		}

		// ScriptStruct Engine.LevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_B02Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_EU0P, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_TXDQ, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x0134);
		}

		// ScriptStruct Engine.StreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_WXMO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// ScriptStruct Engine.DynamicTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_694X, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// ScriptStruct Engine.BatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_IYKE, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// ScriptStruct Engine.BatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_RG0N, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// ScriptStruct Engine.ClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_22J4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// ScriptStruct Engine.ParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_Q3PK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// ScriptStruct Engine.FunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// ScriptStruct Engine.FunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_MGNT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// ScriptStruct Engine.ScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_ZRNE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// ScriptStruct Engine.MemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_EDHV, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// ScriptStruct Engine.MeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_5DYB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_G5KU, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// ScriptStruct Engine.MeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bRecalculateNormals, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bGenerateUniqueLightmapUVs, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bKeepSymmetry, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bVisibilityAided, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bCullOccluded, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_D30B, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// ScriptStruct Engine.NameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, UnknownData_1BGQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x0010);
		}

		// ScriptStruct Engine.NameCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0068);
		}

		// ScriptStruct Engine.NavDataConfig
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClassName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0068);
		}

		// ScriptStruct Engine.PacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0014);
		}

		// ScriptStruct Engine.FastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_M116, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x00B0);
		}

		// ScriptStruct Engine.FastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// ScriptStruct Engine.ParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// ScriptStruct Engine.BeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, UnknownData_KBLQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x0010);
		}

		// ScriptStruct Engine.ParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_WF4N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// ScriptStruct Engine.ParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_C5FG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// ScriptStruct Engine.PlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_BO0L, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_WXFI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// ScriptStruct Engine.PreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// ScriptStruct Engine.PreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// ScriptStruct Engine.SpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// ScriptStruct Engine.RootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// ScriptStruct Engine.RootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_MU2I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// ScriptStruct Engine.RootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_LRRK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_THR4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_0HI8, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_ERPO, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x00A0);
		}

		// ScriptStruct Engine.RootMotionSource_JumpForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_EYWS, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_1MR7, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_DSK3, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// ScriptStruct Engine.RootMotionSource_MoveToForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_3H65, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// ScriptStruct Engine.RootMotionSource_RadialForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_K1RK, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_WL2Z, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_Q4BE, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// ScriptStruct Engine.RootMotionSource_ConstantForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_0FWA, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// ScriptStruct Engine.CameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_TOYJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x002C);
		}

		// ScriptStruct Engine.GaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// ScriptStruct Engine.ConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_4TKU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// ScriptStruct Engine.LensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_OBOL, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_NBUG, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// ScriptStruct Engine.LensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_HAPK, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// ScriptStruct Engine.LensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_MING, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// ScriptStruct Engine.FilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// ScriptStruct Engine.ColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// ScriptStruct Engine.ColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_UFCT, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// ScriptStruct Engine.ClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// ScriptStruct Engine.ClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_ETM7, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_TRGO, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// ScriptStruct Engine.SkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_GUQA, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_7KMP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// ScriptStruct Engine.BoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_H2JU, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0018);
		}

		// ScriptStruct Engine.SkeletalMeshComponentClothTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_7RDF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0058);
		}

		// ScriptStruct Engine.SkeletalMeshComponentEndPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_T9D8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0058);
		}

		// ScriptStruct Engine.NameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// ScriptStruct Engine.RigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// ScriptStruct Engine.BoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// ScriptStruct Engine.ReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// ScriptStruct Engine.SkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// ScriptStruct Engine.SmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_G66B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0060);
		}

		// ScriptStruct Engine.CurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_5ACA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// ScriptStruct Engine.AnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_T5E0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// ScriptStruct Engine.SoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_FTTT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// ScriptStruct Engine.SoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_VSXT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// ScriptStruct Engine.StreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_7VX9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// ScriptStruct Engine.MaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_ECKZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// ScriptStruct Engine.AssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_3U9Q, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// ScriptStruct Engine.MeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_BJTJ, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// ScriptStruct Engine.MeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// ScriptStruct Engine.StaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_L6F8, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// ScriptStruct Engine.StaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_W39S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_CLWP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_COAB, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// ScriptStruct Engine.StringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_XLJY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// ScriptStruct Engine.StringCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0078);
		}

		// ScriptStruct Engine.TexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_7BKZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0020);
		}

		// ScriptStruct Engine.TextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_DHS4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0080);
		}

		// ScriptStruct Engine.StreamingTexturePrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTexturePrimitiveInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, UnknownData_UMZN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTexturePrimitiveInfo, 0x0030);
		}

		// ScriptStruct Engine.TimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_JU25, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// ScriptStruct Engine.StartAsyncSimulationFunction
		TEST_METHOD(ScriptStruct__Engine__StartAsyncSimulationFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartAsyncSimulationFunction, UnknownData_WHC5, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartAsyncSimulationFunction, 0x0058);
		}

		// ScriptStruct Engine.EndPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_Y0BU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0058);
		}

		// ScriptStruct Engine.StartPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_9QQZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0058);
		}

		// ScriptStruct Engine.LevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_61WN, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// ScriptStruct EngineMessages.EngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// ScriptStruct EngineMessages.EngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_6S1L, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_LHQ7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// ScriptStruct EngineMessages.EngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_J0G2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// ScriptStruct HeadMountedDisplay.XRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, UnknownData_GGAU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x0010);
		}

		// ScriptStruct LevelSequence.LevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_LMNQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// ScriptStruct LevelSequence.LevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// ScriptStruct LevelSequence.LevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// ScriptStruct LevelSequence.LevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// ScriptStruct LevelSequence.LevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_FU9Z, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// ScriptStruct LevelSequence.LevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_81YS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// ScriptStruct LevelSequence.LevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x0088);
		}

		// ScriptStruct LevelSequence.BoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_1JQ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// ScriptStruct LevelSequence.LevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_C0G3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// ScriptStruct MediaAssets.MediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// ScriptStruct CoreUObject.JoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, UnknownData_6P3D, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0018);
		}

		// ScriptStruct CoreUObject.UniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_047H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// ScriptStruct CoreUObject.Guid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// ScriptStruct CoreUObject.Rotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// ScriptStruct CoreUObject.Vector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// ScriptStruct CoreUObject.Vector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// ScriptStruct CoreUObject.Vector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// ScriptStruct CoreUObject.TwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// ScriptStruct CoreUObject.Plane
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// ScriptStruct CoreUObject.Quat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// ScriptStruct CoreUObject.PackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// ScriptStruct CoreUObject.PackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// ScriptStruct CoreUObject.PackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// ScriptStruct CoreUObject.IntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// ScriptStruct CoreUObject.IntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// ScriptStruct CoreUObject.Color
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// ScriptStruct CoreUObject.LinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// ScriptStruct CoreUObject.Box
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_TN51, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// ScriptStruct CoreUObject.Box2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_1CP4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// ScriptStruct CoreUObject.BoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// ScriptStruct CoreUObject.OrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// ScriptStruct CoreUObject.Matrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// ScriptStruct CoreUObject.InterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_GD1Z, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// ScriptStruct CoreUObject.InterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_SANW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_5P8Z, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// ScriptStruct CoreUObject.InterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_H0GZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_N25S, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// ScriptStruct CoreUObject.InterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_HWJU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_631P, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_A6HR, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// ScriptStruct CoreUObject.InterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_YPTC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_Z38Z, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// ScriptStruct CoreUObject.InterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_YEBG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_7MLX, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// ScriptStruct CoreUObject.InterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_TSOI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// ScriptStruct CoreUObject.Transform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoreUObject_FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoreUObject_FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoreUObject_FTransform, UnknownData_DKMG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoreUObject_FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoreUObject_FTransform, UnknownData_37PO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCoreUObject_FTransform, 0x0030);
		}

		// ScriptStruct CoreUObject.RandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// ScriptStruct CoreUObject.DateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_BNST, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// ScriptStruct CoreUObject.FrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// ScriptStruct CoreUObject.FrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// ScriptStruct CoreUObject.FrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// ScriptStruct CoreUObject.QualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// ScriptStruct CoreUObject.Timecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_6F2O, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// ScriptStruct CoreUObject.Timespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_GVFP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// ScriptStruct CoreUObject.SoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// ScriptStruct CoreUObject.SoftClassPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// ScriptStruct CoreUObject.PrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// ScriptStruct CoreUObject.PrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// ScriptStruct CoreUObject.FallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_LQ79, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// ScriptStruct CoreUObject.FloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_VJT9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.FloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// ScriptStruct CoreUObject.Int32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_ZMYV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.Int32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// ScriptStruct CoreUObject.FloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// ScriptStruct CoreUObject.Int32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// ScriptStruct CoreUObject.PolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_4Y3Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B0);
		}

		// ScriptStruct CoreUObject.AutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_RZRJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// ScriptStruct CoreUObject.AutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_HQZN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// ScriptStruct EngineSettings.AutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_PNU2, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// ScriptStruct EngineSettings.GameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// ScriptStruct MovieSceneCapture.CompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// ScriptStruct MovieSceneCapture.CaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// ScriptStruct MovieSceneCapture.MovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_UD6N, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_Y6YT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_5S7B, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0050);
		}

		// ScriptStruct MovieSceneCapture.FrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// ScriptStruct MovieSceneCapture.CapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_T6D4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// ScriptStruct EyeTracker.EyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// ScriptStruct EyeTracker.EyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// UserDefinedStruct MixProportionsStruct.MixProportionsStruct
		TEST_METHOD(UserDefinedStruct__MixProportionsStruct__MixProportionsStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMixProportionsStruct, MixContents_4_087C32B1445FBB5223EDA2A1A88D5B16, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMixProportionsStruct, MixProportions_7_B6CEC0E14F7E77A2F3CFCEB78B49F4C0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMixProportionsStruct, SubstanceForm_10_C925520C4AB9EFE7114FA789E8C6ED6A, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMixProportionsStruct, UnknownData_76ZI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMixProportionsStruct, Humidity_13_89BE6EF14389F8190C5A7FA273040A2B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMixProportionsStruct, SubstanceName_16_B4DFC395423C963522E86AA3E95B2CFB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMixProportionsStruct, 0x0040);
		}

		// ScriptStruct AppleVision.DetectedFeature
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFeature)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeature, Confidence, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFeature, 0x0004);
		}

		// ScriptStruct AppleVision.DetectedFeatureRegion
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFeatureRegion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeatureRegion, UnknownData_AFWY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeatureRegion, Points, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFeatureRegion, 0x0018);
		}

		// ScriptStruct AppleVision.DetectedFeature2D
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFeature2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeature2D, BoundingBox, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFeature2D, 0x0018);
		}

		// ScriptStruct AppleVision.DetectedFaceFeature2D
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFaceFeature2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeature2D, FeatureType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeature2D, UnknownData_88I9, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFaceFeature2D, 0x001C);
		}

		// ScriptStruct AppleVision.DetectedFaceFeatureRegion
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFaceFeatureRegion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeatureRegion, FeatureType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeatureRegion, UnknownData_N94T, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFaceFeatureRegion, 0x0020);
		}

		// ScriptStruct AppleVision.DetectedFace
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, BoundingBox, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, UnknownData_SW74, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, Features, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, FeatureRegions, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFace, 0x0050);
		}

		// ScriptStruct AppleVision.FaceDetectionResult
		TEST_METHOD(ScriptStruct__AppleVision__FaceDetectionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceDetectionResult, DetectedFaces, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFaceDetectionResult, 0x0010);
		}

		// UserDefinedStruct EddieLimitLevels.EddieLimitLevels
		TEST_METHOD(UserDefinedStruct__EddieLimitLevels__EddieLimitLevels)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEddieLimitLevels, CodeName_4_BEA046B449FE9679FD25E19CDD1402BB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEddieLimitLevels, FromLevel_7_880D6C964F93A8C0676D7987E34C7E39, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEddieLimitLevels, Multiplier_9_1D139CE54E3EC203F0A2BA9EA58072C1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEddieLimitLevels, 0x0018);
		}

		// UserDefinedStruct MusicBPM.MusicBPM
		TEST_METHOD(UserDefinedStruct__MusicBPM__MusicBPM)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicBPM, Wave_2_3CCB60D041D3DEAFDDF33DB76DF8D2F3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicBPM, BPM_5_776834BB42EB10B637E60C851A6677D8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicBPM, Lenght_8_96E4828643DEDA4DDDE4ACA2BBC78150, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicBPM, TransitionTime_10_269D79154988BB2223382FB760E30BFA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicBPM, InertiaTime_13_10A5E21247B97ED98DA92B803ADF255E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMusicBPM, 0x0018);
		}

		// UserDefinedStruct dialogueData.dialogueData
		TEST_METHOD(UserDefinedStruct__dialogueData__dialogueData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueData, DialogueLine_2_8B15268449F65976C471C581FC5582DB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueData, DialogueAudio_5_AB869F204D883555C2EB44AEBCEA4839, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueData, Response01_23_59E9B44C445C519843261E8243697FED, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueData, Response02_25_88B8209D400E5A6FFF8607B5AEC1A21B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueData, Response03_27_3943CC4D4027A576FA194B9BC91D3965, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdialogueData, Response04_29_19AF821E40CCD72AB3556489E54859CB, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FdialogueData, 0x0100);
		}

		// UserDefinedStruct Bird_EnemySelection_Structure.Bird_EnemySelection_Structure
		TEST_METHOD(UserDefinedStruct__Bird_EnemySelection_Structure__Bird_EnemySelection_Structure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBird_EnemySelection_Structure, Actor_2_9F3699F344F7A605C2832DA413AE8B60, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBird_EnemySelection_Structure, Weight_5_59058897443C6304C72E8E9E2158C5FB, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBird_EnemySelection_Structure, LastSeen_8_8B030DA3437BDDCE100DF5BFD50C8FDA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBird_EnemySelection_Structure, DamageRecieved_15_FDF644AA4831F7E0D2670786C4762050, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBird_EnemySelection_Structure, 0x0014);
		}

		// UserDefinedStruct drugData.drugData
		TEST_METHOD(UserDefinedStruct__drugData__drugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, DrugName_2_D42CFE1B49201DD5F14A7B92ED1D9E5F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, DrugDescription_8_2796A88340BA080A65F5F69051780E3E, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, DrugIcon_5_7EE8BD8A4052D5717A2A618C63FAFFDD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, colloquialNames_12_E78EF57F4B652CDDBB191CB29ABBE240, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, availabilityMultiplier_15_5A44761547697AA7002A4AA4082221A1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, drugForm_19_B94E64C64B0B81B32236CCBA49100E18, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, isWet_21_3DCCFDAF4015574DA4DB7FA14AC0C133, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, UnknownData_BL0K, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, toxicity_24_54E19A5F4B81FE2CF3836FA4F83382FC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, strength_26_B4E709F44A3C02554E1D3FA63641BBFD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, mixStrengthening_28_C468A65149217056E28526BC06376E13, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, addictiveness_30_BF9166F740FC345C0EBDE3BA45E428B2, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, humidity_33_A156622A4983A1045007BD9FF1B5905D, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, UnknownData_72MH, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, StringID_36_3FD7427C416F05A3FAE41494889710CB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, MixStringIDs_41_539D03C54BF6480E05C4DCA079BEC14A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, MixStringProportions_43_ABF7A43645EBC16787BC0E8F2906C6C4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, useSpeedMultiplier_51_3DAFD0674FC791043364A1A7A6B635CA, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, useStaminaMultiplier_52_5D916ACC4DE860C0D6FF68AF5FD919D3, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, useTimeMultiplier_53_57DC35164D7B9CF4AD17ADAABCC4A38F, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, useFOVMultiplier_54_9516AF6A4E004500DC492CA399385E01, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, useConfusionMultiplier_55_C149EF9147BCEFD99BC749A9EE662C38, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdrugData, useDoseTimeout_56_9D3F1C014067339313A823AD1ACFBC36, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FdrugData, 0x00B0);
		}

		// ScriptStruct EditableMesh.VertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// ScriptStruct EditableMesh.PolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_F0I1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// ScriptStruct EditableMesh.MeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_EO12, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// ScriptStruct EditableMesh.MeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_W40F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// ScriptStruct EditableMesh.MeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// ScriptStruct EditableMesh.AttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_W1PU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// ScriptStruct EditableMesh.AttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_B0FK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// ScriptStruct EditableMesh.VertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// ScriptStruct EditableMesh.VertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_L97F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// ScriptStruct EditableMesh.VerticesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__VerticesForEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, NewVertexID0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, NewVertexID1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVerticesForEdge, 0x000C);
		}

		// ScriptStruct EditableMesh.AttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_453A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// ScriptStruct EditableMesh.VertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// ScriptStruct EditableMesh.VertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// ScriptStruct EditableMesh.SubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// ScriptStruct EditableMesh.SubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// ScriptStruct EditableMesh.SubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// ScriptStruct EditableMesh.SubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_LQBQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// ScriptStruct EditableMesh.SubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// ScriptStruct EditableMesh.VertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_R2ZK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// ScriptStruct EditableMesh.VertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_FMNV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_R1NI, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// ScriptStruct EditableMesh.PolygonHoleVertices
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonHoleVertices)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonHoleVertices, HoleVertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonHoleVertices, 0x0010);
		}

		// ScriptStruct EditableMesh.PolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_EQIB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonHoles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_JN08, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0030);
		}

		// ScriptStruct EditableMesh.PolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_YW9E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// ScriptStruct EditableMesh.EdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, ConnectedPolygons, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_GA9V, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0030);
		}

		// ScriptStruct EditableMesh.VertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// ScriptStruct EditableMesh.VertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// ScriptStruct EditableMesh.ChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_9JWF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// ScriptStruct EditableMesh.PolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// ScriptStruct EditableMesh.RenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_AC81, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// ScriptStruct EditableMesh.TriangleID
		TEST_METHOD(ScriptStruct__EditableMesh__TriangleID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// ScriptStruct EditableMesh.RenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_K8NT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// ScriptStruct PhysXVehicles.WheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_RQUN, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// ScriptStruct PhysXVehicles.ReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// ScriptStruct PhysXVehicles.VehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// ScriptStruct PhysXVehicles.TireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_Z31I, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// ScriptStruct PhysXVehicles.VehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_7CY5, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x0090);
		}

		// ScriptStruct PhysXVehicles.VehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_EEGG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// ScriptStruct PhysXVehicles.VehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// ScriptStruct PhysXVehicles.VehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_DUIO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_YY83, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// ScriptStruct PhysXVehicles.AnimNode_WheelHandler
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_N16S, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x0108);
		}

		// ScriptStruct PhysXVehicles.VehicleAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_PT8E, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0580);
		}

		// ScriptStruct ProceduralMeshComponent.ProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_431A, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// ScriptStruct ProceduralMeshComponent.ProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// ScriptStruct ProceduralMeshComponent.ProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_H1P9, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// ScriptStruct JsonUtilities.JsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_MD55, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// ScriptStruct AppleImageUtils.AppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// ScriptStruct DrugDealerSimulator.AddictionMark
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__AddictionMark)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddictionMark, UnknownData_JQAL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAddictionMark, 0x001C);
		}

		// ScriptStruct DrugDealerSimulator.BU_UnseenDetailsSets
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__BU_UnseenDetailsSets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenDetailsSets, SetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenDetailsSets, LastSeenLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenDetailsSets, NewLevels, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBU_UnseenDetailsSets, 0x0018);
		}

		// ScriptStruct DrugDealerSimulator.BU_UnseenUL
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__BU_UnseenUL)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenUL, UpgradeLine, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenUL, UnseenDetailsSet, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenUL, UnseenCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UnseenUL, UnknownData_O6BO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBU_UnseenUL, 0x0020);
		}

		// ScriptStruct DrugDealerSimulator.BU_UpgradeDetailsStruct
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__BU_UpgradeDetailsStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, UpgradeLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, UnknownData_Y85M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, MaterialForSet, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, MaterialSetIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, Price, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, DoManipulateExistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, UpgradeExistanceTargetState, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_UpgradeDetailsStruct, UnknownData_I4J6, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBU_UpgradeDetailsStruct, 0x0020);
		}

		// ScriptStruct DrugDealerSimulator.BU_ObjectsToDetailsBridge
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__BU_ObjectsToDetailsBridge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_ObjectsToDetailsBridge, TargetStaticMeshes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBU_ObjectsToDetailsBridge, UpgradeDetails, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBU_ObjectsToDetailsBridge, 0x00A0);
		}

		// ScriptStruct DrugDealerSimulator.TS_EntrenceData
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_EntrenceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_EntrenceData, EntrenaceLoc, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_EntrenceData, UnknownData_VLPK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_EntrenceData, EntrenceName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_EntrenceData, EntranceActorIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_EntrenceData, UnknownData_EHXW, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_EntrenceData, 0x0028);
		}

		// ScriptStruct DrugDealerSimulator.TS_PayData
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_PayData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_PayData, PayTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_PayData, PayedAmount, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_PayData, 0x0008);
		}

		// ScriptStruct DrugDealerSimulator.TS_UpgradeBuyData
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_UpgradeBuyData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_UpgradeBuyData, BuyTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_UpgradeBuyData, UpgradeIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_UpgradeBuyData, 0x0008);
		}

		// ScriptStruct DrugDealerSimulator.TS_ConnectionData
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_ConnectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, ConnectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, EntIndexA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, EntIndexB, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, TotalDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, DugDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, MoneyForDig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, MoneySpend, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentDigSpeedPerHour, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentHourCost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentMeterCost, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentWorkersWalkSpeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentWorkDigTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentDEASeekSpeedFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CurrentWorkersEffieciency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, BaseWorkersCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, CreationTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, PayLog, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, UpgradesLog, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, Done, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, UnknownData_59UO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidedCount, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, LastReportedProgress, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, NextProgressReport, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, LastReportedRaidProgress, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, NextRaidProgressReport, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, BeeingRaided, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, UnknownData_6KC8, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidedDistance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidedPerc, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidedEntranceA, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidedEntranceB, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, UnknownData_M983, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, DoubleRaidTime, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, DoubleRaidProgress, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, EndRaidTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidChainIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, OldConnectionIndex, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, RaidLeftTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionData, UnknownData_BV75, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_ConnectionData, 0x00A8);
		}

		// ScriptStruct DrugDealerSimulator.TS_ConnectionWorkUpgrade
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_ConnectionWorkUpgrade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, calcDigSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UpgradeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, forceBuild, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UnknownData_67I8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UpgradeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UpgradePrice, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UpgradePriceForAlreadyDugMeter, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UnlockProgress, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, CheckForDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UnknownData_ZFKQ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, MinUnlockDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, AdditionalWorkersCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, AdditionalWorkersEfficiency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, AdditionalCostPerHour, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, AdditionalCostPerMeter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, DEARaidSeekSpeedFactor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, WorkersWalkSpeedFactor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, WorkProlongFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, CanUpgradeBeUsedParallel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, CanUpgradeBeCancelled, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, DEARaided, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, DEARecoveryPossible, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, DEARecoveryCost, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, Enabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UnknownData_KC0J, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, UsingConnectionIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnectionWorkUpgrade, WorkingInConnections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_ConnectionWorkUpgrade, 0x00B0);
		}

		// ScriptStruct DrugDealerSimulator.TS_RaidLog
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_RaidLog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_RaidLog, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_RaidLog, TypeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_RaidLog, IndexA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_RaidLog, IndexB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_RaidLog, adtValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_RaidLog, 0x0014);
		}

		// ScriptStruct DrugDealerSimulator.TS_AvailableDestinations
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_AvailableDestinations)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_AvailableDestinations, StartEntrenceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_AvailableDestinations, EndEntrenceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_AvailableDestinations, TunnelLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_AvailableDestinations, 0x000C);
		}

		// ScriptStruct DrugDealerSimulator.TS_ConnState
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__TS_ConnState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, ConnectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, FindResult, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, UnknownData_ECHM, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, EntIndexA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, EntIndexB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, ValidEntA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, ValidEntB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, UnknownData_7PZA, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, EntNameA, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, EntNameB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, EntLocA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, EntLocB, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, RaidedEntA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, RaidedEntB, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, UnknownData_8TBV, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, TotalDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, DugDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, MoneyForDig, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, BeeingRaided, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, UnknownData_4ZMG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTS_ConnState, RaidedPerc, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTS_ConnState, 0x0068);
		}

		// ScriptStruct DrugDealerSimulator.SubstanceMeta
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__SubstanceMeta)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstanceMeta, substanceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstanceMeta, takeDayFloatTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstanceMeta, takenPower, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstanceMeta, endEffectTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstanceMeta, recoveryOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstanceMeta, recoveryTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubstanceMeta, 0x0018);
		}

		// ScriptStruct DrugDealerSimulator.DrugsSubData
		TEST_METHOD(ScriptStruct__DrugDealerSimulator__DrugsSubData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrugsSubData, speedMultiplier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrugsSubData, staminaMultiplier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrugsSubData, 0x0008);
		}

		// ScriptStruct UMG.WidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// ScriptStruct UMG.EventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_4QFM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// ScriptStruct UMG.DynamicPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// ScriptStruct UMG.AnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// ScriptStruct UMG.SlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_NL88, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// ScriptStruct UMG.ShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// ScriptStruct UMG.MovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// ScriptStruct UMG.SlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// ScriptStruct UMG.NamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// ScriptStruct UMG.PaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_XSRV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// ScriptStruct UMG.WidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_DJRQ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0028);
		}

		// ScriptStruct UMG.DelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_VDG5, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// ScriptStruct UMG.WidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_AGMW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0028);
		}

		// ScriptStruct UMG.MovieScene2DTransformSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_VB2F, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// ScriptStruct UMG.MovieSceneMarginSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_LNAF, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// ScriptStruct UMG.MovieSceneWidgetMaterialSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0060);
		}

		// ScriptStruct UMG.RichTextStyleRow
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x01F0);
		}

		// ScriptStruct UMG.RichImageRow
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// ScriptStruct InputCore.Key
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_QX68, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// ScriptStruct CinematicCamera.CameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_N6JI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_DEH0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_TUY5, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0030);
		}

		// ScriptStruct CinematicCamera.CameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// ScriptStruct CinematicCamera.CameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// ScriptStruct CinematicCamera.CameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_XQ3O, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0018);
		}

		// ScriptStruct CinematicCamera.CameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_JNTZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_F6LD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_F874, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_PCJT, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0038);
		}

		// ScriptStruct CinematicCamera.NamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_XFVT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// ScriptStruct CinematicCamera.NamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// ScriptStruct AssetRegistry.AssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_NSKJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// ScriptStruct AssetRegistry.ARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_COZH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_K3U4, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// ScriptStruct AssetRegistry.TagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// ScriptStruct AssetRegistry.AssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// ScriptStruct AssetRegistry.AssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// ScriptStruct Renderer.LightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_ZKD4, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// UserDefinedStruct SaleAreaData.SaleAreaData
		TEST_METHOD(UserDefinedStruct__SaleAreaData__SaleAreaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, DisplayName_5_3CE1C7854877077B880F229F7603596A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, UnlockLevel_8_FA9B90D647CAEBAB3C1B949025224C83, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, UnknownData_D6BP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, UnlockArea_33_79B8D66148EC11D706824790AD122DF8, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, UnlockExposureMin_36_F37B01574A3CA5827665CFB528672F9B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, RespectMultiplier_11_AFCF083E4EC89D2654B039BB04E01FB1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, ClientAverage_13_C03A78164B46DDF87346049DF2C1C656, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, RiskMultiplier_27_4582C65F4EC32C25F7567C904286280E, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, DefaultAvailable_16_784ADD5249F4E14F49C0A0B9AC060B1C, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, UnknownData_FQEQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, DrugDemand_23_9A27ACAF406F6695681AF5ADEE2090CB, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, DefaultMaxDealers_30_D9ED266C49CF49FCEF5EB294781E2732, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaleAreaData, DefaultMaxClients_39_262BE34F49C709B7221131A1B0A444B3, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaleAreaData, 0x0060);
		}

		// UserDefinedStruct appartmentEquipment.appartmentEquipment
		TEST_METHOD(UserDefinedStruct__appartmentEquipment__appartmentEquipment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, Name_2_8A9A811049970E7E457E42A7203FEFEB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, Description_4_5BDE9D2C4DB589001751F392B42CC593, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, Category_13_8A6CC0FB4389B3045160EFB604DEF997, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, UnknownData_RU2J, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, Icon_7_C099379A4645F526989E00A2E1FEBD82, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, ActorClass_10_301502684B9020104DEA978B4AAB1CF6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FappartmentEquipment, PlacementSound_17_4D97320A4CF81BAA891C21BE6493249A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FappartmentEquipment, 0x0050);
		}

		// UserDefinedStruct MoneyLaunderLevelData.MoneyLaunderLevelData
		TEST_METHOD(UserDefinedStruct__MoneyLaunderLevelData__MoneyLaunderLevelData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, UpgradeName_2_3AEDE3CF437875EBCE5D0A9F4F68993F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, UpgradeDescription_4_367540C74505D7CC794D898665EA9AFD, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, UpgradeImage_16_4AEDF531400C75FBC6622A9C54B6C4BE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, UpgradeCost_7_54C492634952518447D7EA8F55DAC4FE, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, UpgradeCashRequirement_9_18383E504B3A9B253CC931A084E947B0, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, UpgradeMinDealerLevel_19_2C3B088D454173FF083ABDB2FE1EB892, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, AtLevelPercentLaunder_11_33C460974A261731C283B7989DFA0D83, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoneyLaunderLevelData, AtLevelLaunderDayMax_13_AA0EF9F346E66C110510DF90DC2C5F5A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMoneyLaunderLevelData, 0x004C);
		}

		// UserDefinedStruct VillaSurfaceFinish.VillaSurfaceFinish
		TEST_METHOD(UserDefinedStruct__VillaSurfaceFinish__VillaSurfaceFinish)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVillaSurfaceFinish, SurfaceName_5_730EBD934151F2C7D4D2ACA1DC1FC1DC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVillaSurfaceFinish, SurfaceDescription_12_C21F4CA8454170219BCCFEBCF9095105, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVillaSurfaceFinish, SurfaceMaterial_16_39C1B40D43F53525061FE39F7681FA90, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVillaSurfaceFinish, Thumbnail_19_29CF06D94C46F70568A81181D45579D8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVillaSurfaceFinish, SurfaceCostPerMeter_9_13EF67CA42CFA647FAC9349C316D1D9D, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVillaSurfaceFinish, Category_15_D383E0B24ECD56B2D7222693FE8D9410, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVillaSurfaceFinish, 0x0045);
		}

		// UserDefinedStruct LootPoolEntry.LootPoolEntry
		TEST_METHOD(UserDefinedStruct__LootPoolEntry__LootPoolEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolEntry, ItemID_2_70D9C3174F7D926C7A94009EF0CFA9EC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolEntry, SpawnChance_5_E7EBDD184BFE47765B336A9F3BCE65DE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolEntry, QuantityMin_10_1F8AB8604B0DA028260C98B69FDBF2A1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolEntry, QuantityMax_11_698131184B5138E0C3F5C19F7F59A830, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolEntry, AmountMin_14_AA69997F4959FD2F358BC18DA8E89737, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootPoolEntry, AmountMax_15_7035E0D3459D7F404F80859F16512342, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootPoolEntry, 0x001C);
		}

		// ScriptStruct Paper2D.PaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_HAQN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// ScriptStruct Paper2D.SpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// ScriptStruct Paper2D.PaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_T04J, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// ScriptStruct Paper2D.PaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_RWE2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_ANFV, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// ScriptStruct Paper2D.PaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_SEPN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// ScriptStruct Paper2D.IntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// ScriptStruct Paper2D.SpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_W2RQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_8RBB, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// ScriptStruct Paper2D.SpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_98DP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_ZOZD, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_BNZT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// ScriptStruct Paper2D.PaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_V7J2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// ScriptStruct Paper2D.PaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_SCPM, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// ScriptStruct Paper2D.PaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_KWH9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// ScriptStruct Paper2D.SpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_P1WD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_SGER, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_P0N3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// ScriptStruct Paper2D.SpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_UJ3C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// ScriptStruct GeometryCache.GeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_846G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// ScriptStruct GeometryCache.TrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_0NVT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// ScriptStruct GeometryCache.GeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_99IG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// ScriptStruct GeometryCache.GeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_7QW3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// ScriptStruct AIModule.AIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// ScriptStruct AIModule.AIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_C7VQ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_WZ7O, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_GGRN, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x0048);
		}

		// ScriptStruct AIModule.ActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_R89C, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// ScriptStruct AIModule.AIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_2RPW, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// ScriptStruct AIModule.AINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_I6IU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_TI4N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// ScriptStruct AIModule.AIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_3U57, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// ScriptStruct AIModule.AITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_4YHD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// ScriptStruct AIModule.AITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_1626, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// ScriptStruct AIModule.AISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_KQJ1, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// ScriptStruct AIModule.AIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_YPGU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// ScriptStruct AIModule.BTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_GL55, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// ScriptStruct AIModule.BehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_3GXX, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// ScriptStruct AIModule.BlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_4SQB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// ScriptStruct AIModule.BTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// ScriptStruct AIModule.BlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_9HEO, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_E0LX, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// ScriptStruct AIModule.AIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_1GTO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, CachedProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// ScriptStruct AIModule.AIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0028);
		}

		// ScriptStruct AIModule.AIDataProviderFloatValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_08C1, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0030);
		}

		// ScriptStruct AIModule.AIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_IRFF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// ScriptStruct AIModule.EQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_G6RT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_U0DE, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// ScriptStruct AIModule.EnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_6OOL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// ScriptStruct AIModule.CrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// ScriptStruct AIModule.CrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// ScriptStruct AIModule.AIDataProviderBoolValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_87X7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0030);
		}

		// ScriptStruct AIModule.EnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_K3A5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_H9HY, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// ScriptStruct AIModule.AIDataProviderIntValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_CKEL, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0030);
		}

		// ScriptStruct AIModule.EnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_PFR4, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// ScriptStruct AIModule.EnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_D96J, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// ScriptStruct AIModule.EnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_RGM4, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_FFWM, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// ScriptStruct AIModule.PawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// ScriptStruct AIModule.PawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_S2N9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// ScriptStruct AIModule.AIDataProviderStructValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_Q1Y2, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// ScriptStruct AIModule.AISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_BXRI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// ScriptStruct AIModule.EnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_4KK2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// ScriptStruct AIModule.EnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_C6AX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_0U4I, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_M2A1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// ScriptStruct AIModule.GenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// UserDefinedStruct ClientMeta.ClientMeta
		TEST_METHOD(UserDefinedStruct__ClientMeta__ClientMeta)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMeta, ClientName_2_B9EC20324537479C558659914027D2FF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMeta, ClientLooks_6_17F881CC4FD6EE020984C49BE3B559BE, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMeta, UnknownData_TDSX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMeta, ClientAvatar_9_3424827B4EEA389CD5B9B3B6BAB27DD5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMeta, ClientExp_12_F25930D04D16173258CC4EA2E973B822, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMeta, IsDealer_15_1D392A6F4AEBD63467C2AEB66EFCB4C1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMeta, 0x003D);
		}

		// UserDefinedStruct HideoutData.HideoutData
		TEST_METHOD(UserDefinedStruct__HideoutData__HideoutData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, HidoutName_2_0878FE454DDCB9B12F4A00ABECFB6214, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, HideoutDescription_4_3857FE4649F4BC6A12EB38B84D4BF5AE, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, Area_6_E845C8BD4A2D60C0D54143A5C6C5163B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, HideoutIcon_9_2C1BD03846E7813C87DAFCB01A22E415, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, HideoutMinLevel_12_8C8008ED4E4843B2B1F8E6A7ACC654DC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, HidoutPrice_15_208A0A93481A551120BB4EAB2334C450, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, Floors_18_1F0977B745E8EB4634525FA553FFE51D, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, SaveStation_21_3A62421F4292A1519F766B8BBE1EC079, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, AreaForever_42_1B24065B4610DCC26655459D0CF701B3, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, UnknownData_WBN1, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, RespectBoost_24_663EAF1D45C2A8033B7209AA9DD9EC1F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, ClientBoost_27_D94690514103FD85A581DEB2864C3D59, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, MaxDealerBoost_39_D89D2A234CF0CA439535E581158CC71D, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, RespectPercBoost_30_094A96FB4FEDF2F87B30AEBE0ABBA072, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, RespectDropBoost_33_7ED87EB74917CD6D82779D91634462B8, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, ExpBoost_34_1A9687AA41E403E3ED455997C7981035, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideoutData, SaleSpeedBoost_36_F2BD0EA5486334216A30C184348BC10D, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHideoutData, 0x007C);
		}

		// ScriptStruct CustomMeshComponent.CustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// UserDefinedStruct InventoryListStructure.InventoryListStructure
		TEST_METHOD(UserDefinedStruct__InventoryListStructure__InventoryListStructure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, ItemID_2_324B83ED437E8B40FE9C0C8E6B77F1EF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, ItemQuantity_5_5FC98A504C1F1F7038442980024ECBD0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, ItemAmount_26_F0481C6644AA39BC24534C94A29D7450, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, CustomTagName_8_56E12D1945183CB6DA2697B0F6423537, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, PocketIndex_19_726B79DC427258996E799999DC88C63A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, LocalGuid_11_15F567AD47611473602F15A7A7DE1F5C, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, HeldInGuid_14_F932307F422CBA047D25A9AD6A7F0AB2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, UnknownData_6K3D, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, MixProportions_16_D1FE595547104A1D9071A9807CFE11BE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryListStructure, FromVendor_23_056CA5AB4E56D7F67C10F2825EAB58AC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryListStructure, 0x0091);
		}

		// ScriptStruct OnlineSubsystem.NamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// ScriptStruct OnlineSubsystem.NamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_59NX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_BXBK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_2BTF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// ScriptStruct DatasmithContent.DatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_2H4N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_EDBD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_V3EV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_CDEX, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// ScriptStruct DatasmithContent.DatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// ScriptStruct DatasmithContent.DatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// ScriptStruct DatasmithContent.DatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_KPBS, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_WGK3, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0018);
		}

		// ScriptStruct DatasmithContent.DatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x000C);
		}

		// ScriptStruct DatasmithContent.DatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// ScriptStruct DatasmithContent.DatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// ScriptStruct DatasmithContent.DatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// ScriptStruct DatasmithContent.DatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_3M92, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// ScriptStruct DatasmithContent.DatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// ScriptStruct LocationServicesBPLibrary.LocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// ScriptStruct Landscape.LandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_SW9P, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// ScriptStruct Landscape.LandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_UHDY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// ScriptStruct Landscape.WeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_4D66, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// ScriptStruct Landscape.GrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_YE9V, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_NF82, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_KXE6, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// ScriptStruct Landscape.LandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_AA4N, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// ScriptStruct Landscape.LandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0040);
		}

		// ScriptStruct Landscape.LandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_G7ZJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// ScriptStruct Landscape.GrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_42A8, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// ScriptStruct Landscape.LayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_2IJ9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_RW87, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_DWRF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_TSE3, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0058);
		}

		// ScriptStruct Landscape.LandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0028);
		}

		// ScriptStruct Landscape.GizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_R3ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// ScriptStruct Landscape.LandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// ScriptStruct Landscape.LandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_HCUW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// ScriptStruct Landscape.LandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// ScriptStruct Landscape.LandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_B1BK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// ScriptStruct Landscape.LandscapeWeightmapUsage
		TEST_METHOD(ScriptStruct__Landscape__LandscapeWeightmapUsage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeWeightmapUsage, ChannelUsage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeWeightmapUsage, 0x0020);
		}

		// ScriptStruct Landscape.ForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_7Y1N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// ScriptStruct Landscape.ForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_TVN7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// ScriptStruct Landscape.ForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_AS94, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// ScriptStruct Landscape.LandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_HHQG, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_DS03, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_FILC, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// UserDefinedStruct contactPersonStruct.contactPersonStruct
		TEST_METHOD(UserDefinedStruct__contactPersonStruct__contactPersonStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FcontactPersonStruct, Name_16_FF9AED99407FDA5CC81F3A92D99C45A8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FcontactPersonStruct, Description_6_ECF19275436CC69E203CADB5419CC7F3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FcontactPersonStruct, Location_15_1B7284484103CF3DD7746CB1E1E68452, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FcontactPersonStruct, job_4_A2613CE44D171CC80EB28680EF041B02, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FcontactPersonStruct, Avatar_9_CA0FAF344B4601CB832D3A9A2A257CFB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FcontactPersonStruct, Age_12_198EA9EA4ECE6C576364EA856663C718, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FcontactPersonStruct, 0x006C);
		}

		// ScriptStruct AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_9J3A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// ScriptStruct MediaCompositing.MovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_IBIT, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// ScriptStruct MediaCompositing.MovieSceneMediaSectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// UserDefinedStruct inventoryItemStruct.inventoryItemStruct
		TEST_METHOD(UserDefinedStruct__inventoryItemStruct__inventoryItemStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, Name_2_DE72969C475DA33FA2F65892697C784C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, Desc_15_C67A089C4E33FD18F2A111BA47FD6ACE, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, icon_12_A68CA86446F5D56467E879BBDDF79CD6, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, Size_6_4944B52D4D792BAD9BB279A37D23B78A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, Wieght_8_4A5B2F4A44DC71DC37992A9C578CEACC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, ActorClass_19_92D5E7B44B81759034AE35B07C0EC14A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, Category_23_0F75A19C496A045546393F8BBCFE4526, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, canStack_25_6E7A78DA43FCB6665D916FA42A34E301, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, UnknownData_JLLI, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, quantity_28_03E582D645680161A02BA0940CD2DFCA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, gramsPerItem_41_2D06C0444B174D68EEA26ABA1D1150E5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, UnknownData_P9QY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FinventoryItemStruct, drugData_44_1C3318D649872F1B32D87B862C858C98, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FinventoryItemStruct, 0x0108);
		}

		// ScriptStruct SessionMessages.SessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_JGH5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// ScriptStruct SessionMessages.SessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_Z9GB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// ScriptStruct SessionMessages.SessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_FVP1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// ScriptStruct SessionMessages.SessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_WRA2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, IsConsoleBuild, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_0QLT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_OUMN, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0098);
		}

		// ScriptStruct SessionMessages.SessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// UserDefinedStruct ShopProductStruct.ShopProductStruct
		TEST_METHOD(UserDefinedStruct__ShopProductStruct__ShopProductStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopProductStruct, ProductID_2_61D18C814F9413C4177AA3B03A69AE14, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopProductStruct, ProductPrice_5_328C964B4BE6AF79ACFB95BA8AA2E907, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShopProductStruct, 0x000C);
		}

		// UserDefinedStruct ShopDataStruct.ShopDataStruct
		TEST_METHOD(UserDefinedStruct__ShopDataStruct__ShopDataStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopDataStruct, ShopName_3_26074EFA4B31008BC4205ABEE3669139, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopDataStruct, ShopDescription_5_82611B7E4BBA7B9175B3B4BF1B096C5A, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopDataStruct, ShopProducts_9_7832D5B44318B6677AC337AC9D3E48C9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShopDataStruct, 0x0040);
		}

		// UserDefinedStruct DrugDemandStruct.DrugDemandStruct
		TEST_METHOD(UserDefinedStruct__DrugDemandStruct__DrugDemandStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrugDemandStruct, DrugID_3_8A4153D543909CAFA5827CB1D0748A56, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrugDemandStruct, DemandMultiplier_6_1B3944FB4F5B160F5D8B619B2496D513, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrugDemandStruct, OrderMultiplier_8_6060069246A02C2C57D7D888592B823D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrugDemandStruct, 0x0010);
		}

		// UserDefinedStruct FlagStruct.FlagStruct
		TEST_METHOD(UserDefinedStruct__FlagStruct__FlagStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlagStruct, BoolValue_1_B621250C4436F52279EBC789E2AE28D9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlagStruct, UnknownData_BM8N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlagStruct, FloatValue_4_84C339BE4BFFA59BE99714B615C3B3F7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlagStruct, IntValue_11_FA91B6C3429E0A1C69544190AECC9E7B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlagStruct, UnknownData_UQPB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlagStruct, Notatka_10_F4A09FB144BEDC8132DC4C8171D2AC94, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFlagStruct, 0x0020);
		}

		// ScriptStruct PacketHandler.NetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__PacketHandler__NetAnalyticsDataConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_72Q2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x0010);
		}

		// ScriptStruct OnlineSubsystemUtils.BlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_4U58, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x00B8);
		}

		// ScriptStruct OnlineSubsystemUtils.PIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// ScriptStruct OnlineSubsystemUtils.PlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_K7Z7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// ScriptStruct OnlineSubsystemUtils.PartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_XXMC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0040);
		}

		// ScriptStruct RamaSaveSystem.RamaAsyncSaveUnit
		TEST_METHOD(ScriptStruct__RamaSaveSystem__RamaAsyncSaveUnit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, UpdateUI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, UnknownData_8MLT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, TotalComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, UnknownData_6T1T, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, RamaSaveComponents, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, Filename, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, ToBinary, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, UnknownData_6LK2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, Finished, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, CompressionStarted, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaAsyncSaveUnit, UnknownData_S594, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRamaAsyncSaveUnit, 0x0050);
		}

		// ScriptStruct RamaSaveSystem.RamaSaveEngineParams
		TEST_METHOD(ScriptStruct__RamaSaveSystem__RamaSaveEngineParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveEngineParams, LoadOnlyActorsWithSaveTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveEngineParams, Filename, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveEngineParams, DestroyActorsBeforeLoad, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveEngineParams, DontLoadPlayerPawns, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveEngineParams, UnknownData_OL0D, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveEngineParams, LoadOnlyStreamingLevel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRamaSaveEngineParams, 0x0038);
		}

		// ScriptStruct RamaSaveSystem.RamaSaveSystemAssetPathRemap
		TEST_METHOD(ScriptStruct__RamaSaveSystem__RamaSaveSystemAssetPathRemap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveSystemAssetPathRemap, OldPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRamaSaveSystemAssetPathRemap, NewPath, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRamaSaveSystemAssetPathRemap, 0x0020);
		}

		// ScriptStruct RamaSaveSystem.RBLoad
		TEST_METHOD(ScriptStruct__RamaSaveSystem__RBLoad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBLoad, UnknownData_652Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBLoad, 0x0050);
		}

		// ScriptStruct RamaSaveSystem.RBSave
		TEST_METHOD(ScriptStruct__RamaSaveSystem__RBSave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBSave, PhysicsLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBSave, UnknownData_NA7Q, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBSave, PhysicsRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBSave, LinearVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBSave, AngularVelocity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBSave, UnknownData_OFBL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBSave, 0x0040);
		}

		// ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_O5S6, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0028);
		}

		// ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplateParameters
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, UnknownData_C8N7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0038);
		}

		// ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0058);
		}

		// UserDefinedStruct NewDrugData.NewDrugData
		TEST_METHOD(UserDefinedStruct__NewDrugData__NewDrugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, DrugSourceName_2_BD60123B47D8A346B9BF039C049228C7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, DrugSourceDescription_4_7D10F5D74F5F3358B8CC39B9B74BF183, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, DrugSourceIcon_7_0437A24E4BEA12F03D805CA053E7685A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, DemandMultiplier_10_1931BAA0448F40F3E0A5EB89498368DC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, MinOrderQuantity_13_0D934ADD4FC1492DBEB2F585D3EFC509, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, MaxOrderQuantity_15_54918E674D540BAECE0D76AAC4387405, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, OrderRaiseRate_18_04323A3F4E7BFB815DB7AD9F32D01422, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, DrugProperties_22_E6A8BE7C4BD0A5DE60F298A73A8A53E0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, BuyPrice_25_27D1F10E42A33040AB639C8C0FEDB998, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, SalePriceAverage_27_FBEAA26A439C7F927C33289B4DA890CA, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, LevelUnlock_30_B9A21DC146D288D014D8E4AA726A439E, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, ExcludeFromSales_33_895EFF4D4C7521B2375B849B3439E2EA, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDrugData, ShowOnlyUnlocked_35_9D314DB043A76470785CF092AF9B49FF, 0x0105);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewDrugData, 0x0106);
		}

		// ScriptStruct MRMesh.MRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_UJQX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// ScriptStruct Foliage.FoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_CKRF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_Z5I5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// ScriptStruct Foliage.FoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_8KEY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// ScriptStruct Foliage.ProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_IKI1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_IAAM, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_J426, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// UserDefinedStruct AreaPlaylistStruct.AreaPlaylistStruct
		TEST_METHOD(UserDefinedStruct__AreaPlaylistStruct__AreaPlaylistStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaPlaylistStruct, Notatka_7_39931FB04ACFC8A61B427DA4AB8D1F0F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaPlaylistStruct, Playlist_3_98E6D365495CCBB80409F583564A6C5D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaPlaylistStruct, 0x0020);
		}

		// ScriptStruct UdpMessaging.UdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// ScriptStruct Overlay.OverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// UserDefinedStruct clientLooksData.clientLooksData
		TEST_METHOD(UserDefinedStruct__clientLooksData__clientLooksData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FclientLooksData, mainBodyID_2_46F1DC474B6E35DF2EC64799A3208BDF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FclientLooksData, headSkinVersion_11_4B27153E49BC8FCEF2421BBDA17666AB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FclientLooksData, hairID_13_5BFC6B6F4C189721CA0E918028FC1466, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FclientLooksData, hatID_14_8232122F47A15227EABCEF8079DA56B8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FclientLooksData, glassesID_17_E513851E4C7B808151DA00B7DE2DEECB, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FclientLooksData, 0x0014);
		}

		// ScriptStruct LinearTimecode.DropTimecode
		TEST_METHOD(ScriptStruct__LinearTimecode__DropTimecode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, FrameRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, bColorFraming, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, bRunningForward, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, bNewFrame, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, UnknownData_ZO5D, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropTimecode, 0x001C);
		}

		// ScriptStruct MediaUtils.MediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// ScriptStruct MediaUtils.MediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x001C);
		}
	};
}
